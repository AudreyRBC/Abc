!function(l){var V={};function d(c){if(V[c])return V[c].exports;var n=V[c]={i:c,l:!1,exports:{}};return l[c].call(n.exports,n,n.exports,d),n.l=!0,n.exports}d.m=l,d.c=V,d.d=function(l,V,c){d.o(l,V)||Object.defineProperty(l,V,{enumerable:!0,get:c})},d.r=function(l){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(l,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(l,"__esModule",{value:!0})},d.t=function(l,V){if(1&V&&(l=d(l)),8&V)return l;if(4&V&&"object"==typeof l&&l&&l.__esModule)return l;var c=Object.create(null);if(d.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:l}),2&V&&"string"!=typeof l)for(var n in l)d.d(c,n,function(V){return l[V]}.bind(null,n));return c},d.n=function(l){var V=l&&l.__esModule?function(){return l.default}:function(){return l};return d.d(V,"a",V),V},d.o=function(l,V){return Object.prototype.hasOwnProperty.call(l,V)},d.p="",d(d.s="./assets/js/app.js")}({"../build/abc.js":
/*!***********************!*\
  !*** ../build/abc.js ***!
  \***********************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('!function (n, t) {\n   true ? module.exports = t() : undefined;\n}(window, function () {\n  return function (n) {\n    var t = {};\n\n    function e(l) {\n      if (t[l]) return t[l].exports;\n      var a = t[l] = {\n        i: l,\n        l: !1,\n        exports: {}\n      };\n      return n[l].call(a.exports, a, a.exports, e), a.l = !0, a.exports;\n    }\n\n    return e.m = n, e.c = t, e.d = function (n, t, l) {\n      e.o(n, t) || Object.defineProperty(n, t, {\n        enumerable: !0,\n        get: l\n      });\n    }, e.r = function (n) {\n      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(n, Symbol.toStringTag, {\n        value: "Module"\n      }), Object.defineProperty(n, "__esModule", {\n        value: !0\n      });\n    }, e.t = function (n, t) {\n      if (1 & t && (n = e(n)), 8 & t) return n;\n      if (4 & t && "object" == typeof n && n && n.__esModule) return n;\n      var l = Object.create(null);\n      if (e.r(l), Object.defineProperty(l, "default", {\n        enumerable: !0,\n        value: n\n      }), 2 & t && "string" != typeof n) for (var a in n) e.d(l, a, function (t) {\n        return n[t];\n      }.bind(null, a));\n      return l;\n    }, e.n = function (n) {\n      var t = n && n.__esModule ? function () {\n        return n.default;\n      } : function () {\n        return n;\n      };\n      return e.d(t, "a", t), t;\n    }, e.o = function (n, t) {\n      return Object.prototype.hasOwnProperty.call(n, t);\n    }, e.p = "", e(e.s = 0);\n  }({\n    "./node_modules/fuse.js/dist/fuse.js":\n    /*!*******************************************!*\\\n      !*** ./node_modules/fuse.js/dist/fuse.js ***!\n      \\*******************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'/*!\\n * Fuse.js v3.4.6 - Lightweight fuzzy-search (http://fusejs.io)\\n * \\n * Copyright (c) 2012-2017 Kirollos Risk (http://kiro.me)\\n * All Rights Reserved. Apache Software License 2.0\\n * \\n * http://www.apache.org/licenses/LICENSE-2.0\\n */\\n!function(e,t){ true?module.exports=t():undefined}(this,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t){e.exports=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=n(2),a=n(8),s=n(0),c=function(){function e(t,n){var r=n.location,o=void 0===r?0:r,i=n.distance,s=void 0===i?100:i,c=n.threshold,h=void 0===c?.6:c,l=n.maxPatternLength,u=void 0===l?32:l,f=n.caseSensitive,d=void 0!==f&&f,v=n.tokenSeparator,p=void 0===v?/ +/g:v,g=n.findAllMatches,y=void 0!==g&&g,m=n.minMatchCharLength,k=void 0===m?1:m,S=n.id,x=void 0===S?null:S,b=n.keys,M=void 0===b?[]:b,_=n.shouldSort,L=void 0===_||_,w=n.getFn,A=void 0===w?a:w,C=n.sortFn,I=void 0===C?function(e,t){return e.score-t.score}:C,O=n.tokenize,j=void 0!==O&&O,P=n.matchAllTokens,F=void 0!==P&&P,T=n.includeMatches,z=void 0!==T&&T,E=n.includeScore,K=void 0!==E&&E,$=n.verbose,J=void 0!==$&&$;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options={location:o,distance:s,threshold:h,maxPatternLength:u,isCaseSensitive:d,tokenSeparator:p,findAllMatches:y,minMatchCharLength:k,id:x,keys:M,includeMatches:z,includeScore:K,shouldSort:L,getFn:A,sortFn:I,verbose:J,tokenize:j,matchAllTokens:F},this.setCollection(t)}var t,n,c;return t=e,(n=[{key:"setCollection",value:function(e){return this.list=e,e}},{key:"search",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{limit:!1};this._log(\\\'---------\\\\nSearch pattern: "\\\'.concat(e,\\\'"\\\'));var n=this._prepareSearchers(e),r=n.tokenSearchers,o=n.fullSearcher,i=this._search(r,o),a=i.weights,s=i.results;return this._computeScore(a,s),this.options.shouldSort&&this._sort(s),t.limit&&"number"==typeof t.limit&&(s=s.slice(0,t.limit)),this._format(s)}},{key:"_prepareSearchers",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=[];if(this.options.tokenize)for(var n=e.split(this.options.tokenSeparator),r=0,o=n.length;r<o;r+=1)t.push(new i(n[r],this.options));return{tokenSearchers:t,fullSearcher:new i(e,this.options)}}},{key:"_search",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1?arguments[1]:void 0,n=this.list,r={},o=[];if("string"==typeof n[0]){for(var i=0,a=n.length;i<a;i+=1)this._analyze({key:"",value:n[i],record:i,index:i},{resultMap:r,results:o,tokenSearchers:e,fullSearcher:t});return{weights:null,results:o}}for(var s={},c=0,h=n.length;c<h;c+=1)for(var l=n[c],u=0,f=this.options.keys.length;u<f;u+=1){var d=this.options.keys[u];if("string"!=typeof d){if(s[d.name]={weight:1-d.weight||1},d.weight<=0||d.weight>1)throw new Error("Key weight has to be > 0 and <= 1");d=d.name}else s[d]={weight:1};this._analyze({key:d,value:this.options.getFn(l,d),record:l,index:c},{resultMap:r,results:o,tokenSearchers:e,fullSearcher:t})}return{weights:s,results:o}}},{key:"_analyze",value:function(e,t){var n=e.key,r=e.arrayIndex,o=void 0===r?-1:r,i=e.value,a=e.record,c=e.index,h=t.tokenSearchers,l=void 0===h?[]:h,u=t.fullSearcher,f=void 0===u?[]:u,d=t.resultMap,v=void 0===d?{}:d,p=t.results,g=void 0===p?[]:p;if(null!=i){var y=!1,m=-1,k=0;if("string"==typeof i){this._log("\\\\nKey: ".concat(""===n?"-":n));var S=f.search(i);if(this._log(\\\'Full text: "\\\'.concat(i,\\\'", score: \\\').concat(S.score)),this.options.tokenize){for(var x=i.split(this.options.tokenSeparator),b=[],M=0;M<l.length;M+=1){var _=l[M];this._log(\\\'\\\\nPattern: "\\\'.concat(_.pattern,\\\'"\\\'));for(var L=!1,w=0;w<x.length;w+=1){var A=x[w],C=_.search(A),I={};C.isMatch?(I[A]=C.score,y=!0,L=!0,b.push(C.score)):(I[A]=1,this.options.matchAllTokens||b.push(1)),this._log(\\\'Token: "\\\'.concat(A,\\\'", score: \\\').concat(I[A]))}L&&(k+=1)}m=b[0];for(var O=b.length,j=1;j<O;j+=1)m+=b[j];m/=O,this._log("Token score average:",m)}var P=S.score;m>-1&&(P=(P+m)/2),this._log("Score average:",P);var F=!this.options.tokenize||!this.options.matchAllTokens||k>=l.length;if(this._log("\\\\nCheck Matches: ".concat(F)),(y||S.isMatch)&&F){var T=v[c];T?T.output.push({key:n,arrayIndex:o,value:i,score:P,matchedIndices:S.matchedIndices}):(v[c]={item:a,output:[{key:n,arrayIndex:o,value:i,score:P,matchedIndices:S.matchedIndices}]},g.push(v[c]))}}else if(s(i))for(var z=0,E=i.length;z<E;z+=1)this._analyze({key:n,arrayIndex:z,value:i[z],record:a,index:c},{resultMap:v,results:g,tokenSearchers:l,fullSearcher:f})}}},{key:"_computeScore",value:function(e,t){this._log("\\\\n\\\\nComputing score:\\\\n");for(var n=0,r=t.length;n<r;n+=1){for(var o=t[n].output,i=o.length,a=1,s=1,c=0;c<i;c+=1){var h=e?e[o[c].key].weight:1,l=(1===h?o[c].score:o[c].score||.001)*h;1!==h?s=Math.min(s,l):(o[c].nScore=l,a*=l)}t[n].score=1===s?a:s,this._log(t[n])}}},{key:"_sort",value:function(e){this._log("\\\\n\\\\nSorting...."),e.sort(this.options.sortFn)}},{key:"_format",value:function(e){var t=[];if(this.options.verbose){var n=[];this._log("\\\\n\\\\nOutput:\\\\n\\\\n",JSON.stringify(e,function(e,t){if("object"===r(t)&&null!==t){if(-1!==n.indexOf(t))return;n.push(t)}return t})),n=null}var o=[];this.options.includeMatches&&o.push(function(e,t){var n=e.output;t.matches=[];for(var r=0,o=n.length;r<o;r+=1){var i=n[r];if(0!==i.matchedIndices.length){var a={indices:i.matchedIndices,value:i.value};i.key&&(a.key=i.key),i.hasOwnProperty("arrayIndex")&&i.arrayIndex>-1&&(a.arrayIndex=i.arrayIndex),t.matches.push(a)}}}),this.options.includeScore&&o.push(function(e,t){t.score=e.score});for(var i=0,a=e.length;i<a;i+=1){var s=e[i];if(this.options.id&&(s.item=this.options.getFn(s.item,this.options.id)[0]),o.length){for(var c={item:s.item},h=0,l=o.length;h<l;h+=1)o[h](s,c);t.push(c)}else t.push(s.item)}return t}},{key:"_log",value:function(){var e;this.options.verbose&&(e=console).log.apply(e,arguments)}}])&&o(t.prototype,n),c&&o(t,c),e}();e.exports=c},function(e,t,n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(3),i=n(4),a=n(7),s=function(){function e(t,n){var r=n.location,o=void 0===r?0:r,i=n.distance,s=void 0===i?100:i,c=n.threshold,h=void 0===c?.6:c,l=n.maxPatternLength,u=void 0===l?32:l,f=n.isCaseSensitive,d=void 0!==f&&f,v=n.tokenSeparator,p=void 0===v?/ +/g:v,g=n.findAllMatches,y=void 0!==g&&g,m=n.minMatchCharLength,k=void 0===m?1:m;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options={location:o,distance:s,threshold:h,maxPatternLength:u,isCaseSensitive:d,tokenSeparator:p,findAllMatches:y,minMatchCharLength:k},this.pattern=this.options.isCaseSensitive?t:t.toLowerCase(),this.pattern.length<=u&&(this.patternAlphabet=a(this.pattern))}var t,n,s;return t=e,(n=[{key:"search",value:function(e){if(this.options.isCaseSensitive||(e=e.toLowerCase()),this.pattern===e)return{isMatch:!0,score:0,matchedIndices:[[0,e.length-1]]};var t=this.options,n=t.maxPatternLength,r=t.tokenSeparator;if(this.pattern.length>n)return o(e,this.pattern,r);var a=this.options,s=a.location,c=a.distance,h=a.threshold,l=a.findAllMatches,u=a.minMatchCharLength;return i(e,this.pattern,this.patternAlphabet,{location:s,distance:c,threshold:h,findAllMatches:l,minMatchCharLength:u})}}])&&r(t.prototype,n),s&&r(t,s),e}();e.exports=s},function(e,t){var n=/[\\\\-\\\\[\\\\]\\\\/\\\\{\\\\}\\\\(\\\\)\\\\*\\\\+\\\\?\\\\.\\\\\\\\\\\\^\\\\$\\\\|]/g;e.exports=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:/ +/g,o=new RegExp(t.replace(n,"\\\\\\\\$&").replace(r,"|")),i=e.match(o),a=!!i,s=[];if(a)for(var c=0,h=i.length;c<h;c+=1){var l=i[c];s.push([e.indexOf(l),l.length-1])}return{score:a?.5:1,isMatch:a,matchedIndices:s}}},function(e,t,n){var r=n(5),o=n(6);e.exports=function(e,t,n,i){for(var a=i.location,s=void 0===a?0:a,c=i.distance,h=void 0===c?100:c,l=i.threshold,u=void 0===l?.6:l,f=i.findAllMatches,d=void 0!==f&&f,v=i.minMatchCharLength,p=void 0===v?1:v,g=s,y=e.length,m=u,k=e.indexOf(t,g),S=t.length,x=[],b=0;b<y;b+=1)x[b]=0;if(-1!==k){var M=r(t,{errors:0,currentLocation:k,expectedLocation:g,distance:h});if(m=Math.min(M,m),-1!==(k=e.lastIndexOf(t,g+S))){var _=r(t,{errors:0,currentLocation:k,expectedLocation:g,distance:h});m=Math.min(_,m)}}k=-1;for(var L=[],w=1,A=S+y,C=1<<(S<=31?S-1:30),I=0;I<S;I+=1){for(var O=0,j=A;O<j;){r(t,{errors:I,currentLocation:g+j,expectedLocation:g,distance:h})<=m?O=j:A=j,j=Math.floor((A-O)/2+O)}A=j;var P=Math.max(1,g-j+1),F=d?y:Math.min(g+j,y)+S,T=Array(F+2);T[F+1]=(1<<I)-1;for(var z=F;z>=P;z-=1){var E=z-1,K=n[e.charAt(E)];if(K&&(x[E]=1),T[z]=(T[z+1]<<1|1)&K,0!==I&&(T[z]|=(L[z+1]|L[z])<<1|1|L[z+1]),T[z]&C&&(w=r(t,{errors:I,currentLocation:E,expectedLocation:g,distance:h}))<=m){if(m=w,(k=E)<=g)break;P=Math.max(1,2*g-k)}}if(r(t,{errors:I+1,currentLocation:g,expectedLocation:g,distance:h})>m)break;L=T}return{isMatch:k>=0,score:0===w?.001:w,matchedIndices:o(x,p)}}},function(e,t){e.exports=function(e,t){var n=t.errors,r=void 0===n?0:n,o=t.currentLocation,i=void 0===o?0:o,a=t.expectedLocation,s=void 0===a?0:a,c=t.distance,h=void 0===c?100:c,l=r/e.length,u=Math.abs(s-i);return h?l+u/h:u?1:l}},function(e,t){e.exports=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=[],r=-1,o=-1,i=0,a=e.length;i<a;i+=1){var s=e[i];s&&-1===r?r=i:s||-1===r||((o=i-1)-r+1>=t&&n.push([r,o]),r=-1)}return e[i-1]&&i-r>=t&&n.push([r,i-1]),n}},function(e,t){e.exports=function(e){for(var t={},n=e.length,r=0;r<n;r+=1)t[e.charAt(r)]=0;for(var o=0;o<n;o+=1)t[e.charAt(o)]|=1<<n-o-1;return t}},function(e,t,n){var r=n(0);e.exports=function(e,t){return function e(t,n,o){if(n){var i=n.indexOf("."),a=n,s=null;-1!==i&&(a=n.slice(0,i),s=n.slice(i+1));var c=t[a];if(null!=c)if(s||"string"!=typeof c&&"number"!=typeof c)if(r(c))for(var h=0,l=c.length;h<l;h+=1)e(c[h],s,o);else s&&e(c,s,o);else o.push(c.toString())}else o.push(t);return o}(e,t,[])}}])});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/fuse.js/dist/fuse.js\\n\');\n    },\n    "./src/AutoComplete/Core/Input.js":\n    /*!****************************************!*\\\n      !*** ./src/AutoComplete/Core/Input.js ***!\n      \\****************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval("var Fuse = __webpack_require__(/*! fuse.js */ \\"./node_modules/fuse.js/dist/fuse.js\\");\\n\\nvar _require = __webpack_require__(/*! ../../Helpers/Array */ \\"./src/Helpers/Array.js\\"),\\n    setArray = _require.setArray,\\n    inArray = _require.inArray;\\n\\nmodule.exports = function () {\\n  return new AutoComplete();\\n};\\n\\nfunction AutoComplete() {\\n  this.url = false;\\n  this.datas = false;\\n  this.results = {\\n    path: \'\'\\n  };\\n  this.label = {\\n    target: false,\\n    default: false,\\n    singular: false,\\n    plural: false,\\n    zero: false\\n  };\\n  this.max = 100;\\n  this.target = false;\\n  this.template = {};\\n}\\n\\nAutoComplete.prototype.construct = function (params) {\\n  var getDatas;\\n\\n  if (params) {\\n    setArray(this, params);\\n  }\\n\\n  if (this.url) {\\n    getDatas = this.find;\\n    getDatas();\\n  }\\n\\n  Promise.all([getDatas]).then(function () {\\n    var options = {\\n      threshold: 0.4,\\n      keys: compare,\\n      distance: 10000\\n    };\\n    var fuse = new Fuse(datas, options);\\n    return value ? fuse.search(value) : datas;\\n  });\\n};\\n\\nAutoComplete.prototype.find = function () {\\n  var _this = this;\\n\\n  if (this.url) {\\n    fetch(this.url, this).then(function (response) {\\n      return response.json();\\n    }).then(function (json) {\\n      _this.Fetch(null, json, _this);\\n    }).catch(function (error) {\\n      return _this.Fetch(error, null);\\n    });\\n  }\\n};\\n\\nAutoComplete.prototype.Fetch = function (error, success) {\\n  if (error) {\\n    console.log(error);\\n  } else {\\n    this.datas = success;\\n\\n    if (this.results.path) {\\n      this.datas = inArray(this.datas, this.results.path);\\n    }\\n  }\\n}; //   function autocomplete(options){\\n//     options = {\\n//       \'url\'   : options.url ? options.url : \'\',\\n//       \'datas\' : options.datas ? options.datas : \'\',\\n//       \'no_results\' : options.no_results ? options.no_results : \'\',\\n//       \'max_results_text\' : options.max_results_text ? options.max_results_text : \'\',\\n//       \'max_results\': options.max_results ? options.max_results : \'\',\\n//       \'targets\' : options.targets ? options.targets : \'\',\\n//       \'to_show\' : options.to_show ? options.to_show : \'\',\\n//     }\\n//     options.targets = document.querySelectorAll(`${options.targets}`);\\n//     options.datas = getDatas(options);\\n//     if(!options.targets || !options.datas) return\\n//     init(options)\\n//   }\\n//   function init(options){\\n//     options.targets.forEach( t => {\\n//       const blockList = createDom_el(\'ul\',\'autocomplete-items\')\\n//       t.parentNode.appendChild(blockList)\\n//       t.addEventListener(\'keyup\', e => displayMatches(t, options, blockList));\\n//     })\\n//   }\\n//   function findMatches(toMatch, options) {\\n//     return options.datas.filter(d => {\\n//       const attr = inArray(d, options.to_show)\\n//       const regex = new RegExp(toMatch, \'gi\');\\n//       return String(attr).match(regex)\\n//     });\\n//   }\\n//   function displayMatches(t, options, blockList) {\\n//     const toMatch = t.value;\\n//     if (toMatch && toMatch.length > 0 ) t.parentNode.classList.add(\'isActive\')\\n//     else t.parentNode.classList.remove(\'isActive\')\\n//     const matchArray = findMatches(toMatch, options);\\n//     let html;\\n//     if (options.max_results && matchArray.length > options.max_results) html = fullResult(matchArray, options)\\n//     else if (matchArray.length === 0 ) html = noResult(matchArray, options)\\n//     else html = results(toMatch, matchArray, options)\\n//     blockList.innerHTML = html;\\n//     blockList.style.height = [...blockList.children].reduce((tot, num) => tot + Number( num.clientHeight ) + 28 , 0 ) + \\"px\\"\\n//     const items = blockList.querySelectorAll(\'.autocomplete-item\');\\n//     items.forEach(item => {\\n//       item.addEventListener(\'click\', e => {\\n//         t.value = item.innerText\\n//         t.setAttribute(\'value\', item.innerText);\\n//         t.parentNode.classList.remove(\'isActive\')\\n//       })\\n//       document.addEventListener(\'click\', e => {\\n//         e.target != t && e.target != blockList && e.target != item && e.target.parentNode != blockList ? t.parentNode.classList.remove(\'isActive\') :\'\'\\n//       })\\n//     })\\n//   }\\n//   function results(toMatch, matchArray, options){\\n//     return matchArray.map(d => {\\n//       const attr = inArray(d, options.to_show)\\n//       const regex = new RegExp(toMatch, \'gi\');\\n//       const name = attr.replace(regex, `<span class=\\"hl\\">${toMatch}</span>`);\\n//       return `\\n//         <li class=\\"autocomplete-item\\">\\n//           <span class=\\"name\\">${name}</span>\\n//         </li>\\n//       `;\\n//     }).join(\'\');\\n//   }\\n//   function noResult(matchArray, options){\\n//       return `\\n//         <li class=\\"autocomplete-item\\">\\n//           <span class=\\"no-result\\">${options.no_results ? options.no_results : \\"No results\\"}</span>\\n//         </li>\\n//       `;\\n//   }\\n//   function fullResult(matchArray, options){\\n//       return `\\n//         <li class=\\"autocomplete-item\\">\\n//           <span class=\\"name\\">${options.max_results_text ? options.max_results_text : \\"Please type another character to refine your search.\\"}</span>\\n//         </li>\\n//       `;\\n//   }\\n//   function createDom_el(type, className){\\n//     const el = document.createElement(type);\\n//     if(className) el.classList.add(className)\\n//     return el\\n//   }\\n//   function getDatas(options){\\n//     if(options.datas) return options.datas;\\n//     else if(options.url) fetchDatas(options.url, (error, datas) => {\\n//       if (error){\\n//         console.log(error)\\n//       }\\n//       else{\\n//         options.datas = datas\\n//         init(options)\\n//       }\\n//     });\\n//   }\\n//   function fetchDatas(url, callback){\\n//     fetch(url)\\n//        .then(response => response.json())\\n//        .then(json => callback(null, json))\\n//        .catch(error => callback(error, null))\\n//   }\\n//   function inArray(data, compare, val){\\n//     const toCompare = compare.split(\'.\')\\n//     val = data;\\n//     toCompare.forEach( (t, i) => {\\n//       val = typeof val[t] != \\"undefined\\" ? val[t] : val\\n//       return val\\n//     })\\n//     return val\\n//   }//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./src/AutoComplete/Core/Input.js\\n");\n    },\n    "./src/AutoComplete/init.js":\n    /*!**********************************!*\\\n      !*** ./src/AutoComplete/init.js ***!\n      \\**********************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'var Input = __webpack_require__(/*! ./Core/Input */ "./src/AutoComplete/Core/Input.js");\\n\\nvar AutoComplete = module.exports = {\\n  init: function init(params) {\\n    return new Input().construct(params);\\n  }\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvQXV0b0NvbXBsZXRlL2luaXQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BQkMvLi9zcmMvQXV0b0NvbXBsZXRlL2luaXQuanM/ZGM1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgSW5wdXQgPSByZXF1aXJlKCcuL0NvcmUvSW5wdXQnKVxudmFyIEF1dG9Db21wbGV0ZSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnB1dCgpLmNvbnN0cnVjdChwYXJhbXMpIFxuICAgIH1cbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUhBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/AutoComplete/init.js\\n\');\n    },\n    "./src/Filter/Actions/Action.js":\n    /*!**************************************!*\\\n      !*** ./src/Filter/Actions/Action.js ***!\n      \\**************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\\n\\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\\n\\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") { return Array.from(iter); } }\\n\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\\n\\nvar _require = __webpack_require__(/*! ../../Helpers/Utils */ "./src/Helpers/Utils.js"),\\n    error = _require.error,\\n    isTarget = _require.isTarget,\\n    isTargetSelected = _require.isTargetSelected;\\n\\nmodule.exports = function (el) {\\n  return new Action(el);\\n};\\n\\nfunction Action(el) {\\n  this.el = el;\\n}\\n\\n;\\n\\nAction.prototype.update = function (e) {\\n  var _this = this;\\n\\n  for (var key in this.el.inputs) {\\n    switch (key) {\\n      case "checkbox":\\n        {\\n          if (!this.el.inputs.checkbox) {\\n            error(\\\' No checkbox setted \\\');\\n          }\\n\\n          var _a = this.el.inputs.checkbox;\\n\\n          var _f = function _f(checkbox) {\\n            if (isTarget(e, checkbox)) {\\n              checkbox.update(_this);\\n\\n              if (_this.el.url) {\\n                _this.el.url.construct(checkbox);\\n              }\\n            }\\n          };\\n\\n          for (var _i = 0; _i < _a.length; _i++) {\\n            _f(_a[_i], _i, _a);\\n          }\\n\\n          undefined;\\n        }\\n        break;\\n\\n      case "radio":\\n        {\\n          if (!this.el.inputs.radio) {\\n            error(\\\' No radio setted \\\');\\n          }\\n\\n          var _a2 = this.el.inputs.radio;\\n\\n          var _f2 = function _f2(radio) {\\n            if (isTarget(e, radio)) {\\n              radio.update(_this);\\n\\n              if (_this.el.url) {\\n                _this.el.url.construct(radio);\\n              }\\n            }\\n          };\\n\\n          for (var _i2 = 0; _i2 < _a2.length; _i2++) {\\n            _f2(_a2[_i2], _i2, _a2);\\n          }\\n\\n          undefined;\\n        }\\n        break;\\n\\n      case "select":\\n        {\\n          if (!this.el.inputs.select) {\\n            error(\\\' No select setted \\\');\\n          }\\n\\n          var _a3 = this.el.inputs.select;\\n\\n          var _f3 = function _f3(select) {\\n            if (isTargetSelected(e, select, _this.el.formObj)) {\\n              select.update(_this);\\n\\n              if (_this.el.url) {\\n                _this.el.url.construct(select);\\n              }\\n            }\\n          };\\n\\n          for (var _i3 = 0; _i3 < _a3.length; _i3++) {\\n            _f3(_a3[_i3], _i3, _a3);\\n          }\\n\\n          undefined;\\n        }\\n        break;\\n\\n      case "search":\\n        {\\n          if (!this.el.inputs.search) {\\n            error(\\\' No search setted \\\');\\n          }\\n\\n          var _a4 = this.el.inputs.search;\\n\\n          var _f4 = function _f4(search) {\\n            if (isTarget(e, search)) {\\n              search.update(_this);\\n\\n              if (_this.el.url) {\\n                _this.el.url.construct(search);\\n              }\\n            }\\n          };\\n\\n          for (var _i4 = 0; _i4 < _a4.length; _i4++) {\\n            _f4(_a4[_i4], _i4, _a4);\\n          }\\n\\n          undefined;\\n        }\\n        break;\\n\\n      case "range":\\n        {\\n          if (!this.el.inputs.range) {\\n            error(\\\' No range setted \\\');\\n          }\\n\\n          var _a5 = this.el.inputs.range;\\n\\n          var _f5 = function _f5(range) {\\n            if (!range.multiple && isTarget(e, range) || !range.multiple && isTarget(e, range.min) || range.multiple && isTarget(e, range.min) || range.multiple && isTarget(e, range.max)) {\\n              range.update(_this);\\n\\n              if (_this.el.url) {\\n                _this.el.url.constructRange(range);\\n              }\\n            }\\n          };\\n\\n          for (var _i5 = 0; _i5 < _a5.length; _i5++) {\\n            _f5(_a5[_i5], _i5, _a5);\\n          }\\n\\n          undefined;\\n        }\\n    }\\n  }\\n};\\n\\nAction.prototype.get = function (array, data) {\\n  var validation = [];\\n  var _a6 = array;\\n\\n  var _f6 = function _f6(el) {\\n    validation.push(el.validate(data));\\n  };\\n\\n  for (var _i6 = 0; _i6 < _a6.length; _i6++) {\\n    _f6(_a6[_i6], _i6, _a6);\\n  }\\n\\n  undefined;\\n  return validation;\\n};\\n\\nAction.prototype.do = function (el) {\\n  var _this2 = this;\\n\\n  var inputs = this.filterByKey("search");\\n  var datas = this.el.datas;\\n\\n  if (this.el.inputs.search) {\\n    var _a7 = this.el.inputs.search;\\n\\n    var _f7 = function _f7(s) {\\n      datas = s.validate(_this2.el.datas);\\n    };\\n\\n    for (var _i7 = 0; _i7 < _a7.length; _i7++) {\\n      _f7(_a7[_i7], _i7, _a7);\\n    }\\n\\n    undefined;\\n  }\\n\\n  var nbs = this.el.datas.filter(function (data) {\\n    var compare = [];\\n\\n    for (var key in inputs) {\\n      compare = [].concat(_toConsumableArray(compare), _toConsumableArray(_this2.get(inputs[key], data)));\\n    }\\n\\n    var result = compare.filter(function (t) {\\n      return t;\\n    });\\n    data.hide = datas && datas.indexOf(data) === -1 ? true : false;\\n\\n    if (!data.hide) {\\n      data.hide = compare.length === result.length ? false : true;\\n    }\\n\\n    data.hide ? data.abc_selector.classList.add("abc-hide") : data.abc_selector.classList.remove("abc-hide");\\n    data.hide ? data.abc_selector.classList.remove("abc-show") : data.abc_selector.classList.add("abc-show");\\n\\n    if (!data.hide) {\\n      return data;\\n    }\\n  });\\n\\n  if (this.el.get_nbResult) {\\n    this.el.get_nbResult.update(nbs.length);\\n  }\\n};\\n\\nAction.prototype.filterByKey = function (value) {\\n  var array = {};\\n\\n  if (!this.el.inputs) {\\n    return;\\n  }\\n\\n  for (var key in this.el.inputs) {\\n    if (key != value) {\\n      array[key] = this.el.inputs[key];\\n    }\\n  }\\n\\n  return array;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL0FjdGlvbnMvQWN0aW9uLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQUJDLy4vc3JjL0ZpbHRlci9BY3Rpb25zL0FjdGlvbi5qcz8xZmFkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7ZXJyb3IsIGlzVGFyZ2V0LCBpc1RhcmdldFNlbGVjdGVkIH0gID0gcmVxdWlyZSAoJy4uLy4uL0hlbHBlcnMvVXRpbHMnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9ICggZWwgKSA9PiB7IHJldHVybiBuZXcgQWN0aW9uKCBlbCApIH1cblxuZnVuY3Rpb24gQWN0aW9uKGVsKXtcbiAgdGhpcy5lbCA9IGVsXG59O1xuXG5BY3Rpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKGUpe1xuXG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuZWwuaW5wdXRzKSB7XG4gICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgIGNhc2UgXCJjaGVja2JveFwiIDoge1xuICAgICAgICAgICAgaWYoIXRoaXMuZWwuaW5wdXRzLmNoZWNrYm94KSBlcnJvciggJyBObyBjaGVja2JveCBzZXR0ZWQgJyk7XG4gICAgICAgICAgICB0aGlzLmVsLmlucHV0cy5jaGVja2JveC5mb3JFYWNoKCBjaGVja2JveCA9PiB7XG4gICAgICAgICAgICAgIGlmKCBpc1RhcmdldChlLCBjaGVja2JveCkgKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tib3gudXBkYXRlKHRoaXMpXG4gICAgICAgICAgICAgICAgaWYodGhpcy5lbC51cmwpIHRoaXMuZWwudXJsLmNvbnN0cnVjdCggY2hlY2tib3ggKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwicmFkaW9cIiA6IHtcbiAgICAgICAgICAgIGlmKCF0aGlzLmVsLmlucHV0cy5yYWRpbykgZXJyb3IoICcgTm8gcmFkaW8gc2V0dGVkICcpO1xuICAgICAgICAgICAgdGhpcy5lbC5pbnB1dHMucmFkaW8uZm9yRWFjaCggcmFkaW8gPT4ge1xuICAgICAgICAgICAgICBpZiggaXNUYXJnZXQoZSwgcmFkaW8pICl7XG4gICAgICAgICAgICAgICAgcmFkaW8udXBkYXRlKHRoaXMpXG4gICAgICAgICAgICAgICAgaWYodGhpcy5lbC51cmwpIHRoaXMuZWwudXJsLmNvbnN0cnVjdCggcmFkaW8gKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwic2VsZWN0XCIgOiB7XG4gICAgICAgICAgICBpZighdGhpcy5lbC5pbnB1dHMuc2VsZWN0KSBlcnJvciggJyBObyBzZWxlY3Qgc2V0dGVkICcpO1xuICAgICAgICAgICAgdGhpcy5lbC5pbnB1dHMuc2VsZWN0LmZvckVhY2goIHNlbGVjdCA9PiB7XG4gICAgICAgICAgICAgIGlmKCBpc1RhcmdldFNlbGVjdGVkKGUsIHNlbGVjdCwgdGhpcy5lbC5mb3JtT2JqKSApe1xuICAgICAgICAgICAgICAgIHNlbGVjdC51cGRhdGUodGhpcylcbiAgICAgICAgICAgICAgICBpZih0aGlzLmVsLnVybCkgdGhpcy5lbC51cmwuY29uc3RydWN0KCBzZWxlY3QgKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwic2VhcmNoXCIgOiB7XG4gICAgICAgICAgICBpZighdGhpcy5lbC5pbnB1dHMuc2VhcmNoKSBlcnJvciggJyBObyBzZWFyY2ggc2V0dGVkICcpO1xuICAgICAgICAgICAgdGhpcy5lbC5pbnB1dHMuc2VhcmNoLmZvckVhY2goIHNlYXJjaCA9PiB7XG4gIFxuICAgICAgICAgICAgICBpZiggaXNUYXJnZXQoZSwgc2VhcmNoKSApe1xuICAgICAgICAgICAgICAgIHNlYXJjaC51cGRhdGUodGhpcylcbiAgICAgICAgICAgICAgICBpZih0aGlzLmVsLnVybCkgdGhpcy5lbC51cmwuY29uc3RydWN0KCBzZWFyY2ggKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSBcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInJhbmdlXCIgOiB7XG4gICAgICAgICAgICBpZighdGhpcy5lbC5pbnB1dHMucmFuZ2UpIGVycm9yKCAnIE5vIHJhbmdlIHNldHRlZCAnKTtcbiAgICAgICAgICAgIHRoaXMuZWwuaW5wdXRzLnJhbmdlLmZvckVhY2goIHJhbmdlID0+IHtcbiAgICAgICAgICAgICAgaWYoICFyYW5nZS5tdWx0aXBsZSAmJiBpc1RhcmdldChlLCByYW5nZSkgfHwgICFyYW5nZS5tdWx0aXBsZSAmJiBpc1RhcmdldChlLCByYW5nZS5taW4pfHwgcmFuZ2UubXVsdGlwbGUgJiYgaXNUYXJnZXQoZSwgcmFuZ2UubWluKSB8fCByYW5nZS5tdWx0aXBsZSAmJiBpc1RhcmdldChlLCByYW5nZS5tYXgpICl7XG4gICAgICAgICAgICAgICAgcmFuZ2UudXBkYXRlKHRoaXMpXG4gICAgICAgICAgICAgICAgaWYodGhpcy5lbC51cmwpIHRoaXMuZWwudXJsLmNvbnN0cnVjdFJhbmdlKCByYW5nZSApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBcbiAgXG4gIEFjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oYXJyYXksIGRhdGEpIHtcbiAgICBsZXQgdmFsaWRhdGlvbiA9IFtdO1xuICAgIGFycmF5LmZvckVhY2goIGVsID0+IHtcbiAgICAgIHZhbGlkYXRpb24ucHVzaChlbC52YWxpZGF0ZShkYXRhKSk7XG4gICAgfSlcbiAgXG4gICAgcmV0dXJuIHZhbGlkYXRpb247XG4gIH1cbiAgXG4gIFxuICBBY3Rpb24ucHJvdG90eXBlLmRvID0gZnVuY3Rpb24oZWwpe1xuICAgIGxldCBpbnB1dHMgPSB0aGlzLmZpbHRlckJ5S2V5KFwic2VhcmNoXCIpO1xuICAgIGxldCBkYXRhcyAgPSB0aGlzLmVsLmRhdGFzXG5cbiAgICBpZiggdGhpcy5lbC5pbnB1dHMuc2VhcmNoICkgdGhpcy5lbC5pbnB1dHMuc2VhcmNoLmZvckVhY2goIHMgPT4geyBkYXRhcyA9IHMudmFsaWRhdGUoICB0aGlzLmVsLmRhdGFzICkgfSApO1xuICBcbiAgICBsZXQgbmJzID0gdGhpcy5lbC5kYXRhcy5maWx0ZXIoIGRhdGEgPT4ge1xuICAgICAgbGV0IGNvbXBhcmUgPSBbXTtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGlucHV0cykge1xuICAgICAgICBjb21wYXJlID0gWy4uLmNvbXBhcmUsIC4uLnRoaXMuZ2V0KGlucHV0c1trZXldLCBkYXRhKV07XG4gICAgICB9XG4gIFxuICBcbiAgICAgIGxldCByZXN1bHQgPSBjb21wYXJlLmZpbHRlciggdCA9PiB0ICk7XG4gICAgXG4gICAgICBcbiAgICAgIGRhdGEuaGlkZSA9IGRhdGFzICYmIGRhdGFzLmluZGV4T2YoZGF0YSkgPT09IC0xID8gdHJ1ZSA6IGZhbHNlO1xuICBcbiAgICAgIFxuICAgICAgaWYgKCFkYXRhLmhpZGUpIGRhdGEuaGlkZSA9IGNvbXBhcmUubGVuZ3RoID09PSByZXN1bHQubGVuZ3RoICA/IGZhbHNlIDogdHJ1ZTtcbiAgXG4gICAgICBkYXRhLmhpZGUgPyBkYXRhLmFiY19zZWxlY3Rvci5jbGFzc0xpc3QuYWRkKCBcImFiYy1oaWRlXCIgKSA6IGRhdGEuYWJjX3NlbGVjdG9yLmNsYXNzTGlzdC5yZW1vdmUoIFwiYWJjLWhpZGVcIiApXG4gICAgICBkYXRhLmhpZGUgPyBkYXRhLmFiY19zZWxlY3Rvci5jbGFzc0xpc3QucmVtb3ZlKCBcImFiYy1zaG93XCIgKSA6IGRhdGEuYWJjX3NlbGVjdG9yLmNsYXNzTGlzdC5hZGQoIFwiYWJjLXNob3dcIiApXG4gIFxuICAgICAgaWYoIWRhdGEuaGlkZSkgcmV0dXJuIGRhdGFcbiAgICB9KTtcblxuICAgIGlmKHRoaXMuZWwuZ2V0X25iUmVzdWx0KSB0aGlzLmVsLmdldF9uYlJlc3VsdC51cGRhdGUoIG5icy5sZW5ndGggKTtcbiAgfVxuICBcbiAgQWN0aW9uLnByb3RvdHlwZS5maWx0ZXJCeUtleSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICBjb25zdCBhcnJheSA9IHt9O1xuICAgaWYoICF0aGlzLmVsLmlucHV0cyApIHJldHVybjtcbiAgIGZvciAodmFyIGtleSBpbiB0aGlzLmVsLmlucHV0cykgeyBpZiAoa2V5ICE9IHZhbHVlKSBhcnJheVtrZXldID0gdGhpcy5lbC5pbnB1dHNba2V5XSB9XG4gICByZXR1cm4gYXJyYXk7XG4gIH1cbiAgXG4gICJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBRkE7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBUkE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUZBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFGQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBRkE7QUFDQTtBQURBO0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBVEE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUZBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFNQTtBQWxEQTtBQW9EQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBREE7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBTEE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/Filter/Actions/Action.js\\n\');\n    },\n    "./src/Filter/Actions/Change.js":\n    /*!**************************************!*\\\n      !*** ./src/Filter/Actions/Change.js ***!\n      \\**************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval("var Action = __webpack_require__(/*! ./Action */ \\"./src/Filter/Actions/Action.js\\");\\n\\nmodule.exports = function (el) {\\n  return new onChange(el);\\n};\\n\\nfunction onChange(el) {\\n  this.el = el;\\n  this.action = new Action(el);\\n  this.bindEvent();\\n}\\n\\n;\\n\\nonChange.prototype.bindEvent = function () {\\n  var _this = this;\\n\\n  this.el.formObj.addEventListener(\\"keydown\\", function (e) {\\n    if (e.keyCode === 13) {\\n      e.preventDefault();\\n    }\\n  });\\n  var events = [\'click\', \'change\', \'keyup\', \'input\'];\\n  var _a = events;\\n\\n  var _f = function _f(event) {\\n    _this.el.formObj.addEventListener(event, function (e) {\\n      if (e.keyCode === 13) {\\n        return;\\n      }\\n\\n      _this.action.update(e);\\n\\n      if (_this.el.url) {\\n        location.hash = _this.el.url.search.toString();\\n      }\\n\\n      _this.action.do(); // this.el.facette.update(this.el)\\n\\n    });\\n  };\\n\\n  for (var _i = 0; _i < _a.length; _i++) {\\n    _f(_a[_i], _i, _a);\\n  }\\n\\n  undefined;\\n\\n  if (this.el.url) {\\n    this.action.do();\\n  }\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL0FjdGlvbnMvQ2hhbmdlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQUJDLy4vc3JjL0ZpbHRlci9BY3Rpb25zL0NoYW5nZS5qcz9jYThlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBBY3Rpb24gPSByZXF1aXJlKCAnLi9BY3Rpb24nICk7XG5tb2R1bGUuZXhwb3J0cyA9ICggZWwgKSA9PiB7IHJldHVybiBuZXcgb25DaGFuZ2UoIGVsICkgfVxuXG5mdW5jdGlvbiBvbkNoYW5nZShlbCl7XG4gIHRoaXMuZWwgPSBlbFxuICB0aGlzLmFjdGlvbiA9IG5ldyBBY3Rpb24oZWwpXG5cbiAgdGhpcy5iaW5kRXZlbnQoKTtcbn07XG5cblxub25DaGFuZ2UucHJvdG90eXBlLmJpbmRFdmVudCA9IGZ1bmN0aW9uKCl7XG5cbiAgdGhpcy5lbC5mb3JtT2JqLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGUgPT4ge1xuICAgIGlmIChlLmtleUNvZGUgPT09IDEzKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH0pXG4gIGNvbnN0IGV2ZW50cyA9IFsnY2xpY2snLCAnY2hhbmdlJywgJ2tleXVwJywgJ2lucHV0J11cbiAgZXZlbnRzLmZvckVhY2goIGV2ZW50ID0+IHtcbiAgICB0aGlzLmVsLmZvcm1PYmouYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZSA9PiB7XG4gICAgICBpZiAoZS5rZXlDb2RlID09PSAxMykgcmV0dXJuO1xuICAgICAgXG4gICAgICB0aGlzLmFjdGlvbi51cGRhdGUoZSk7XG4gICAgICBpZih0aGlzLmVsLnVybCkgbG9jYXRpb24uaGFzaCA9IHRoaXMuZWwudXJsLnNlYXJjaC50b1N0cmluZygpXG4gICAgICB0aGlzLmFjdGlvbi5kbyggKVxuICAgICAgLy8gdGhpcy5lbC5mYWNldHRlLnVwZGF0ZSh0aGlzLmVsKVxuICAgIH0pXG4gIH0pXG4gIGlmICh0aGlzLmVsLnVybCkgdGhpcy5hY3Rpb24uZG8oKVxuXG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBREE7QUFPQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWhCQTtBQUFBO0FBQUE7QUFDQTtBQUtBO0FBQ0E7QUFTQTtBQUFBO0FBQUE7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/Filter/Actions/Change.js\\n");\n    },\n    "./src/Filter/Actions/Redirect.js":\n    /*!****************************************!*\\\n      !*** ./src/Filter/Actions/Redirect.js ***!\n      \\****************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval("var Action = __webpack_require__(/*! ./Action */ \\"./src/Filter/Actions/Action.js\\");\\n\\nmodule.exports = function (el) {\\n  return new onRedirect(el);\\n};\\n\\nfunction onRedirect(el) {\\n  this.el = el;\\n  this.action = new Action(el);\\n  this.target = document.querySelector(el.form.target);\\n  this.link = this.target.href;\\n  this.bindEvent();\\n}\\n\\n;\\n\\nonRedirect.prototype.bindEvent = function () {\\n  var _this = this;\\n\\n  this.el.formObj.addEventListener(\\"keydown\\", function (e) {\\n    if (e.keyCode === 13) {\\n      e.preventDefault();\\n    }\\n  });\\n  var events = [\'click\', \'change\', \'keyup\', \'input\'];\\n  var _a = events;\\n\\n  var _f = function _f(event) {\\n    _this.el.formObj.addEventListener(event, function (e) {\\n      if (e.keyCode === 13) {\\n        return;\\n      }\\n\\n      _this.action.update(e);\\n\\n      if (_this.el.url && _this.el.form.action != \'redirect\') {\\n        location.hash = _this.el.url.search.toString();\\n      }\\n\\n      _this.target.setAttribute(\'href\', \\"\\".concat(_this.link, \\"#\\").concat(_this.el.url.search.toString()));\\n\\n      _this.action.do(); // this.el.facette.update(this.el)\\n\\n    });\\n  };\\n\\n  for (var _i = 0; _i < _a.length; _i++) {\\n    _f(_a[_i], _i, _a);\\n  }\\n\\n  undefined;\\n\\n  if (this.el.url) {\\n    this.action.do();\\n  }\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL0FjdGlvbnMvUmVkaXJlY3QuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BQkMvLi9zcmMvRmlsdGVyL0FjdGlvbnMvUmVkaXJlY3QuanM/ZjIzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQWN0aW9uID0gcmVxdWlyZSggJy4vQWN0aW9uJyApO1xubW9kdWxlLmV4cG9ydHMgPSAoIGVsICkgPT4geyByZXR1cm4gbmV3IG9uUmVkaXJlY3QoIGVsICkgfVxuXG5mdW5jdGlvbiBvblJlZGlyZWN0KGVsKXtcbiAgICB0aGlzLmVsID0gZWxcbiAgICB0aGlzLmFjdGlvbiA9IG5ldyBBY3Rpb24oZWwpXG4gICAgdGhpcy50YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsLmZvcm0udGFyZ2V0KVxuICAgIHRoaXMubGluayA9IHRoaXMudGFyZ2V0LmhyZWZcbiAgICB0aGlzLmJpbmRFdmVudCgpO1xufTtcblxuXG5vblJlZGlyZWN0LnByb3RvdHlwZS5iaW5kRXZlbnQgPSBmdW5jdGlvbigpe1xuXG4gIHRoaXMuZWwuZm9ybU9iai5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBlID0+IHtcbiAgICBpZiAoZS5rZXlDb2RlID09PSAxMykgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9KVxuICBjb25zdCBldmVudHMgPSBbJ2NsaWNrJywgJ2NoYW5nZScsICdrZXl1cCcsICdpbnB1dCddXG4gIGV2ZW50cy5mb3JFYWNoKCBldmVudCA9PiB7XG4gICAgdGhpcy5lbC5mb3JtT2JqLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGUgPT4ge1xuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHJldHVybjtcbiAgICAgIFxuICAgICAgdGhpcy5hY3Rpb24udXBkYXRlKGUpO1xuICAgICAgaWYodGhpcy5lbC51cmwgJiYgdGhpcy5lbC5mb3JtLmFjdGlvbiAhPSAncmVkaXJlY3QnKSBsb2NhdGlvbi5oYXNoID0gdGhpcy5lbC51cmwuc2VhcmNoLnRvU3RyaW5nKClcbiAgICBcbiAgICAgIHRoaXMudGFyZ2V0LnNldEF0dHJpYnV0ZSgnaHJlZicsIGAke3RoaXMubGlua30jJHt0aGlzLmVsLnVybC5zZWFyY2gudG9TdHJpbmcoKX1gKVxuXG4gICAgICB0aGlzLmFjdGlvbi5kbyggKVxuICAgICAgLy8gdGhpcy5lbC5mYWNldHRlLnVwZGF0ZSh0aGlzLmVsKVxuICAgIH0pXG4gIH0pXG4gIGlmICh0aGlzLmVsLnVybCkgdGhpcy5hY3Rpb24uZG8oKVxuXG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBTEE7QUFDQTtBQURBO0FBT0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbkJBO0FBQUE7QUFBQTtBQUNBO0FBS0E7QUFDQTtBQVlBO0FBQUE7QUFBQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/Filter/Actions/Redirect.js\\n");\n    },\n    "./src/Filter/Actions/Submit.js":\n    /*!**************************************!*\\\n      !*** ./src/Filter/Actions/Submit.js ***!\n      \\**************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval("var Action = __webpack_require__(/*! ./Action */ \\"./src/Filter/Actions/Action.js\\");\\n\\nmodule.exports = function (el) {\\n  return new onSubmit(el);\\n};\\n\\nfunction onSubmit(el) {\\n  this.el = el;\\n  this.action = new Action(el);\\n  this.target = document.querySelector(el.form.target);\\n  this.bindEvent();\\n}\\n\\n;\\n\\nonSubmit.prototype.bindEvent = function () {\\n  var _this = this;\\n\\n  var events = [\'click\', \'change\', \'keyup\', \'input\'];\\n  var _a = events;\\n\\n  var _f = function _f(event) {\\n    _this.el.formObj.addEventListener(event, function (e) {\\n      if (e.keyCode === 13) {\\n        return;\\n      }\\n\\n      _this.action.update(e);\\n    });\\n  };\\n\\n  for (var _i = 0; _i < _a.length; _i++) {\\n    _f(_a[_i], _i, _a);\\n  }\\n\\n  undefined;\\n  this.target.addEventListener(\\"keydown\\", function (e) {\\n    if (e.keyCode === 13) {\\n      e.preventDefault();\\n    }\\n\\n    if (_this.el.url) {\\n      location.hash = _this.el.url.search.toString();\\n    }\\n\\n    _this.action.do();\\n  });\\n  this.target.addEventListener(\'click\', function (e) {\\n    e.preventDefault();\\n\\n    if (_this.el.url) {\\n      location.hash = _this.el.url.search.toString();\\n    }\\n\\n    _this.action.do(); // this.el.facette.update(this.el)\\n\\n  });\\n\\n  if (this.el.url) {\\n    this.action.do();\\n  }\\n};\\n\\nonSubmit.prototype.do = function () {\\n  this.action.do();\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL0FjdGlvbnMvU3VibWl0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQUJDLy4vc3JjL0ZpbHRlci9BY3Rpb25zL1N1Ym1pdC5qcz82NjYzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBBY3Rpb24gPSByZXF1aXJlKCAnLi9BY3Rpb24nICk7XG5tb2R1bGUuZXhwb3J0cyA9ICggZWwgKSA9PiB7IHJldHVybiBuZXcgb25TdWJtaXQoIGVsICkgfVxuXG5mdW5jdGlvbiBvblN1Ym1pdChlbCl7ICBcbiAgdGhpcy5lbCA9IGVsXG4gIHRoaXMuYWN0aW9uID0gbmV3IEFjdGlvbihlbClcbiAgdGhpcy50YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsLmZvcm0udGFyZ2V0KTtcblxuICB0aGlzLmJpbmRFdmVudCgpO1xufTtcblxuXG5vblN1Ym1pdC5wcm90b3R5cGUuYmluZEV2ZW50ID0gZnVuY3Rpb24oKXtcblxuICBjb25zdCBldmVudHMgPSBbJ2NsaWNrJywgJ2NoYW5nZScsICdrZXl1cCcsICdpbnB1dCddXG4gIGV2ZW50cy5mb3JFYWNoKCBldmVudCA9PiB7XG4gICAgdGhpcy5lbC5mb3JtT2JqLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGUgPT4ge1xuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHJldHVybjtcbiAgICAgIHRoaXMuYWN0aW9uLnVwZGF0ZShlKTtcbiAgICB9KVxuICB9KVxuXG4gIHRoaXMudGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGUgPT4ge1xuICAgIGlmIChlLmtleUNvZGUgPT09IDEzKVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZih0aGlzLmVsLnVybCkgbG9jYXRpb24uaGFzaCA9IHRoaXMuZWwudXJsLnNlYXJjaC50b1N0cmluZygpXG4gICAgdGhpcy5hY3Rpb24uZG8oKVxuICB9KVxuXG4gIHRoaXMudGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGlmKHRoaXMuZWwudXJsKSBsb2NhdGlvbi5oYXNoID0gdGhpcy5lbC51cmwuc2VhcmNoLnRvU3RyaW5nKClcbiAgICAgIHRoaXMuYWN0aW9uLmRvKClcbiAgICAgIC8vIHRoaXMuZWwuZmFjZXR0ZS51cGRhdGUodGhpcy5lbClcbiAgfSlcblxuICBpZiAodGhpcy5lbC51cmwpIHRoaXMuYWN0aW9uLmRvKClcblxufVxub25TdWJtaXQucHJvdG90eXBlLmRvID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5hY3Rpb24uZG8oKVxufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBREE7QUFJQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFUQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBT0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/Filter/Actions/Submit.js\\n");\n    },\n    "./src/Filter/Core/Datas.js":\n    /*!**********************************!*\\\n      !*** ./src/Filter/Core/Datas.js ***!\n      \\**********************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'var _require = __webpack_require__(/*! ../../Helpers/Array */ "./src/Helpers/Array.js"),\\n    inArray = _require.inArray;\\n\\nvar onChange = __webpack_require__(/*! ../Actions/Change */ "./src/Filter/Actions/Change.js");\\n\\nvar onSubmit = __webpack_require__(/*! ../Actions/Submit */ "./src/Filter/Actions/Submit.js");\\n\\nvar onRedirect = __webpack_require__(/*! ../Actions/Redirect */ "./src/Filter/Actions/Redirect.js");\\n\\nvar Template = __webpack_require__(/*! ../Options/Template */ "./src/Filter/Options/Template.js");\\n\\nvar NumberResults = __webpack_require__(/*! ../Options/NumberResults */ "./src/Filter/Options/NumberResults.js");\\n\\nmodule.exports = function () {\\n  return new Datas();\\n};\\n\\nfunction Datas() {\\n  this.extract = \\\'\\\';\\n  this.container = \\\'\\\';\\n  this.datas = [];\\n}\\n\\n;\\n\\nDatas.prototype.init = function (el) {\\n  el.datas = this.filtered(this.datas, el);\\n\\n  if (el.nb_results && el.nb_results.target) {\\n    el.get_nbResult = new NumberResults(el.nb_results, el.datas.length);\\n  }\\n\\n  console.info("ABC Ready");\\n\\n  if (el.debug) {\\n    console.info("url: " + el.options.url);\\n    console.info(el.datas.length + " datas founds");\\n  }\\n\\n  this.actions(el);\\n};\\n\\nDatas.prototype.get = function (el) {\\n  var start = el.results.onStart;\\n  var datas = this.find(el);\\n  var complete = el.results.onComplete;\\n\\n  if (start) {\\n    start();\\n  }\\n\\n  Promise.all([start]).then(function (datas) {\\n    return datas;\\n  });\\n\\n  if (complete) {\\n    Promise.all([start, datas]).then(function () {\\n      return complete();\\n    });\\n  }\\n};\\n\\nDatas.prototype.filtered = function (datas, el) {\\n  var _this = this;\\n\\n  return datas.filter(function (d, i) {\\n    //Status\\n    if (el.datas[i]) {\\n      return;\\n    }\\n\\n    d.hide = false; //stock DOM element\\n\\n    var id = inArray(d, _this.results.id);\\n    d.id = "".concat(_this.results.prefix).concat(id);\\n    d.abc_selector = d.abc_selector ? d.abc_selector : document.querySelector("#".concat(d.id));\\n\\n    if (_this.container && !d.abc_selector) {\\n      d.template = new Template(_this.results, d, _this.container);\\n    }\\n\\n    d.abc_selector = d.abc_selector ? d.abc_selector : document.querySelector("#".concat(d.id));\\n\\n    if (d.abc_selector) {\\n      return d;\\n    }\\n  });\\n};\\n\\nDatas.prototype.find = function (el) {\\n  var _this2 = this;\\n\\n  var datas;\\n\\n  if (el.options.url) {\\n    datas = fetch(el.options.url, el).then(function (response) {\\n      return response.json();\\n    }).then(function (json) {\\n      _this2.Fetch(null, json, el);\\n    }).catch(function (error) {\\n      return _this2.Fetch(error, null);\\n    });\\n  } else datas = this.HTML(el);\\n\\n  return datas;\\n};\\n\\nDatas.prototype.HTML = function (el) {\\n  var datas = document.querySelectorAll(el.results.target);\\n  this.results = el.results;\\n  var _a = datas;\\n\\n  var _f = function _f(d) {\\n    var arr = {\\n      abc_selector: d\\n    };\\n    var _a2 = d.attributes;\\n\\n    var _f2 = function _f2(attr) {\\n      return arr[attr.name] = attr.value;\\n    };\\n\\n    for (var _i2 = 0; _i2 < _a2.length; _i2++) {\\n      _f2(_a2[_i2], _i2, _a2);\\n    }\\n\\n    undefined;\\n    return arr;\\n  };\\n\\n  var _r = [];\\n\\n  for (var _i = 0; _i < _a.length; _i++) {\\n    _r.push(_f(_a[_i], _i, _a));\\n  }\\n\\n  this.datas = _r;\\n  this.init(el);\\n};\\n\\nDatas.prototype.Fetch = function (error, success, el) {\\n  if (error) {\\n    console.log(error);\\n  } else {\\n    this.datas = success;\\n    this.results = el.results;\\n\\n    if (el.results.path) {\\n      this.datas = inArray(this.datas, el.results.path);\\n    }\\n\\n    if (el.results.template) {\\n      this.container = document.querySelector(el.results.container);\\n    }\\n\\n    this.init(el);\\n  }\\n};\\n\\nDatas.prototype.actions = function (el) {\\n  switch (el.form.action) {\\n    case \\\'change\\\':\\n      el.form.fn = new onChange(el);\\n      break;\\n\\n    case \\\'submit\\\':\\n      el.form.fn = new onSubmit(el);\\n      break;\\n\\n    case \\\'redirect\\\':\\n      el.form.fn = new onRedirect(el);\\n      break;\\n  }\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL0NvcmUvRGF0YXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BQkMvLi9zcmMvRmlsdGVyL0NvcmUvRGF0YXMuanM/YTBhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgeyBpbkFycmF5IH0gID0gcmVxdWlyZSAoJy4uLy4uL0hlbHBlcnMvQXJyYXknICk7XG5cbnZhciBvbkNoYW5nZSA9IHJlcXVpcmUgKCAnLi4vQWN0aW9ucy9DaGFuZ2UnIClcbnZhciBvblN1Ym1pdCA9IHJlcXVpcmUgKCAnLi4vQWN0aW9ucy9TdWJtaXQnIClcbnZhciBvblJlZGlyZWN0ID0gcmVxdWlyZSAoICcuLi9BY3Rpb25zL1JlZGlyZWN0JyApXG5cbnZhciBUZW1wbGF0ZSA9IHJlcXVpcmUgKCAnLi4vT3B0aW9ucy9UZW1wbGF0ZScgKTtcbnZhciBOdW1iZXJSZXN1bHRzID0gcmVxdWlyZSAoICcuLi9PcHRpb25zL051bWJlclJlc3VsdHMnICk7XG5cbm1vZHVsZS5leHBvcnRzID0gKCkgPT4geyByZXR1cm4gbmV3IERhdGFzKCkgfVxuXG5mdW5jdGlvbiBEYXRhcygpe1xuICB0aGlzLmV4dHJhY3QgPSAnJztcbiAgdGhpcy5jb250YWluZXIgPSAnJztcbiAgdGhpcy5kYXRhcyA9IFtdXG59O1xuXG5cbkRhdGFzLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oZWwpIHtcbiAgZWwuZGF0YXMgPSB0aGlzLmZpbHRlcmVkKHRoaXMuZGF0YXMsIGVsKVxuICBcbiAgaWYoIGVsLm5iX3Jlc3VsdHMgJiYgZWwubmJfcmVzdWx0cy50YXJnZXQpIGVsLmdldF9uYlJlc3VsdCA9IG5ldyBOdW1iZXJSZXN1bHRzKGVsLm5iX3Jlc3VsdHMsIGVsLmRhdGFzLmxlbmd0aClcbiAgXG4gIGNvbnNvbGUuaW5mbyhcIkFCQyBSZWFkeVwiKVxuICBpZihlbC5kZWJ1Zykge1xuICAgIGNvbnNvbGUuaW5mbyggXCJ1cmw6IFwiICsgZWwub3B0aW9ucy51cmwpXG4gICAgY29uc29sZS5pbmZvKCBlbC5kYXRhcy5sZW5ndGggKyBcIiBkYXRhcyBmb3VuZHNcIilcbiAgfVxuICBcbiAgdGhpcy5hY3Rpb25zKGVsKVxufVxuXG5cbkRhdGFzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihlbCkge1xuICBjb25zdCBzdGFydCA9IGVsLnJlc3VsdHMub25TdGFydDtcbiAgY29uc3QgZGF0YXMgPSB0aGlzLmZpbmQoZWwpXG4gIGNvbnN0IGNvbXBsZXRlID0gZWwucmVzdWx0cy5vbkNvbXBsZXRlO1xuICBcbiAgaWYoc3RhcnQpIHN0YXJ0KCk7XG4gIFByb21pc2UuYWxsKFtzdGFydF0pLnRoZW4oIChkYXRhcykgPT4gZGF0YXMpO1xuICBpZihjb21wbGV0ZSkgUHJvbWlzZS5hbGwoW3N0YXJ0LCBkYXRhc10pLnRoZW4oICgpID0+IGNvbXBsZXRlKCkgKTtcblxufVxuXG5cblxuRGF0YXMucHJvdG90eXBlLmZpbHRlcmVkID0gZnVuY3Rpb24oZGF0YXMsIGVsKSB7XG4gIHJldHVybiBkYXRhcy5maWx0ZXIoIChkLCBpKSA9PiB7XG5cbiAgICAvL1N0YXR1c1xuICAgIFxuICAgIGlmKGVsLmRhdGFzW2ldKSByZXR1cm5cblxuICAgIGQuaGlkZSA9IGZhbHNlO1xuICAgIFxuICAgIC8vc3RvY2sgRE9NIGVsZW1lbnRcbiAgICBjb25zdCBpZCA9IGluQXJyYXkoZCwgdGhpcy5yZXN1bHRzLmlkKTtcbiAgICBcbiAgICBkLmlkID0gYCR7dGhpcy5yZXN1bHRzLnByZWZpeH0ke2lkfWA7XG5cbiAgICBkLmFiY19zZWxlY3RvciA9IGQuYWJjX3NlbGVjdG9yID8gZC5hYmNfc2VsZWN0b3IgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtkLmlkfWApXG5cbiAgICBpZiggdGhpcy5jb250YWluZXIgJiYgIWQuYWJjX3NlbGVjdG9yICkgZC50ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZSh0aGlzLnJlc3VsdHMsIGQsIHRoaXMuY29udGFpbmVyKVxuICAgIFxuICAgIGQuYWJjX3NlbGVjdG9yID0gZC5hYmNfc2VsZWN0b3IgPyBkLmFiY19zZWxlY3RvciA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2QuaWR9YClcblxuICAgIFxuICAgIGlmKGQuYWJjX3NlbGVjdG9yKSByZXR1cm4gZDtcbiAgfSk7XG59XG5cbkRhdGFzLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24oZWwpIHtcblxuICBsZXQgZGF0YXM7XG4gIGlmKGVsLm9wdGlvbnMudXJsKXtcbiAgICBkYXRhcyA9IGZldGNoKGVsLm9wdGlvbnMudXJsLCBlbCkgIFxuICAgIC50aGVuKCByZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkgKVxuICAgIC50aGVuKCBqc29uID0+IHsgdGhpcy5GZXRjaChudWxsLCBqc29uLCBlbCkgIH0pXG4gICAgLmNhdGNoKGVycm9yID0+IHRoaXMuRmV0Y2goZXJyb3IsIG51bGwpKVxuICB9ZWxzZSBkYXRhcyA9IHRoaXMuSFRNTChlbClcblxuICByZXR1cm4gZGF0YXNcbn1cblxuRGF0YXMucHJvdG90eXBlLkhUTUwgPSBmdW5jdGlvbihlbCl7XG5cbiAgY29uc3QgZGF0YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsLnJlc3VsdHMudGFyZ2V0KTtcbiAgdGhpcy5yZXN1bHRzID0gZWwucmVzdWx0c1xuXG4gIHRoaXMuZGF0YXMgPSBkYXRhcy5tYXAoIGQgPT4ge1xuXG4gICAgY29uc3QgYXJyID0geyBhYmNfc2VsZWN0b3IgOiBkIH1cblxuICAgIGQuYXR0cmlidXRlcy5mb3JFYWNoKCBhdHRyID0+IGFyclthdHRyLm5hbWVdID0gYXR0ci52YWx1ZSApXG5cbiAgICByZXR1cm4gYXJyO1xuICB9KVxuICAgICAgXG4gIHRoaXMuaW5pdChlbClcbn1cblxuRGF0YXMucHJvdG90eXBlLkZldGNoID0gZnVuY3Rpb24oZXJyb3IsIHN1Y2Nlc3MsIGVsKXtcbiAgaWYoZXJyb3IpIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgZWxzZSB7XG5cbiAgICB0aGlzLmRhdGFzID0gc3VjY2VzcztcbiAgICB0aGlzLnJlc3VsdHMgPSBlbC5yZXN1bHRzXG4gICAgXG4gICAgaWYoIGVsLnJlc3VsdHMucGF0aCApIHRoaXMuZGF0YXMgPSBpbkFycmF5KHRoaXMuZGF0YXMsIGVsLnJlc3VsdHMucGF0aCk7XG4gICAgaWYoIGVsLnJlc3VsdHMudGVtcGxhdGUgKSB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwucmVzdWx0cy5jb250YWluZXIpXG4gICAgXG4gICAgdGhpcy5pbml0KGVsKSAgICBcbiAgfVxufVxuXG5EYXRhcy5wcm90b3R5cGUuYWN0aW9ucyA9IGZ1bmN0aW9uKGVsKSB7XG4gIHN3aXRjaCAoZWwuZm9ybS5hY3Rpb24pIHtcbiAgICBjYXNlICdjaGFuZ2UnOlxuICAgICAgZWwuZm9ybS5mbiA9IG5ldyBvbkNoYW5nZShlbCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzdWJtaXQnOlxuICAgICAgZWwuZm9ybS5mbiA9IG5ldyBvblN1Ym1pdChlbCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyZWRpcmVjdCc6XG4gICAgICBlbC5mb3JtLmZuID0gbmV3IG9uUmVkaXJlY3QoZWwpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBR0E7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBSEE7QUFDQTtBQURBO0FBT0E7QUFBQTtBQUFBO0FBRkE7QUFDQTtBQURBO0FBSUE7QUFBQTtBQUNBO0FBTEE7QUFBQTtBQUFBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQWJBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUlBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQVRBO0FBV0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/Filter/Core/Datas.js\\n\');\n    },\n    "./src/Filter/Core/Filter.js":\n    /*!***********************************!*\\\n      !*** ./src/Filter/Core/Filter.js ***!\n      \\***********************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nvar _require = __webpack_require__(/*! ../../Helpers/Array */ "./src/Helpers/Array.js"),\\n    setArray = _require.setArray,\\n    setArrayRange = _require.setArrayRange;\\n\\nvar Checkbox = __webpack_require__(/*! ../Inputs/Checkbox */ "./src/Filter/Inputs/Checkbox.js");\\n\\nvar Radio = __webpack_require__(/*! ../Inputs/Radio */ "./src/Filter/Inputs/Radio.js");\\n\\nvar Range = __webpack_require__(/*! ../Inputs/Range */ "./src/Filter/Inputs/Range.js");\\n\\nvar Select = __webpack_require__(/*! ../Inputs/Select */ "./src/Filter/Inputs/Select.js");\\n\\nvar Search = __webpack_require__(/*! ../Inputs/Search */ "./src/Filter/Inputs/Search.js");\\n\\nvar Url = __webpack_require__(/*! ./Url */ "./src/Filter/Core/Url.js");\\n\\nvar LoadMore = __webpack_require__(/*! ../Options/LoadMore */ "./src/Filter/Options/LoadMore.js");\\n\\nvar Facette = __webpack_require__(/*! ../Options/Facette */ "./src/Filter/Options/Facette.js");\\n\\nmodule.exports = function (params) {\\n  return new Filter(params);\\n};\\n\\nfunction Filter(params) {\\n  this.options = {\\n    url: params.url ? params.url : false,\\n    create_url: params.create_url ? params.create_url : false\\n  };\\n  this.url = params.create_url || params.form.action === \\\'redirect\\\' ? new Url() : false;\\n  this.debug = params.debug ? params.debug : false;\\n  this.datas = [];\\n  this.results = {\\n    target: false,\\n    action: false,\\n    id: \\\'id\\\',\\n    path: \\\'\\\',\\n    prefix: \\\'\\\',\\n    visible_class: false,\\n    hidden_class: false,\\n    before_show: false,\\n    before_hide: false,\\n    template: false,\\n    container: "",\\n    onStart: false,\\n    onComplete: false\\n  };\\n  this.nb_results = {\\n    target: \\\'\\\',\\n    no_results: \\\'\\\',\\n    singular: \\\'\\\',\\n    plural: \\\'\\\'\\n  };\\n  this.form = _defineProperty({\\n    target: \\\'\\\',\\n    action: \\\'\\\'\\n  }, "target", \\\'\\\');\\n  this.facette = false;\\n  this.load_more = false;\\n  return this;\\n}\\n\\n;\\n\\nFilter.prototype.construct = function (params) {\\n  this.inputs = {};\\n\\n  if (params.results) {\\n    this.results = setArray(this.results, params.results);\\n  }\\n\\n  if (params.nb_results) {\\n    this.nb_results = setArray(this.nb_results, params.nb_results);\\n  }\\n\\n  if (params.form) {\\n    this.form = setArray(this.form, params.form);\\n  }\\n\\n  if (params.load_more) {\\n    this.load_more = new LoadMore();\\n    this.load_more = setArray(this.load_more, params.load_more);\\n  }\\n\\n  ;\\n\\n  if (params.facette) {\\n    this.facette = new Facette();\\n    this.facette = setArray(this.facette, params.facette);\\n  }\\n\\n  return this;\\n};\\n\\nFilter.prototype.setInputs = function (inputs) {\\n  // --- set inputs --- //\\n  // for (const key in inputs) {\\n  //     if (inputs[key])      this.get(inputs, key, capitalize(key))\\n  // }\\n  if (inputs.select) {\\n    this.get(inputs.select, "select", Select);\\n  }\\n\\n  if (inputs.search) {\\n    this.get(inputs.search, "search", Search);\\n  }\\n\\n  if (inputs.checkbox) {\\n    this.get(inputs.checkbox, "checkbox", Checkbox);\\n  }\\n\\n  if (inputs.radio) {\\n    this.get(inputs.radio, "radio", Radio);\\n  }\\n\\n  if (inputs.range) {\\n    this.get(inputs.range, "range", Range);\\n  }\\n\\n  return this;\\n};\\n\\nFilter.prototype.get = function (array, val, fct) {\\n  var _this = this;\\n\\n  this.inputs[val] = [];\\n  var _a = array;\\n\\n  var _f = function _f(el, index) {\\n    var obj = new fct();\\n\\n    if (val === "range" && el.multiple) {\\n      if (!document.querySelector("[name=\\\\"".concat(el.min.name, "\\\\"]")) && !document.querySelector("[name=\\\\"".concat(el.max.name, "\\\\"]"))) {\\n        delete array[index];\\n        return;\\n      } // else { this.facette.facettes[el.min.name] = {compare: el.compare}; this.facette.facettes[el.max.name] = {compare: el.compare} }\\n\\n    } else if (val === "range" && !el.multiple && !el.name) {\\n      if (!document.querySelector("[name=\\\\"".concat(el.min.name, "\\\\"]"))) {\\n        delete array[index];\\n        return;\\n      } // else this.facette.facettes[el.min.name] = {compare: el.compare};\\n\\n    } else {\\n      if (!document.querySelector("[name=\\\\"".concat(el.name, "\\\\"]"))) {\\n        delete array[index];\\n        return;\\n      } // else this.facette.facettes[el.name] = {compare: el.compare};\\n\\n    }\\n\\n    var els = el.url_name ? el.url_name : el.name;\\n\\n    if (_this.url && location.hash && _this.url.params[els]) {\\n      if (_this.url.params[els].indexOf(\\\',\\\')) {\\n        _this.url.params[els] = _this.url.params[els].split(\\\',\\\');\\n      }\\n\\n      if (el.id === true) {\\n        var _a2 = _this.url.params[els];\\n\\n        var _f2 = function _f2(input) {\\n          return document.querySelector("#".concat(input)).value;\\n        };\\n\\n        var _r2 = [];\\n\\n        for (var _i2 = 0; _i2 < _a2.length; _i2++) {\\n          _r2.push(_f2(_a2[_i2], _i2, _a2));\\n        }\\n\\n        el.value = _r2;\\n      } else {\\n        el.value = _this.url.params[els];\\n      }\\n    }\\n\\n    if (val === "range") {\\n      _this.inputs[val].push(setArrayRange(obj, el, _this.formObj));\\n    } else _this.inputs[val].push(setArray(obj, el));\\n\\n    if (el.value) {\\n      obj.create(_this, el.value);\\n    }\\n  };\\n\\n  for (var _i = 0; _i < _a.length; _i++) {\\n    _f(_a[_i], _i, _a);\\n  }\\n\\n  undefined;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL0NvcmUvRmlsdGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQUJDLy4vc3JjL0ZpbHRlci9Db3JlL0ZpbHRlci5qcz8xMjc2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB7IHNldEFycmF5LCBzZXRBcnJheVJhbmdlIH0gID0gcmVxdWlyZSAoJy4uLy4uL0hlbHBlcnMvQXJyYXknICk7XG5cblxudmFyIENoZWNrYm94ID0gcmVxdWlyZSggJy4uL0lucHV0cy9DaGVja2JveCcgKTtcbnZhciBSYWRpbyA9IHJlcXVpcmUoICcuLi9JbnB1dHMvUmFkaW8nICk7XG52YXIgUmFuZ2UgPSByZXF1aXJlKCAnLi4vSW5wdXRzL1JhbmdlJyApO1xudmFyIFNlbGVjdCA9IHJlcXVpcmUoICcuLi9JbnB1dHMvU2VsZWN0JyApO1xudmFyIFNlYXJjaCA9IHJlcXVpcmUoICcuLi9JbnB1dHMvU2VhcmNoJyApO1xuXG52YXIgVXJsID0gcmVxdWlyZSAoICcuL1VybCcgKTtcblxudmFyIExvYWRNb3JlID0gcmVxdWlyZSAoICcuLi9PcHRpb25zL0xvYWRNb3JlJyApO1xudmFyIEZhY2V0dGUgPSByZXF1aXJlICggJy4uL09wdGlvbnMvRmFjZXR0ZScgKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9ICggcGFyYW1zICkgPT4geyByZXR1cm4gbmV3IEZpbHRlciggcGFyYW1zICkgfVxuXG5mdW5jdGlvbiBGaWx0ZXIocGFyYW1zKXtcblxuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIHVybCA6IHBhcmFtcy51cmwgPyBwYXJhbXMudXJsIDogZmFsc2UsXG4gICAgICBjcmVhdGVfdXJsIDogcGFyYW1zLmNyZWF0ZV91cmwgPyBwYXJhbXMuY3JlYXRlX3VybCA6IGZhbHNlLFxuICAgIH07XG5cbiAgICB0aGlzLnVybCA9IHBhcmFtcy5jcmVhdGVfdXJsIHx8IHBhcmFtcy5mb3JtLmFjdGlvbiA9PT0gJ3JlZGlyZWN0JyA/IG5ldyBVcmwoKSA6IGZhbHNlO1xuICAgIHRoaXMuZGVidWcgPSBwYXJhbXMuZGVidWcgPyBwYXJhbXMuZGVidWcgOiBmYWxzZTtcbiAgICB0aGlzLmRhdGFzID0gW107XG4gICAgdGhpcy5yZXN1bHRzID0ge1xuICAgICAgdGFyZ2V0OiAgICAgICAgICAgZmFsc2UsXG4gICAgICBhY3Rpb246ICAgICAgICAgICBmYWxzZSxcbiAgICAgIGlkICAgIDogICAgICAgICAgICdpZCcsXG4gICAgICBwYXRoICAgIDogICAgICAgICAnJyxcbiAgICAgIHByZWZpeCAgICAgICA6ICAgICcnLFxuICAgICAgdmlzaWJsZV9jbGFzczogICAgZmFsc2UsXG4gICAgICBoaWRkZW5fY2xhc3MgOiAgICBmYWxzZSxcbiAgICAgIGJlZm9yZV9zaG93ICA6ICAgIGZhbHNlLFxuICAgICAgYmVmb3JlX2hpZGUgIDogICAgZmFsc2UsXG4gICAgICB0ZW1wbGF0ZSAgICAgOiAgICBmYWxzZSxcbiAgICAgIGNvbnRhaW5lciAgICA6ICAgIFwiXCIsXG4gICAgICBvblN0YXJ0IDogZmFsc2UsXG4gICAgICBvbkNvbXBsZXRlIDogZmFsc2VcbiAgICB9O1xuXG4gICAgdGhpcy5uYl9yZXN1bHRzID0ge1xuICAgICAgICB0YXJnZXQ6ICcnLFxuICAgICAgICBub19yZXN1bHRzOiAnJyxcbiAgICAgICAgc2luZ3VsYXI6ICcnLFxuICAgICAgICBwbHVyYWw6ICcnXG4gICAgfVxuXG4gICAgdGhpcy5mb3JtID0ge1xuICAgICAgICB0YXJnZXQ6ICcnLFxuICAgICAgICBhY3Rpb246ICcnLFxuICAgICAgICB0YXJnZXQ6ICcnLFxuICAgIH1cbiAgICB0aGlzLmZhY2V0dGUgPSBmYWxzZVxuXG4gICAgdGhpcy5sb2FkX21vcmUgPSBmYWxzZTtcblxuICAgIFxuICAgIHJldHVybiB0aGlzO1xuXG59O1xuXG5GaWx0ZXIucHJvdG90eXBlLmNvbnN0cnVjdCA9IGZ1bmN0aW9uKHBhcmFtcyl7XG4gICAgdGhpcy5pbnB1dHMgPSB7fTtcblxuICAgIGlmIChwYXJhbXMucmVzdWx0cykgdGhpcy5yZXN1bHRzID0gc2V0QXJyYXkodGhpcy5yZXN1bHRzLCBwYXJhbXMucmVzdWx0cyk7XG4gICAgaWYgKHBhcmFtcy5uYl9yZXN1bHRzKSB0aGlzLm5iX3Jlc3VsdHMgPSBzZXRBcnJheSh0aGlzLm5iX3Jlc3VsdHMsIHBhcmFtcy5uYl9yZXN1bHRzKTtcbiAgICBpZiAocGFyYW1zLmZvcm0pIHRoaXMuZm9ybSA9IHNldEFycmF5KHRoaXMuZm9ybSwgcGFyYW1zLmZvcm0pO1xuICAgIGlmIChwYXJhbXMubG9hZF9tb3JlKSB7XG4gICAgICAgIHRoaXMubG9hZF9tb3JlID0gbmV3IExvYWRNb3JlKCk7XG4gICAgICAgIHRoaXMubG9hZF9tb3JlID0gc2V0QXJyYXkodGhpcy5sb2FkX21vcmUsIHBhcmFtcy5sb2FkX21vcmUpXG4gICAgfTtcbiAgICBpZihwYXJhbXMuZmFjZXR0ZSkge1xuICAgICAgICB0aGlzLmZhY2V0dGUgPSBuZXcgRmFjZXR0ZSgpO1xuICAgICAgICB0aGlzLmZhY2V0dGUgPSBzZXRBcnJheSh0aGlzLmZhY2V0dGUsIHBhcmFtcy5mYWNldHRlKVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdGhpcztcblxufSBcblxuRmlsdGVyLnByb3RvdHlwZS5zZXRJbnB1dHMgPSBmdW5jdGlvbiggaW5wdXRzICkge1xuXG4gICAgLy8gLS0tIHNldCBpbnB1dHMgLS0tIC8vXG4gICAgLy8gZm9yIChjb25zdCBrZXkgaW4gaW5wdXRzKSB7XG4gICAgLy8gICAgIGlmIChpbnB1dHNba2V5XSkgICAgICB0aGlzLmdldChpbnB1dHMsIGtleSwgY2FwaXRhbGl6ZShrZXkpKVxuICAgIC8vIH1cbiAgICBcbiAgICBpZiAoaW5wdXRzLnNlbGVjdCkgICAgICB0aGlzLmdldChpbnB1dHMuc2VsZWN0LCBcInNlbGVjdFwiLCBTZWxlY3QpXG4gICAgaWYgKGlucHV0cy5zZWFyY2gpICAgICAgdGhpcy5nZXQoaW5wdXRzLnNlYXJjaCwgXCJzZWFyY2hcIiwgU2VhcmNoKVxuICAgIGlmIChpbnB1dHMuY2hlY2tib3gpICAgIHRoaXMuZ2V0KGlucHV0cy5jaGVja2JveCwgXCJjaGVja2JveFwiLCBDaGVja2JveClcbiAgICBpZiAoaW5wdXRzLnJhZGlvKSAgICAgICB0aGlzLmdldChpbnB1dHMucmFkaW8sIFwicmFkaW9cIiwgUmFkaW8pXG4gICAgaWYgKGlucHV0cy5yYW5nZSkgICAgICAgdGhpcy5nZXQoaW5wdXRzLnJhbmdlLCBcInJhbmdlXCIsIFJhbmdlKVxuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbkZpbHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oYXJyYXksIHZhbCwgZmN0ICkge1xuICAgIHRoaXMuaW5wdXRzW3ZhbF0gPSBbXTtcblxuICAgIGFycmF5LmZvckVhY2goIChlbCwgaW5kZXgpPT4ge1xuICAgICAgICBsZXQgb2JqID0gbmV3IGZjdCgpO1xuICAgICAgICBcbiAgICAgICAgaWYodmFsID09PSBcInJhbmdlXCIgJiYgZWwubXVsdGlwbGUpe1xuICAgICAgICAgICAgaWYoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtuYW1lPVwiJHtlbC5taW4ubmFtZX1cIl1gKSAmJiAhZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke2VsLm1heC5uYW1lfVwiXWApKXtcbiAgICAgICAgICAgICAgICBkZWxldGUgYXJyYXlbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZWxzZSB7IHRoaXMuZmFjZXR0ZS5mYWNldHRlc1tlbC5taW4ubmFtZV0gPSB7Y29tcGFyZTogZWwuY29tcGFyZX07IHRoaXMuZmFjZXR0ZS5mYWNldHRlc1tlbC5tYXgubmFtZV0gPSB7Y29tcGFyZTogZWwuY29tcGFyZX0gfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbCA9PT0gXCJyYW5nZVwiICYmICFlbC5tdWx0aXBsZSAmJiAhZWwubmFtZSl7XG4gICAgICAgICAgICBpZighZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke2VsLm1pbi5uYW1lfVwiXWApICl7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGFycmF5W2luZGV4XTtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVsc2UgdGhpcy5mYWNldHRlLmZhY2V0dGVzW2VsLm1pbi5uYW1lXSA9IHtjb21wYXJlOiBlbC5jb21wYXJlfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgaWYoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtuYW1lPVwiJHtlbC5uYW1lfVwiXWApKXtcbiAgICAgICAgICAgICAgICBkZWxldGUgYXJyYXlbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZWxzZSB0aGlzLmZhY2V0dGUuZmFjZXR0ZXNbZWwubmFtZV0gPSB7Y29tcGFyZTogZWwuY29tcGFyZX07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgXG4gICAgICAgIGNvbnN0IGVscyA9IGVsLnVybF9uYW1lID8gZWwudXJsX25hbWUgOiBlbC5uYW1lO1xuXG4gICAgICAgIFxuICAgICAgICBpZih0aGlzLnVybCAmJiBsb2NhdGlvbi5oYXNoICYmIHRoaXMudXJsLnBhcmFtc1tlbHNdICl7XG4gICAgICAgICAgICBpZiggdGhpcy51cmwucGFyYW1zW2Vsc10uaW5kZXhPZignLCcpICkgdGhpcy51cmwucGFyYW1zW2Vsc10gPSB0aGlzLnVybC5wYXJhbXNbZWxzXS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgaWYgKGVsLmlkID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBlbC52YWx1ZSA9IHRoaXMudXJsLnBhcmFtc1tlbHNdLm1hcCggaW5wdXQgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7aW5wdXR9YCkudmFsdWUgKVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGVsLnZhbHVlID0gdGhpcy51cmwucGFyYW1zW2Vsc107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHZhbCA9PT0gXCJyYW5nZVwiKSB0aGlzLmlucHV0c1t2YWxdLnB1c2goIHNldEFycmF5UmFuZ2UoIG9iaiwgZWwsIHRoaXMuZm9ybU9iaiApIClcbiAgICAgICAgZWxzZSB0aGlzLmlucHV0c1t2YWxdLnB1c2goIHNldEFycmF5KCBvYmosIGVsICkgKVxuXG4gICAgICAgIGlmKGVsLnZhbHVlKSBvYmouY3JlYXRlKHRoaXMsIGVsLnZhbHVlKTtcbiAgICB9KVxufVxuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYkE7QUFnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBT0E7QUFDQTtBQUNBO0FBRkE7QUFLQTtBQUVBO0FBR0E7QUFFQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFEQTtBQUNBO0FBREE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFFQTtBQUFBO0FBQ0E7QUFIQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFsREE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQStDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/Filter/Core/Filter.js\\n\');\n    },\n    "./src/Filter/Core/Url.js":\n    /*!********************************!*\\\n      !*** ./src/Filter/Core/Url.js ***!\n      \\********************************/\n\n    /*! no static exports found */\n    function (module, exports) {\n      eval("module.exports = function () {\\n  return new Url();\\n};\\n\\nfunction Url() {\\n  this.search = new URLSearchParams();\\n\\n  if (location.hash) {\\n    this.params = this.disconstruct();\\n  }\\n}\\n\\n;\\n\\nUrl.prototype.construct = function (label) {\\n  var name = label.url_name ? label.url_name : label.name;\\n  var value = label.names && label.id && label.names[0] != \\"\\" ? label.names : label.value;\\n  value = encodeURIComponent(value);\\n\\n  if (value.length !== 0 && this.search) {\\n    this.search.set(name, value);\\n  }\\n\\n  if (value.length === 0 && this.search || value.length === 1 && value[0] === \\"\\" && this.search) {\\n    this.search.delete(name);\\n  }\\n};\\n\\nUrl.prototype.constructRange = function (label) {\\n  var name = label.url_name ? label.url_name : label.name;\\n  var minValue = label.min.value;\\n  var maxValue = label.max.value;\\n  var value = minValue && maxValue ? \\"\\".concat(minValue, \\"-\\").concat(maxValue) : minValue;\\n\\n  if (minValue !== label.min.min || maxValue !== label.max.max && this.search) {\\n    this.search.set(name, value);\\n  }\\n\\n  if (minValue === label.min.min && this.search && !label.multiple || minValue === label.min.min && maxValue === label.max.max && this.search && label.multiple) {\\n    this.search.delete(name);\\n  }\\n};\\n\\nUrl.prototype.disconstruct = function () {\\n  var _this = this;\\n\\n  var params = [];\\n  var hash = location.hash.replace(\'#\', \'\');\\n  var hashArray = hash.split(\'&\');\\n  var _a = hashArray;\\n\\n  var _f = function _f(h) {\\n    h = h.split(\'=\');\\n    params[h[0]] = decodeURIComponent(decodeURIComponent(h[1]));\\n\\n    _this.search.set(h[0], decodeURIComponent(h[1]));\\n  };\\n\\n  for (var _i = 0; _i < _a.length; _i++) {\\n    _f(_a[_i], _i, _a);\\n  }\\n\\n  undefined;\\n  return params;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL0NvcmUvVXJsLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQUJDLy4vc3JjL0ZpbHRlci9Db3JlL1VybC5qcz82ZTM2Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKCkgPT4geyByZXR1cm4gbmV3IFVybCgpIH1cbmZ1bmN0aW9uIFVybCgpe1xuICB0aGlzLnNlYXJjaCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgaWYobG9jYXRpb24uaGFzaCkgdGhpcy5wYXJhbXMgPSB0aGlzLmRpc2NvbnN0cnVjdCgpXG59O1xuXG5VcmwucHJvdG90eXBlLmNvbnN0cnVjdCA9IGZ1bmN0aW9uKGxhYmVsKXtcbiAgbGV0IG5hbWUgPSBsYWJlbC51cmxfbmFtZSA/IGxhYmVsLnVybF9uYW1lIDogbGFiZWwubmFtZVxuXG4gIGxldCB2YWx1ZSA9IGxhYmVsLm5hbWVzICYmIGxhYmVsLmlkICYmIGxhYmVsLm5hbWVzWzBdICE9IFwiXCIgPyBsYWJlbC5uYW1lcyA6IGxhYmVsLnZhbHVlXG4gIHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKVxuICBcbiAgXG4gIGlmICh2YWx1ZS5sZW5ndGggIT09IDAgJiYgdGhpcy5zZWFyY2gpIHRoaXMuc2VhcmNoLnNldChuYW1lLCB2YWx1ZSk7XG4gIGlmICh2YWx1ZS5sZW5ndGggPT09IDAgJiYgdGhpcy5zZWFyY2ggfHwgdmFsdWUubGVuZ3RoID09PSAxICYmIHZhbHVlWzBdID09PSBcIlwiICYmIHRoaXMuc2VhcmNoKSB0aGlzLnNlYXJjaC5kZWxldGUobmFtZSk7XG5cbn1cblxuVXJsLnByb3RvdHlwZS5jb25zdHJ1Y3RSYW5nZSA9IGZ1bmN0aW9uKGxhYmVsKXtcbiAgbGV0IG5hbWUgPSBsYWJlbC51cmxfbmFtZSA/IGxhYmVsLnVybF9uYW1lIDogbGFiZWwubmFtZVxuICBcbiAgbGV0IG1pblZhbHVlID0gbGFiZWwubWluLnZhbHVlXG4gIGxldCBtYXhWYWx1ZSA9IGxhYmVsLm1heC52YWx1ZVxuXG4gIGxldCB2YWx1ZSA9IG1pblZhbHVlICYmIG1heFZhbHVlID8gYCR7bWluVmFsdWV9LSR7bWF4VmFsdWV9YCA6IG1pblZhbHVlXG5cbiAgaWYgKG1pblZhbHVlICE9PSBsYWJlbC5taW4ubWluIHx8IG1heFZhbHVlICE9PSBsYWJlbC5tYXgubWF4ICYmIHRoaXMuc2VhcmNoKSB0aGlzLnNlYXJjaC5zZXQobmFtZSwgdmFsdWUpO1xuICBpZiAobWluVmFsdWUgPT09IGxhYmVsLm1pbi5taW4gJiYgdGhpcy5zZWFyY2ggJiYgIWxhYmVsLm11bHRpcGxlIHx8IG1pblZhbHVlID09PSBsYWJlbC5taW4ubWluICYmIG1heFZhbHVlID09PSBsYWJlbC5tYXgubWF4ICYmIHRoaXMuc2VhcmNoICYmIGxhYmVsLm11bHRpcGxlKSB0aGlzLnNlYXJjaC5kZWxldGUobmFtZSk7XG5cbn1cblxuVXJsLnByb3RvdHlwZS5kaXNjb25zdHJ1Y3QgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgcGFyYW1zID0gW107XG4gIGNvbnN0IGhhc2ggPSBsb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJyk7XG4gIGNvbnN0IGhhc2hBcnJheSA9IGhhc2guc3BsaXQoJyYnKTtcblxuICBoYXNoQXJyYXkuZm9yRWFjaCggaCA9PiB7XG4gICAgaCA9IGguc3BsaXQoJz0nKVxuICAgIHBhcmFtc1sgaFswXSBdID0gZGVjb2RlVVJJQ29tcG9uZW50KGRlY29kZVVSSUNvbXBvbmVudChoWzFdKSk7XG4gICAgdGhpcy5zZWFyY2guc2V0KGhbMF0sIGRlY29kZVVSSUNvbXBvbmVudChoWzFdKSlcbiAgfSlcbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUhBO0FBQ0E7QUFEQTtBQU1BO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQVZBO0FBQUE7QUFBQTtBQUNBO0FBSUE7QUFLQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/Filter/Core/Url.js\\n");\n    },\n    "./src/Filter/Inputs/Checkbox.js":\n    /*!***************************************!*\\\n      !*** ./src/Filter/Inputs/Checkbox.js ***!\n      \\***************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\\n\\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\\n\\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") { return Array.from(iter); } }\\n\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\\n\\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\\n\\nvar _require = __webpack_require__(/*! ../../Helpers/Array */ "./src/Helpers/Array.js"),\\n    inArray = _require.inArray;\\n\\nmodule.exports = function () {\\n  return new Checkbox();\\n};\\n\\nfunction Checkbox(d) {\\n  this.name = false;\\n  this.compare = false;\\n  this.url_name = false;\\n  this.operator = "or";\\n  this.value = [];\\n  this.id = false;\\n}\\n\\nCheckbox.prototype.validate = function (data) {\\n  var _this = this;\\n\\n  var toValidate;\\n  data.inputs = [];\\n\\n  if (this.value.length === 0) {\\n    return true;\\n  }\\n\\n  if (_typeof(this.compare) === "object") {\\n    toValidate = [];\\n    var _a = this.compare;\\n\\n    var _f = function _f(compare) {\\n      toValidate.push(inArray(data, compare, _this.value));\\n    };\\n\\n    for (var _i = 0; _i < _a.length; _i++) {\\n      _f(_a[_i], _i, _a);\\n    }\\n\\n    undefined;\\n    return this.multiCompare(data, toValidate, this.value);\\n  } else {\\n    return this.singleCompare(data, this.value, this.compare);\\n  }\\n};\\n\\nCheckbox.prototype.multiCompare = function (data, toValidate, value) {\\n  if (toValidate) {\\n    if (toValidate[0] !== "" && toValidate[1] !== "") {\\n      isValidated = value >= toValidate[0] && value <= toValidate[1];\\n    } else if (toValidate[0] !== "" && toValidate[1] === "") {\\n      isValidated = value >= toValidate[0];\\n    } else if (!toValidate[0] && toValidate[1] || toValidate[0] === "" && toValidate[1]) {\\n      isValidated = value <= toValidate[1];\\n    } else {\\n      return true;\\n    }\\n\\n    return isValidated;\\n  } else return false;\\n};\\n\\nCheckbox.prototype.singleCompare = function (data, value, compare) {\\n  var isValidated = inArray(data, compare, value);\\n\\n  if (isValidated) {\\n    isValidated = _typeof(isValidated) != \\\'object\\\' ? [isValidated] : isValidated;\\n\\n    if (this.operator === "and") {\\n      isValidated = isValidated.length === value.length;\\n      isValidated = isValidated.filter(function (v) {\\n        return value.indexOf(String(v)) > -1;\\n      });\\n      isValidated = _toConsumableArray(new Set(isValidated));\\n    } else if (this.operator === "or") {\\n      isValidated = isValidated.filter(function (v) {\\n        return value.indexOf(String(v)) > -1;\\n      });\\n      isValidated = _toConsumableArray(new Set(isValidated));\\n      isValidated = isValidated.length > 0;\\n    } else if (this.operator === ">") {\\n      isValidated = isValidated > value[0];\\n    } else if (this.operator === ">=") {\\n      isValidated = isValidated >= value[0];\\n    } else if (this.operator === "<=") {\\n      isValidated = isValidated <= value[0];\\n    } else if (this.operator === "<") {\\n      isValidated = isValidated < value[0];\\n    } else if (this.operator === "=") {\\n      isValidated = isValidated === value[0];\\n    }\\n\\n    return isValidated;\\n  } else return false;\\n};\\n\\nCheckbox.prototype.update = function (options) {\\n  var _this2 = this;\\n\\n  var inputs = options.el.formObj.querySelectorAll("[name=\\\\"".concat(this.name, "\\\\"]")); // Return the checked inputs\\n\\n  var checked = _toConsumableArray(inputs).filter(function (input) {\\n    return input.checked;\\n  }); // Insert value in instance\\n\\n\\n  var _a2 = _toConsumableArray(checked);\\n\\n  var _f2 = function _f2(input) {\\n    return input.value;\\n  };\\n\\n  var _r2 = [];\\n\\n  for (var _i2 = 0; _i2 < _a2.length; _i2++) {\\n    _r2.push(_f2(_a2[_i2], _i2, _a2));\\n  }\\n\\n  this.value = _r2;\\n\\n  var _a3 = _toConsumableArray(checked);\\n\\n  var _f3 = function _f3(input) {\\n    return input.getAttribute(\\\'id\\\') && _this2.id ? input.getAttribute(\\\'id\\\') : input.value;\\n  };\\n\\n  var _r3 = [];\\n\\n  for (var _i3 = 0; _i3 < _a3.length; _i3++) {\\n    _r3.push(_f3(_a3[_i3], _i3, _a3));\\n  }\\n\\n  this.names = _r3;\\n};\\n\\nCheckbox.prototype.create = function (options) {\\n  var _this3 = this;\\n\\n  var inputs = options.formObj.querySelectorAll("[name=\\\\"".concat(this.name, "\\\\"]"));\\n\\n  var _a4 = _toConsumableArray(inputs);\\n\\n  var _f4 = function _f4(input) {\\n    var attr = input.getAttribute(\\\'id\\\') && _this3.id ? input.getAttribute(\\\'id\\\') : input.value;\\n\\n    if (_this3.value.indexOf(input.value) > -1) {\\n      input.setAttribute(\\\'checked\\\', \\\'checked\\\');\\n      input.checked = true;\\n    } else {\\n      input.checked = false;\\n      input.removeAttribute("checked");\\n    }\\n  };\\n\\n  for (var _i4 = 0; _i4 < _a4.length; _i4++) {\\n    _f4(_a4[_i4], _i4, _a4);\\n  }\\n\\n  var checked = undefined;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL0lucHV0cy9DaGVja2JveC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0FCQy8uL3NyYy9GaWx0ZXIvSW5wdXRzL0NoZWNrYm94LmpzPzNkM2IiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHsgaW5BcnJheSB9ICA9IHJlcXVpcmUgKCcuLi8uLi9IZWxwZXJzL0FycmF5JyApO1xubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7IHJldHVybiBuZXcgQ2hlY2tib3goKSB9XG5mdW5jdGlvbiBDaGVja2JveChkKXtcbiAgICB0aGlzLm5hbWUgICAgICAgPSBmYWxzZVxuICAgIHRoaXMuY29tcGFyZSAgICA9IGZhbHNlXG4gICAgdGhpcy51cmxfbmFtZSAgID0gZmFsc2VcbiAgICB0aGlzLm9wZXJhdG9yICAgPSBcIm9yXCJcbiAgICB0aGlzLnZhbHVlICAgICAgPSBbXVxuICAgIHRoaXMuaWQgICAgICAgICA9IGZhbHNlXG59XG5cbkNoZWNrYm94LnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uKGRhdGEpe1xuICAgIGxldCB0b1ZhbGlkYXRlO1xuICAgIGRhdGEuaW5wdXRzID0gW107XG4gICAgaWYgKHRoaXMudmFsdWUubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgdGhpcy5jb21wYXJlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHRvVmFsaWRhdGUgPSBbXTtcblxuICAgICAgICB0aGlzLmNvbXBhcmUuZm9yRWFjaCggY29tcGFyZSA9PiB7XG4gICAgICAgICAgICB0b1ZhbGlkYXRlLnB1c2goaW5BcnJheShkYXRhLCBjb21wYXJlLCB0aGlzLnZhbHVlKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpQ29tcGFyZShkYXRhLCB0b1ZhbGlkYXRlLCB0aGlzLnZhbHVlKVxuICAgIH1lbHNle1xuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGVDb21wYXJlKGRhdGEsIHRoaXMudmFsdWUsIHRoaXMuY29tcGFyZSlcbiAgICB9XG5cbn1cblxuQ2hlY2tib3gucHJvdG90eXBlLm11bHRpQ29tcGFyZSA9IGZ1bmN0aW9uKCBkYXRhLCB0b1ZhbGlkYXRlLCB2YWx1ZSApe1xuICAgIFxuICAgIFxuICAgIGlmICggdG9WYWxpZGF0ZSApIHtcbiAgICAgICAgaWYgKHRvVmFsaWRhdGVbMF0gIT09IFwiXCIgJiYgdG9WYWxpZGF0ZVsxXSAhPT0gXCJcIikge1xuICAgICAgICAgICAgaXNWYWxpZGF0ZWQgPSB2YWx1ZSA+PSB0b1ZhbGlkYXRlWzBdICYmIHZhbHVlIDw9IHRvVmFsaWRhdGVbMV1cbiAgICAgICAgfWVsc2UgaWYodG9WYWxpZGF0ZVswXSAhPT0gXCJcIiAmJiB0b1ZhbGlkYXRlWzFdID09PSBcIlwiKXtcbiAgICAgICAgICAgIGlzVmFsaWRhdGVkID0gdmFsdWUgPj0gdG9WYWxpZGF0ZVswXVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoIXRvVmFsaWRhdGVbMF0gJiYgdG9WYWxpZGF0ZVsxXSB8fCB0b1ZhbGlkYXRlWzBdID09PSBcIlwiICYmIHRvVmFsaWRhdGVbMV0gKXtcbiAgICAgICAgICAgIGlzVmFsaWRhdGVkID0gdmFsdWUgPD0gdG9WYWxpZGF0ZVsxXVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlzVmFsaWRhdGVkXG4gICAgfVxuICAgICBlbHNlIHJldHVybiBmYWxzZTtcbn1cblxuQ2hlY2tib3gucHJvdG90eXBlLnNpbmdsZUNvbXBhcmUgPSBmdW5jdGlvbiggZGF0YSwgdmFsdWUsIGNvbXBhcmUgKXtcbiAgIFxuICAgIGxldCBpc1ZhbGlkYXRlZCA9IGluQXJyYXkoZGF0YSwgY29tcGFyZSwgdmFsdWUpO1xuXG4gICAgaWYoIGlzVmFsaWRhdGVkICkge1xuXG4gICAgICAgIGlzVmFsaWRhdGVkID0gdHlwZW9mIGlzVmFsaWRhdGVkICE9ICdvYmplY3QnID8gW2lzVmFsaWRhdGVkXSA6IGlzVmFsaWRhdGVkXG4gICAgICAgIGlmICh0aGlzLm9wZXJhdG9yID09PSBcImFuZFwiKSB7XG4gICAgICAgICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkLmxlbmd0aCA9PT0gdmFsdWUubGVuZ3RoIDtcbiAgICAgICAgICAgIGlzVmFsaWRhdGVkID0gaXNWYWxpZGF0ZWQuZmlsdGVyKCB2ID0+IHZhbHVlLmluZGV4T2YoIFN0cmluZyh2KSApID4gLTEpO1xuICAgICAgICAgICAgaXNWYWxpZGF0ZWQgPSBbLi4ubmV3IFNldChpc1ZhbGlkYXRlZCldO1xuICAgICAgICB9ZWxzZSBpZiAodGhpcy5vcGVyYXRvciA9PT0gXCJvclwiKXtcbiAgICAgICAgICAgIGlzVmFsaWRhdGVkID0gaXNWYWxpZGF0ZWQuZmlsdGVyKCB2ID0+IHZhbHVlLmluZGV4T2YoIFN0cmluZyh2KSApID4gLTEpO1xuICAgICAgICAgICAgaXNWYWxpZGF0ZWQgPSBbLi4ubmV3IFNldChpc1ZhbGlkYXRlZCldO1xuICAgICAgICAgICAgaXNWYWxpZGF0ZWQgPSBpc1ZhbGlkYXRlZC5sZW5ndGggPiAwXG4gICAgICAgIH1lbHNlIGlmICh0aGlzLm9wZXJhdG9yID09PSBcIj5cIil7XG4gICAgICAgICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkID4gdmFsdWVbMF1cbiAgICAgICAgfWVsc2UgaWYgKHRoaXMub3BlcmF0b3IgPT09IFwiPj1cIil7XG4gICAgICAgICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkID49IHZhbHVlWzBdXG4gICAgICAgIH1lbHNlIGlmICh0aGlzLm9wZXJhdG9yID09PSBcIjw9XCIpe1xuICAgICAgICAgICAgaXNWYWxpZGF0ZWQgPSBpc1ZhbGlkYXRlZCA8PSB2YWx1ZVswXVxuICAgICAgICB9ZWxzZSBpZiAodGhpcy5vcGVyYXRvciA9PT0gXCI8XCIpe1xuICAgICAgICAgICAgaXNWYWxpZGF0ZWQgPSBpc1ZhbGlkYXRlZCA8IHZhbHVlWzBdXG4gICAgICAgIH1lbHNlIGlmICh0aGlzLm9wZXJhdG9yID09PSBcIj1cIil7XG4gICAgICAgICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkID09PSB2YWx1ZVswXVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1ZhbGlkYXRlZDtcblxuICAgIH0gZWxzZSByZXR1cm4gZmFsc2U7XG5cblxufVxuXG5DaGVja2JveC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ob3B0aW9ucyl7XG4gICAgICAgIGNvbnN0IGlucHV0cyA9IG9wdGlvbnMuZWwuZm9ybU9iai5xdWVyeVNlbGVjdG9yQWxsKGBbbmFtZT1cIiR7dGhpcy5uYW1lfVwiXWApXG4gICAgICAgIC8vIFJldHVybiB0aGUgY2hlY2tlZCBpbnB1dHNcbiAgICAgICAgY29uc3QgY2hlY2tlZCA9IFsuLi5pbnB1dHNdLmZpbHRlciggaW5wdXQgPT4gaW5wdXQuY2hlY2tlZCApO1xuXG4gICAgICAgIC8vIEluc2VydCB2YWx1ZSBpbiBpbnN0YW5jZVxuICAgICAgICB0aGlzLnZhbHVlID0gWy4uLmNoZWNrZWRdLm1hcCggaW5wdXQgPT4gaW5wdXQudmFsdWUgKVxuICAgICAgICB0aGlzLm5hbWVzID0gWy4uLmNoZWNrZWRdLm1hcCggaW5wdXQgPT4gaW5wdXQuZ2V0QXR0cmlidXRlKCdpZCcpICYmIHRoaXMuaWQgPyBpbnB1dC5nZXRBdHRyaWJ1dGUoJ2lkJykgOiBpbnB1dC52YWx1ZSApO1xufVxuXG5DaGVja2JveC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucyl7XG5cbiAgICBjb25zdCBpbnB1dHMgPSBvcHRpb25zLmZvcm1PYmoucXVlcnlTZWxlY3RvckFsbChgW25hbWU9XCIke3RoaXMubmFtZX1cIl1gKVxuXG4gICAgY29uc3QgY2hlY2tlZCA9IFsuLi5pbnB1dHNdLmZvckVhY2goIGlucHV0ID0+IHtcbiAgICAgICAgY29uc3QgYXR0ciA9IGlucHV0LmdldEF0dHJpYnV0ZSgnaWQnKSAmJiB0aGlzLmlkID8gaW5wdXQuZ2V0QXR0cmlidXRlKCdpZCcpIDogaW5wdXQudmFsdWUgO1xuXG4gICAgICAgIGlmKHRoaXMudmFsdWUuaW5kZXhPZihpbnB1dC52YWx1ZSkgPiAtMSl7XG4gICAgICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCAnY2hlY2tlZCcpXG4gICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gdHJ1ZVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlucHV0LnJlbW92ZUF0dHJpYnV0ZShcImNoZWNrZWRcIilcbiAgICAgICAgfSBcbiAgICB9KTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQURBO0FBSUE7QUFDQTtBQUNBO0FBTkE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUxBO0FBQ0E7QUFEQTtBQU1BO0FBQUE7QUFDQTtBQVBBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQUtBO0FBQ0E7QUFQQTtBQUNBO0FBREE7QUFPQTtBQUFBO0FBQ0E7QUFSQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQURBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZBO0FBQUE7QUFBQTtBQUNBO0FBR0E7QUFXQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/Filter/Inputs/Checkbox.js\\n\');\n    },\n    "./src/Filter/Inputs/Radio.js":\n    /*!************************************!*\\\n      !*** ./src/Filter/Inputs/Radio.js ***!\n      \\************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\\n\\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\\n\\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") { return Array.from(iter); } }\\n\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\\n\\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\\n\\nvar _require = __webpack_require__(/*! ../../Helpers/Array */ "./src/Helpers/Array.js"),\\n    inArray = _require.inArray;\\n\\nmodule.exports = function () {\\n  return new Radio();\\n};\\n\\nfunction Radio() {\\n  this.name = false;\\n  this.compare = false;\\n  this.url_name = false;\\n  this.operator = "or";\\n  this.value = [];\\n  this.id = false;\\n} // Radio.prototype.validate = function(data){\\n//     let toValidate;\\n//     data.inputs = [];\\n//     if (this.value.length === 0) return true;\\n//       let comp = this.compare, operator = this.operator;\\n//       if (this.target && this.compare[this.target] ){\\n//         comp = this.compare[this.target].compare\\n//         operator  = this.compare[this.target].operator\\n//       }\\n//         if (typeof comp === "object") {\\n//             toValidate = [];\\n//             comp.forEach( compare => {\\n//                 toValidate.push(inArray(data, compare, this.value));\\n//             })\\n//             return this.multiCompare(data, toValidate, this.value)\\n//         }else{\\n//             return this.singleCompare(data, this.value, comp, operator)\\n//         }\\n// }\\n\\n\\nRadio.prototype.validate = function (data) {\\n  var _this = this;\\n\\n  if (this.value.length === 0 || this.value.length === 1 && this.value[0] === "") {\\n    return true;\\n  }\\n\\n  var isValidated = inArray(data, this.compare, this.value);\\n  isValidated = _typeof(isValidated) != \\\'object\\\' ? [isValidated] : isValidated;\\n\\n  if (isValidated) {\\n    isValidated = isValidated.filter(function (v) {\\n      return _this.value.indexOf(String(v)) > -1;\\n    });\\n    isValidated = _toConsumableArray(new Set(isValidated));\\n    isValidated = this.operator !== "and" ? isValidated.length > 0 : isValidated.length === this.value.length;\\n    return isValidated;\\n  } else return false;\\n};\\n\\nRadio.prototype.multiCompare = function (data, toValidate, value) {\\n  if (toValidate) {\\n    if (toValidate[0] !== "" && toValidate[1] !== "") {\\n      isValidated = value >= toValidate[0] && value <= toValidate[1];\\n    } else if (toValidate[0] !== "" && toValidate[1] === "") {\\n      isValidated = value >= toValidate[0];\\n    } else if (!toValidate[0] && toValidate[1] || toValidate[0] === "" && toValidate[1]) {\\n      isValidated = value <= toValidate[1];\\n    } else {\\n      return true;\\n    }\\n\\n    return isValidated;\\n  } else return false;\\n};\\n\\nRadio.prototype.singleCompare = function (data, value, compare, operator) {\\n  // if(!compare) return\\n  var isValidated = inArray(data, compare, value);\\n\\n  if (isValidated) {\\n    isValidated = _typeof(isValidated) != \\\'object\\\' ? [isValidated] : isValidated;\\n\\n    if (operator === "and") {\\n      isValidated = isValidated.length === value.length;\\n      isValidated = isValidated.filter(function (v) {\\n        return value.indexOf(String(v)) > -1;\\n      });\\n      isValidated = _toConsumableArray(new Set(isValidated));\\n    } else if (operator === "or") {\\n      isValidated = isValidated.filter(function (v) {\\n        return value.indexOf(String(v)) > -1;\\n      });\\n      isValidated = _toConsumableArray(new Set(isValidated));\\n      isValidated = isValidated.length > 0;\\n    } else if (operator === ">") {\\n      isValidated = isValidated > value[0];\\n    } else if (operator === ">=") {\\n      isValidated = isValidated >= value[0];\\n    } else if (operator === "<=") {\\n      isValidated = isValidated <= value[0];\\n    } else if (operator === "<") {\\n      isValidated = isValidated < value[0];\\n    } else if (operator === "=") {\\n      isValidated = isValidated === value[0];\\n    }\\n\\n    return isValidated;\\n  } else return false;\\n};\\n\\nRadio.prototype.update = function (options) {\\n  var _this2 = this;\\n\\n  // Get all inputs from this name\\n  var inputs = options.el.formObj.querySelectorAll("[name=\\\\"".concat(this.name, "\\\\"]")); // Return the checked inputs\\n\\n  var checked = _toConsumableArray(inputs).filter(function (input) {\\n    return input.checked;\\n  }); // Insert value in instance\\n\\n\\n  var _a = _toConsumableArray(checked);\\n\\n  var _f = function _f(input) {\\n    return input.value;\\n  };\\n\\n  var _r = [];\\n\\n  for (var _i = 0; _i < _a.length; _i++) {\\n    _r.push(_f(_a[_i], _i, _a));\\n  }\\n\\n  this.value = _r;\\n\\n  var _a2 = _toConsumableArray(checked);\\n\\n  var _f2 = function _f2(input) {\\n    return input.getAttribute(\\\'id\\\') && _this2.id ? input.getAttribute(\\\'id\\\') : input.value;\\n  };\\n\\n  var _r2 = [];\\n\\n  for (var _i2 = 0; _i2 < _a2.length; _i2++) {\\n    _r2.push(_f2(_a2[_i2], _i2, _a2));\\n  }\\n\\n  this.names = _r2;\\n};\\n\\nRadio.prototype.create = function (options) {\\n  var _this3 = this;\\n\\n  var inputs = options.formObj.querySelectorAll("[name=\\\\"".concat(this.name, "\\\\"]"));\\n\\n  var _a3 = _toConsumableArray(inputs);\\n\\n  var _f3 = function _f3(input) {\\n    var attr = input.getAttribute(\\\'id\\\') && _this3.id ? input.getAttribute(\\\'id\\\') : input.value;\\n\\n    if (_this3.value.indexOf(input.value) > -1) {\\n      input.setAttribute(\\\'checked\\\', \\\'checked\\\');\\n      input.checked = true;\\n    } else {\\n      input.checked = false;\\n      input.removeAttribute("checked");\\n    }\\n  };\\n\\n  for (var _i3 = 0; _i3 < _a3.length; _i3++) {\\n    _f3(_a3[_i3], _i3, _a3);\\n  }\\n\\n  var checked = undefined;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL0lucHV0cy9SYWRpby5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0FCQy8uL3NyYy9GaWx0ZXIvSW5wdXRzL1JhZGlvLmpzPzYxOWIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHsgaW5BcnJheSB9ICA9IHJlcXVpcmUgKCcuLi8uLi9IZWxwZXJzL0FycmF5JyApO1xubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7IHJldHVybiBuZXcgUmFkaW8oKSB9XG5mdW5jdGlvbiBSYWRpbygpe1xuICB0aGlzLm5hbWUgICAgPSBmYWxzZSBcbiAgdGhpcy5jb21wYXJlID0gZmFsc2VcbiAgdGhpcy51cmxfbmFtZT0gZmFsc2VcbiAgdGhpcy5vcGVyYXRvcj0gXCJvclwiXG4gIHRoaXMudmFsdWUgICA9IFtdXG4gIHRoaXMuaWQgICAgICA9IGZhbHNlXG59XG5cblxuLy8gUmFkaW8ucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24oZGF0YSl7XG4vLyAgICAgbGV0IHRvVmFsaWRhdGU7XG4vLyAgICAgZGF0YS5pbnB1dHMgPSBbXTtcblxuLy8gICAgIGlmICh0aGlzLnZhbHVlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRydWU7XG4vLyAgICAgICBsZXQgY29tcCA9IHRoaXMuY29tcGFyZSwgb3BlcmF0b3IgPSB0aGlzLm9wZXJhdG9yO1xuLy8gICAgICAgaWYgKHRoaXMudGFyZ2V0ICYmIHRoaXMuY29tcGFyZVt0aGlzLnRhcmdldF0gKXtcbi8vICAgICAgICAgY29tcCA9IHRoaXMuY29tcGFyZVt0aGlzLnRhcmdldF0uY29tcGFyZVxuLy8gICAgICAgICBvcGVyYXRvciAgPSB0aGlzLmNvbXBhcmVbdGhpcy50YXJnZXRdLm9wZXJhdG9yXG4vLyAgICAgICB9XG4gICAgICBcbi8vICAgICAgICAgaWYgKHR5cGVvZiBjb21wID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICBcbi8vICAgICAgICAgICAgIHRvVmFsaWRhdGUgPSBbXTtcbi8vICAgICAgICAgICAgIGNvbXAuZm9yRWFjaCggY29tcGFyZSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgdG9WYWxpZGF0ZS5wdXNoKGluQXJyYXkoZGF0YSwgY29tcGFyZSwgdGhpcy52YWx1ZSkpO1xuLy8gICAgICAgICAgICAgfSlcbi8vICAgICAgICAgICAgIHJldHVybiB0aGlzLm11bHRpQ29tcGFyZShkYXRhLCB0b1ZhbGlkYXRlLCB0aGlzLnZhbHVlKVxuXG4vLyAgICAgICAgIH1lbHNle1xuLy8gICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlQ29tcGFyZShkYXRhLCB0aGlzLnZhbHVlLCBjb21wLCBvcGVyYXRvcilcbi8vICAgICAgICAgfVxuXG4vLyB9XG5SYWRpby5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbihkYXRhKXtcbiAgICBpZiAodGhpcy52YWx1ZS5sZW5ndGggPT09IDAgfHwgdGhpcy52YWx1ZS5sZW5ndGggPT09IDEgJiYgdGhpcy52YWx1ZVswXSA9PT0gXCJcIikgcmV0dXJuIHRydWU7XG5cbiAgICBsZXQgaXNWYWxpZGF0ZWQgPSBpbkFycmF5KGRhdGEsIHRoaXMuY29tcGFyZSwgdGhpcy52YWx1ZSk7XG5cbiAgICBcbiAgICBpc1ZhbGlkYXRlZCA9IHR5cGVvZiBpc1ZhbGlkYXRlZCAhPSAnb2JqZWN0JyA/IFtpc1ZhbGlkYXRlZF0gOiBpc1ZhbGlkYXRlZFxuICAgIGlmKCBpc1ZhbGlkYXRlZCApIHtcblxuICAgICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkLmZpbHRlciggdiA9PiB0aGlzLnZhbHVlLmluZGV4T2YoIFN0cmluZyh2KSApID4gLTEpO1xuICAgICAgICBpc1ZhbGlkYXRlZCA9IFsuLi5uZXcgU2V0KGlzVmFsaWRhdGVkKV07XG5cbiAgICAgICAgaXNWYWxpZGF0ZWQgPSB0aGlzLm9wZXJhdG9yICE9PSBcImFuZFwiID8gIGlzVmFsaWRhdGVkLmxlbmd0aCA+IDAgOiBpc1ZhbGlkYXRlZC5sZW5ndGggPT09IHRoaXMudmFsdWUubGVuZ3RoIDtcblxuICAgICAgICByZXR1cm4gaXNWYWxpZGF0ZWQ7XG5cbiAgICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xuXG59XG5cblJhZGlvLnByb3RvdHlwZS5tdWx0aUNvbXBhcmUgPSBmdW5jdGlvbiggZGF0YSwgdG9WYWxpZGF0ZSwgdmFsdWUgKXtcblxuICAgIGlmICggdG9WYWxpZGF0ZSApIHtcbiAgICAgICAgaWYgKHRvVmFsaWRhdGVbMF0gIT09IFwiXCIgJiYgdG9WYWxpZGF0ZVsxXSAhPT0gXCJcIikge1xuICAgICAgICAgICAgaXNWYWxpZGF0ZWQgPSB2YWx1ZSA+PSB0b1ZhbGlkYXRlWzBdICYmIHZhbHVlIDw9IHRvVmFsaWRhdGVbMV1cbiAgICAgICAgfWVsc2UgaWYodG9WYWxpZGF0ZVswXSAhPT0gXCJcIiAmJiB0b1ZhbGlkYXRlWzFdID09PSBcIlwiKXtcbiAgICAgICAgICAgIGlzVmFsaWRhdGVkID0gdmFsdWUgPj0gdG9WYWxpZGF0ZVswXVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoIXRvVmFsaWRhdGVbMF0gJiYgdG9WYWxpZGF0ZVsxXSB8fCB0b1ZhbGlkYXRlWzBdID09PSBcIlwiICYmIHRvVmFsaWRhdGVbMV0gKXtcbiAgICAgICAgICAgIGlzVmFsaWRhdGVkID0gdmFsdWUgPD0gdG9WYWxpZGF0ZVsxXVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlzVmFsaWRhdGVkXG4gICAgfVxuICAgICBlbHNlIHJldHVybiBmYWxzZTtcbn1cblxuUmFkaW8ucHJvdG90eXBlLnNpbmdsZUNvbXBhcmUgPSBmdW5jdGlvbiggZGF0YSwgdmFsdWUsIGNvbXBhcmUsIG9wZXJhdG9yICl7XG4gICAgXG4gICAgLy8gaWYoIWNvbXBhcmUpIHJldHVyblxuICAgIGxldCBpc1ZhbGlkYXRlZCA9IGluQXJyYXkoZGF0YSwgY29tcGFyZSwgdmFsdWUpO1xuICAgIFxuICAgIGlmKCBpc1ZhbGlkYXRlZCApIHtcblxuICAgICAgICBpc1ZhbGlkYXRlZCA9IHR5cGVvZiBpc1ZhbGlkYXRlZCAhPSAnb2JqZWN0JyA/IFtpc1ZhbGlkYXRlZF0gOiBpc1ZhbGlkYXRlZFxuICAgICAgICBpZiAob3BlcmF0b3IgPT09IFwiYW5kXCIpIHtcbiAgICAgICAgICAgIGlzVmFsaWRhdGVkID0gaXNWYWxpZGF0ZWQubGVuZ3RoID09PSB2YWx1ZS5sZW5ndGggO1xuICAgICAgICAgICAgaXNWYWxpZGF0ZWQgPSBpc1ZhbGlkYXRlZC5maWx0ZXIoIHYgPT4gdmFsdWUuaW5kZXhPZiggU3RyaW5nKHYpICkgPiAtMSk7XG4gICAgICAgICAgICBpc1ZhbGlkYXRlZCA9IFsuLi5uZXcgU2V0KGlzVmFsaWRhdGVkKV07XG4gICAgICAgIH1lbHNlIGlmIChvcGVyYXRvciA9PT0gXCJvclwiKXtcbiAgICAgICAgICAgIGlzVmFsaWRhdGVkID0gaXNWYWxpZGF0ZWQuZmlsdGVyKCB2ID0+IHZhbHVlLmluZGV4T2YoIFN0cmluZyh2KSApID4gLTEpO1xuICAgICAgICAgICAgaXNWYWxpZGF0ZWQgPSBbLi4ubmV3IFNldChpc1ZhbGlkYXRlZCldO1xuICAgICAgICAgICAgaXNWYWxpZGF0ZWQgPSBpc1ZhbGlkYXRlZC5sZW5ndGggPiAwXG4gICAgICAgIH1lbHNlIGlmIChvcGVyYXRvciA9PT0gXCI+XCIpe1xuICAgICAgICAgICAgaXNWYWxpZGF0ZWQgPSBpc1ZhbGlkYXRlZCA+IHZhbHVlWzBdXG4gICAgICAgIH1lbHNlIGlmIChvcGVyYXRvciA9PT0gXCI+PVwiKXtcbiAgICAgICAgICAgIGlzVmFsaWRhdGVkID0gaXNWYWxpZGF0ZWQgPj0gdmFsdWVbMF1cbiAgICAgICAgfWVsc2UgaWYgKG9wZXJhdG9yID09PSBcIjw9XCIpe1xuICAgICAgICAgICAgaXNWYWxpZGF0ZWQgPSBpc1ZhbGlkYXRlZCA8PSB2YWx1ZVswXVxuICAgICAgICB9ZWxzZSBpZiAob3BlcmF0b3IgPT09IFwiPFwiKXtcbiAgICAgICAgICAgIGlzVmFsaWRhdGVkID0gaXNWYWxpZGF0ZWQgPCB2YWx1ZVswXVxuICAgICAgICB9ZWxzZSBpZiAob3BlcmF0b3IgPT09IFwiPVwiKXtcbiAgICAgICAgICAgIGlzVmFsaWRhdGVkID0gaXNWYWxpZGF0ZWQgPT09IHZhbHVlWzBdXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzVmFsaWRhdGVkO1xuXG4gICAgfSBlbHNlIHJldHVybiBmYWxzZTtcblxuXG59XG5cblJhZGlvLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgICAvLyBHZXQgYWxsIGlucHV0cyBmcm9tIHRoaXMgbmFtZVxuICAgIGNvbnN0IGlucHV0cyA9IG9wdGlvbnMuZWwuZm9ybU9iai5xdWVyeVNlbGVjdG9yQWxsKGBbbmFtZT1cIiR7dGhpcy5uYW1lfVwiXWApXG4gICAgLy8gUmV0dXJuIHRoZSBjaGVja2VkIGlucHV0c1xuICAgIGNvbnN0IGNoZWNrZWQgPSBbLi4uaW5wdXRzXS5maWx0ZXIoIGlucHV0ID0+IGlucHV0LmNoZWNrZWQgKTtcblxuICAgIC8vIEluc2VydCB2YWx1ZSBpbiBpbnN0YW5jZVxuICAgIHRoaXMudmFsdWUgPSBbLi4uY2hlY2tlZF0ubWFwKCBpbnB1dCA9PiBpbnB1dC52YWx1ZSApXG4gICAgdGhpcy5uYW1lcyA9IFsuLi5jaGVja2VkXS5tYXAoIGlucHV0ID0+IGlucHV0LmdldEF0dHJpYnV0ZSgnaWQnKSAmJiB0aGlzLmlkID8gaW5wdXQuZ2V0QXR0cmlidXRlKCdpZCcpIDogaW5wdXQudmFsdWUgKTtcbn1cblJhZGlvLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKXtcblxuICAgIGNvbnN0IGlucHV0cyA9IG9wdGlvbnMuZm9ybU9iai5xdWVyeVNlbGVjdG9yQWxsKGBbbmFtZT1cIiR7dGhpcy5uYW1lfVwiXWApXG5cbiAgICBjb25zdCBjaGVja2VkID0gWy4uLmlucHV0c10uZm9yRWFjaCggaW5wdXQgPT4ge1xuICAgICAgICBjb25zdCBhdHRyID0gaW5wdXQuZ2V0QXR0cmlidXRlKCdpZCcpICYmIHRoaXMuaWQgPyBpbnB1dC5nZXRBdHRyaWJ1dGUoJ2lkJykgOiBpbnB1dC52YWx1ZSA7XG5cbiAgICAgICAgaWYodGhpcy52YWx1ZS5pbmRleE9mKGlucHV0LnZhbHVlKSA+IC0xKXtcbiAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsICdjaGVja2VkJylcbiAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSB0cnVlXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaW5wdXQucmVtb3ZlQXR0cmlidXRlKFwiY2hlY2tlZFwiKVxuICAgICAgICB9IFxuICAgIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQURBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBTkE7QUFDQTtBQURBO0FBT0E7QUFBQTtBQUNBO0FBUkE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBTUE7QUFDQTtBQVJBO0FBQ0E7QUFEQTtBQVFBO0FBQUE7QUFDQTtBQVRBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUNBO0FBREE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZkE7QUFBQTtBQUFBO0FBQ0E7QUFHQTtBQVdBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/Filter/Inputs/Radio.js\\n\');\n    },\n    "./src/Filter/Inputs/Range.js":\n    /*!************************************!*\\\n      !*** ./src/Filter/Inputs/Range.js ***!\n      \\************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'var _require = __webpack_require__(/*! ../../Helpers/Array */ "./src/Helpers/Array.js"),\\n    inArray = _require.inArray;\\n\\nmodule.exports = function () {\\n  return new Range();\\n};\\n\\nfunction Range() {\\n  this.name = false;\\n  this.compare = false;\\n  this.url_name = false;\\n  this.min = {\\n    default: false,\\n    value: false,\\n    name: false,\\n    min: false\\n  };\\n  this.max = {\\n    default: false,\\n    value: false,\\n    name: false,\\n    max: false\\n  };\\n  this.multiple = false;\\n  this.operator = "or";\\n  this.relation = "and";\\n}\\n\\nRange.prototype.validate = function (data) {\\n  data.inputs = [];\\n\\n  if (!this.multiple) {\\n    return this.validateMin(data);\\n  }\\n\\n  if (this.multiple) {\\n    var isMin = this.validateMin(data);\\n    var isMax = this.validateMax(data);\\n    return isMin && isMax;\\n  }\\n};\\n\\nRange.prototype.update = function (options) {\\n  var isValidated;\\n\\n  if (!this.multiple) {\\n    var input = this.name ? options.el.formObj.querySelector("[name=\\\\"".concat(this.name, "\\\\"]")) : options.el.formObj.querySelector("[name=\\\\"".concat(this.min.name, "\\\\"]"));\\n    isValidated = this.updateMin(input);\\n  }\\n\\n  if (this.multiple) {\\n    var inputMin = options.el.formObj.querySelector("[name=\\\\"".concat(this.min.name, "\\\\"]"));\\n    var inputMax = options.el.formObj.querySelector("[name=\\\\"".concat(this.max.name, "\\\\"]"));\\n    this.updateMin(inputMin);\\n    this.updateMax(inputMax);\\n  }\\n};\\n\\nRange.prototype.updateMin = function (input) {\\n  this.min.value = input.value;\\n};\\n\\nRange.prototype.updateMax = function (input) {\\n  this.max.value = input.value;\\n};\\n\\nRange.prototype.validateMin = function (data) {\\n  var isValidated = inArray(data, this.compare, this.min.value);\\n  return Number(isValidated) >= Number(this.min.value);\\n};\\n\\nRange.prototype.validateMax = function (data) {\\n  var isValidated = inArray(data, this.compare, this.max.value);\\n  return Number(isValidated) <= Number(this.max.value);\\n};\\n\\nRange.prototype.create = function (options, values) {\\n  values = values[0].split(\\\'-\\\');\\n  var inputMin = this.name ? options.formObj.querySelector("[name=\\\\"".concat(this.name, "\\\\"]")) : options.formObj.querySelector("[name=\\\\"".concat(this.min.name, "\\\\"]"));\\n  inputMin.setAttribute(\\\'value\\\', values[0]);\\n  this.min.value = values[0];\\n  this.min.min = inputMin.getAttribute(\\\'min\\\');\\n  inputMin.value = values[0];\\n\\n  if (values[1]) {\\n    var inputMax = options.formObj.querySelector("[name=\\\\"".concat(this.max.name, "\\\\"]"));\\n    inputMax.setAttribute(\\\'value\\\', values[1]);\\n    this.max.max = inputMin.getAttribute(\\\'max\\\');\\n    this.max.value = values[1];\\n    inputMax.value = values[1];\\n  }\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL0lucHV0cy9SYW5nZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0FCQy8uL3NyYy9GaWx0ZXIvSW5wdXRzL1JhbmdlLmpzP2FhYzciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHsgaW5BcnJheSB9ICA9IHJlcXVpcmUgKCcuLi8uLi9IZWxwZXJzL0FycmF5JyApO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHsgcmV0dXJuIG5ldyBSYW5nZSgpIH1cblxuZnVuY3Rpb24gUmFuZ2UoKXtcbiAgICB0aGlzLm5hbWUgICAgPSBmYWxzZVxuICAgIHRoaXMuY29tcGFyZSA9IGZhbHNlXG4gICAgdGhpcy51cmxfbmFtZT0gZmFsc2VcbiAgICB0aGlzLm1pbiA9IHtcbiAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgbmFtZTogZmFsc2UsXG4gICAgICAgIG1pbjogZmFsc2VcbiAgICB9XG4gICAgdGhpcy5tYXggPSB7XG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICAgIG5hbWU6IGZhbHNlLFxuICAgICAgICBtYXg6IGZhbHNlXG4gICAgfVxuICAgIHRoaXMubXVsdGlwbGU9IGZhbHNlXG4gICAgdGhpcy5vcGVyYXRvcj0gXCJvclwiXG4gICAgdGhpcy5yZWxhdGlvbj0gXCJhbmRcIlxuXG59XG5cblJhbmdlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKXtcbiAgICBkYXRhLmlucHV0cyA9IFtdXG4gICAgaWYoIXRoaXMubXVsdGlwbGUpIHJldHVybiB0aGlzLnZhbGlkYXRlTWluKCBkYXRhICk7XG5cbiAgICBpZih0aGlzLm11bHRpcGxlKSB7XG4gICAgICAgIGNvbnN0IGlzTWluID0gdGhpcy52YWxpZGF0ZU1pbiggZGF0YSApO1xuICAgICAgICBjb25zdCBpc01heCA9IHRoaXMudmFsaWRhdGVNYXgoIGRhdGEgKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpc01pbiAmJiBpc01heFxuICAgIH1cbn1cblxuXG5cblJhbmdlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgICBsZXQgaXNWYWxpZGF0ZWQ7XG5cbiAgICBpZighdGhpcy5tdWx0aXBsZSl7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5uYW1lID8gb3B0aW9ucy5lbC5mb3JtT2JqLnF1ZXJ5U2VsZWN0b3IoYFtuYW1lPVwiJHt0aGlzLm5hbWV9XCJdYCkgOiBvcHRpb25zLmVsLmZvcm1PYmoucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke3RoaXMubWluLm5hbWV9XCJdYClcbiAgICAgICAgaXNWYWxpZGF0ZWQgPSB0aGlzLnVwZGF0ZU1pbiggaW5wdXQgKTtcbiAgICB9XG5cbiAgICBpZih0aGlzLm11bHRpcGxlKSB7XG4gICAgICAgIGNvbnN0IGlucHV0TWluID0gb3B0aW9ucy5lbC5mb3JtT2JqLnF1ZXJ5U2VsZWN0b3IoYFtuYW1lPVwiJHt0aGlzLm1pbi5uYW1lfVwiXWApXG4gICAgICAgIGNvbnN0IGlucHV0TWF4ID0gb3B0aW9ucy5lbC5mb3JtT2JqLnF1ZXJ5U2VsZWN0b3IoYFtuYW1lPVwiJHt0aGlzLm1heC5uYW1lfVwiXWApXG5cbiAgICAgICAgdGhpcy51cGRhdGVNaW4oIGlucHV0TWluICk7XG4gICAgICAgIHRoaXMudXBkYXRlTWF4KCBpbnB1dE1heCApO1xuICAgIH1cblxuICAgIFxufVxuXG5SYW5nZS5wcm90b3R5cGUudXBkYXRlTWluID0gZnVuY3Rpb24gKCBpbnB1dCApe1xuICAgIHRoaXMubWluLnZhbHVlID0gaW5wdXQudmFsdWVcbn1cblJhbmdlLnByb3RvdHlwZS51cGRhdGVNYXggPSBmdW5jdGlvbiAoIGlucHV0ICl7XG4gICAgdGhpcy5tYXgudmFsdWUgPSBpbnB1dC52YWx1ZVxufVxuXG5SYW5nZS5wcm90b3R5cGUudmFsaWRhdGVNaW4gPSBmdW5jdGlvbiAoIGRhdGEgKXtcbiAgICBsZXQgaXNWYWxpZGF0ZWQgPSBpbkFycmF5KGRhdGEsIHRoaXMuY29tcGFyZSwgdGhpcy5taW4udmFsdWUpO1xuICAgIHJldHVybiBOdW1iZXIoaXNWYWxpZGF0ZWQpID49IE51bWJlcih0aGlzLm1pbi52YWx1ZSk7XG59XG5SYW5nZS5wcm90b3R5cGUudmFsaWRhdGVNYXggPSBmdW5jdGlvbiAoIGRhdGEgKXtcbiAgICBsZXQgaXNWYWxpZGF0ZWQgPSBpbkFycmF5KGRhdGEsIHRoaXMuY29tcGFyZSwgdGhpcy5tYXgudmFsdWUpO1xuXG4gICAgcmV0dXJuIE51bWJlcihpc1ZhbGlkYXRlZCkgPD0gTnVtYmVyKHRoaXMubWF4LnZhbHVlKTtcbn1cblxuUmFuZ2UucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMsIHZhbHVlcyl7XG4gICAgXG4gICAgdmFsdWVzID0gdmFsdWVzWzBdLnNwbGl0KCctJyk7XG4gICAgXG4gICAgY29uc3QgaW5wdXRNaW4gPSB0aGlzLm5hbWUgPyBvcHRpb25zLmZvcm1PYmoucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke3RoaXMubmFtZX1cIl1gKSA6IG9wdGlvbnMuZm9ybU9iai5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7dGhpcy5taW4ubmFtZX1cIl1gKVxuICAgICAgIFxuICAgIGlucHV0TWluLnNldEF0dHJpYnV0ZSgndmFsdWUnLCB2YWx1ZXNbMF0pXG4gICAgdGhpcy5taW4udmFsdWUgPSB2YWx1ZXNbMF1cbiAgICB0aGlzLm1pbi5taW4gPSBpbnB1dE1pbi5nZXRBdHRyaWJ1dGUoJ21pbicpXG4gICAgaW5wdXRNaW4udmFsdWUgPSB2YWx1ZXNbMF1cblxuICAgIGlmKHZhbHVlc1sxXSl7XG4gICAgICAgIGNvbnN0IGlucHV0TWF4ID0gb3B0aW9ucy5mb3JtT2JqLnF1ZXJ5U2VsZWN0b3IoYFtuYW1lPVwiJHt0aGlzLm1heC5uYW1lfVwiXWApXG4gICAgICAgIGlucHV0TWF4LnNldEF0dHJpYnV0ZSgndmFsdWUnLCB2YWx1ZXNbMV0pXG4gICAgICAgIHRoaXMubWF4Lm1heCA9IGlucHV0TWluLmdldEF0dHJpYnV0ZSgnbWF4JylcbiAgICAgICAgdGhpcy5tYXgudmFsdWUgPSB2YWx1ZXNbMV1cbiAgICAgICAgaW5wdXRNYXgudmFsdWUgPSB2YWx1ZXNbMV1cbiAgICB9XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/Filter/Inputs/Range.js\\n\');\n    },\n    "./src/Filter/Inputs/Search.js":\n    /*!*************************************!*\\\n      !*** ./src/Filter/Inputs/Search.js ***!\n      \\*************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\\n\\nvar Fuse = __webpack_require__(/*! fuse.js */ "./node_modules/fuse.js/dist/fuse.js");\\n\\nmodule.exports = function () {\\n  return new Search();\\n};\\n\\nfunction Search() {\\n  this.name = false;\\n  this.compare = false;\\n  this.url_name = false;\\n  this.relation = "and";\\n  this.value = "";\\n  this.id = true;\\n}\\n\\nSearch.prototype.validate = function (datas) {\\n  var compare = typeof this.compare === "string" ? [this.compare] : this.compare;\\n  var value = _typeof(this.value) === "object" ? this.value[0] : this.value;\\n  var options = {\\n    threshold: 0.4,\\n    keys: compare,\\n    distance: 10000\\n  };\\n  var fuse = new Fuse(datas, options);\\n  return value ? fuse.search(value) : datas;\\n};\\n\\nSearch.prototype.update = function (options) {\\n  // Get all inputs from this name\\n  var input = options.el.formObj.querySelector("[name=\\\\"".concat(this.name, "\\\\"]"));\\n\\n  if (!input) {\\n    return;\\n  }\\n\\n  input.setAttribute(\\\'value\\\', input.value); // Insert value in instance\\n\\n  this.value = input.value;\\n};\\n\\nSearch.prototype.create = function (options) {\\n  var input = options.formObj.querySelector("[name=\\\\"".concat(this.name, "\\\\"]"));\\n\\n  if (!input) {\\n    return;\\n  }\\n\\n  input.setAttribute(\\\'value\\\', this.value); // Insert value in instance\\n\\n  input.value = this.value;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL0lucHV0cy9TZWFyY2guanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BQkMvLi9zcmMvRmlsdGVyL0lucHV0cy9TZWFyY2guanM/MzIxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRnVzZSA9IHJlcXVpcmUgKCdmdXNlLmpzJyApO1xubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7IHJldHVybiBuZXcgU2VhcmNoKCkgfVxuXG5mdW5jdGlvbiBTZWFyY2goKXtcbiAgICB0aGlzLm5hbWUgICAgPSBmYWxzZTtcbiAgICB0aGlzLmNvbXBhcmUgPSBmYWxzZTtcbiAgICB0aGlzLnVybF9uYW1lPSBmYWxzZTtcbiAgICB0aGlzLnJlbGF0aW9uPSBcImFuZFwiXG4gICAgdGhpcy52YWx1ZSAgID0gXCJcIjtcbiAgICB0aGlzLmlkICAgICAgPSB0cnVlXG59XG5cblNlYXJjaC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbihkYXRhcyl7XG5cbiAgICBjb25zdCBjb21wYXJlID0gdHlwZW9mIHRoaXMuY29tcGFyZSA9PT0gXCJzdHJpbmdcIiA/IFt0aGlzLmNvbXBhcmVdIDogdGhpcy5jb21wYXJlXG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdGhpcy52YWx1ZSA9PT0gXCJvYmplY3RcIiA/IHRoaXMudmFsdWVbMF0gOiB0aGlzLnZhbHVlXG5cbiAgICB2YXIgb3B0aW9ucyA9IHsgXG4gICAgICB0aHJlc2hvbGQ6IDAuNCxcbiAgICAgIGtleXM6IGNvbXBhcmUsXG4gICAgICBkaXN0YW5jZTogMTAwMDAsXG4gICAgfVxuICAgIHZhciBmdXNlID0gbmV3IEZ1c2UoZGF0YXMsIG9wdGlvbnMpXG4gICAgcmV0dXJuIHZhbHVlID8gZnVzZS5zZWFyY2godmFsdWUpIDogZGF0YXNcbn1cblxuXG5TZWFyY2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpe1xuICAgIC8vIEdldCBhbGwgaW5wdXRzIGZyb20gdGhpcyBuYW1lXG4gICAgY29uc3QgaW5wdXQgPSBvcHRpb25zLmVsLmZvcm1PYmoucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke3RoaXMubmFtZX1cIl1gKVxuICAgIGlmICghaW5wdXQpIHJldHVyblxuICAgIGlucHV0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCBpbnB1dC52YWx1ZSlcbiAgICAvLyBJbnNlcnQgdmFsdWUgaW4gaW5zdGFuY2VcbiAgICB0aGlzLnZhbHVlID0gaW5wdXQudmFsdWVcblxufVxuU2VhcmNoLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgICBjb25zdCBpbnB1dCA9IG9wdGlvbnMuZm9ybU9iai5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7dGhpcy5uYW1lfVwiXWApXG4gICAgaWYgKCFpbnB1dCkgcmV0dXJuXG4gICAgaW5wdXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHRoaXMudmFsdWUpXG4gICAgLy8gSW5zZXJ0IHZhbHVlIGluIGluc3RhbmNlXG4gICAgaW5wdXQudmFsdWUgPSB0aGlzLnZhbHVlXG59XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/Filter/Inputs/Search.js\\n\');\n    },\n    "./src/Filter/Inputs/Select.js":\n    /*!*************************************!*\\\n      !*** ./src/Filter/Inputs/Select.js ***!\n      \\*************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\\n\\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\\n\\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") { return Array.from(iter); } }\\n\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\\n\\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\\n\\nvar _require = __webpack_require__(/*! ../../Helpers/Array */ "./src/Helpers/Array.js"),\\n    inArray = _require.inArray;\\n\\nmodule.exports = function () {\\n  return new Select();\\n};\\n\\nfunction Select() {\\n  this.name = false;\\n  this.compare = false;\\n  this.url_name = false;\\n  this.multiple = false;\\n  this.operator = "or";\\n  this.relation = "and";\\n  this.value = [];\\n  this.id = true;\\n}\\n\\nSelect.prototype.validate = function (data) {\\n  var _this = this;\\n\\n  if (this.value.length === 0 || this.value.length === 1 && this.value[0] === "") {\\n    return true;\\n  }\\n\\n  var isValidated = inArray(data, this.compare, this.value);\\n  isValidated = _typeof(isValidated) != \\\'object\\\' ? [isValidated] : isValidated;\\n\\n  if (isValidated) {\\n    isValidated = isValidated.filter(function (v) {\\n      return _this.value.indexOf(String(v)) > -1;\\n    });\\n    isValidated = _toConsumableArray(new Set(isValidated));\\n    isValidated = this.operator !== "and" ? isValidated.length > 0 : isValidated.length === this.value.length;\\n    return isValidated;\\n  } else return false;\\n};\\n\\nSelect.prototype.update = function (options) {\\n  var _this2 = this;\\n\\n  // Get all inputs from this name\\n  var inputs = options.el.formObj.querySelectorAll("[name=\\\\"".concat(this.name, "\\\\"] option")); // Return the checked inputs\\n\\n  var checked = _toConsumableArray(inputs).filter(function (input) {\\n    return input.selected;\\n  }); // Insert value in instance\\n\\n\\n  var _a = _toConsumableArray(checked);\\n\\n  var _f = function _f(input) {\\n    return input.value;\\n  };\\n\\n  var _r = [];\\n\\n  for (var _i = 0; _i < _a.length; _i++) {\\n    _r.push(_f(_a[_i], _i, _a));\\n  }\\n\\n  this.value = _r;\\n\\n  var _a2 = _toConsumableArray(checked);\\n\\n  var _f2 = function _f2(input) {\\n    return input.hasAttribute(\\\'id\\\') && _this2.id ? input.getAttribute(\\\'id\\\') : input.value;\\n  };\\n\\n  var _r2 = [];\\n\\n  for (var _i2 = 0; _i2 < _a2.length; _i2++) {\\n    _r2.push(_f2(_a2[_i2], _i2, _a2));\\n  }\\n\\n  this.names = _r2;\\n};\\n\\nSelect.prototype.create = function (options) {\\n  var _this3 = this;\\n\\n  var select = options.formObj.querySelector("[name=\\\\"".concat(this.name, "\\\\"]"));\\n  var inputs = options.formObj.querySelectorAll("[name=\\\\"".concat(this.name, "\\\\"] option"));\\n\\n  var checked = _toConsumableArray(inputs).filter(function (input) {\\n    var attr = _this3.id === true && input.getAttribute(\\\'id\\\') ? input.getAttribute(\\\'id\\\') : input.value;\\n\\n    if (_this3.value.indexOf(attr) > -1) {\\n      input.setAttribute(\\\'selected\\\', \\\'selected\\\');\\n      return input;\\n    }\\n  });\\n\\n  var _a3 = _toConsumableArray(checked);\\n\\n  var _f3 = function _f3(input) {\\n    return input.value;\\n  };\\n\\n  var _r3 = [];\\n\\n  for (var _i3 = 0; _i3 < _a3.length; _i3++) {\\n    _r3.push(_f3(_a3[_i3], _i3, _a3));\\n  }\\n\\n  this.value = _r3;\\n\\n  var _a4 = _toConsumableArray(checked);\\n\\n  var _f4 = function _f4(input) {\\n    return input.getAttribute(\\\'id\\\') ? input.getAttribute(\\\'id\\\') : input.value;\\n  };\\n\\n  var _r4 = [];\\n\\n  for (var _i4 = 0; _i4 < _a4.length; _i4++) {\\n    _r4.push(_f4(_a4[_i4], _i4, _a4));\\n  }\\n\\n  this.names = _r4;\\n  select.selectedOptions = checked;\\n  select.setAttribute(\\\'value\\\', this.value.join(\\\'&\\\'));\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL0lucHV0cy9TZWxlY3QuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BQkMvLi9zcmMvRmlsdGVyL0lucHV0cy9TZWxlY3QuanM/ZDJjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgeyBpbkFycmF5IH0gID0gcmVxdWlyZSAoJy4uLy4uL0hlbHBlcnMvQXJyYXknICk7XG5cbm1vZHVsZS5leHBvcnRzID0gKCkgPT4geyByZXR1cm4gbmV3IFNlbGVjdCgpIH1cbmZ1bmN0aW9uIFNlbGVjdCgpe1xuICAgIHRoaXMubmFtZSAgICA9IGZhbHNlXG4gICAgdGhpcy5jb21wYXJlID0gZmFsc2VcbiAgICB0aGlzLnVybF9uYW1lPSBmYWxzZVxuICAgIHRoaXMubXVsdGlwbGU9IGZhbHNlXG4gICAgdGhpcy5vcGVyYXRvcj0gXCJvclwiXG4gICAgdGhpcy5yZWxhdGlvbj0gXCJhbmRcIlxuICAgIHRoaXMudmFsdWUgICA9IFtdXG4gICAgdGhpcy5pZCAgICAgID0gdHJ1ZVxufVxuXG5cblNlbGVjdC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbihkYXRhKXtcbiAgICBpZiAodGhpcy52YWx1ZS5sZW5ndGggPT09IDAgfHwgdGhpcy52YWx1ZS5sZW5ndGggPT09IDEgJiYgdGhpcy52YWx1ZVswXSA9PT0gXCJcIikgcmV0dXJuIHRydWU7XG5cbiAgICBsZXQgaXNWYWxpZGF0ZWQgPSBpbkFycmF5KGRhdGEsIHRoaXMuY29tcGFyZSwgdGhpcy52YWx1ZSk7XG5cbiAgICBcbiAgICBpc1ZhbGlkYXRlZCA9IHR5cGVvZiBpc1ZhbGlkYXRlZCAhPSAnb2JqZWN0JyA/IFtpc1ZhbGlkYXRlZF0gOiBpc1ZhbGlkYXRlZFxuICAgIGlmKCBpc1ZhbGlkYXRlZCApIHtcblxuICAgICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkLmZpbHRlciggdiA9PiB0aGlzLnZhbHVlLmluZGV4T2YoIFN0cmluZyh2KSApID4gLTEpO1xuICAgICAgICBpc1ZhbGlkYXRlZCA9IFsuLi5uZXcgU2V0KGlzVmFsaWRhdGVkKV07XG5cbiAgICAgICAgaXNWYWxpZGF0ZWQgPSB0aGlzLm9wZXJhdG9yICE9PSBcImFuZFwiID8gIGlzVmFsaWRhdGVkLmxlbmd0aCA+IDAgOiBpc1ZhbGlkYXRlZC5sZW5ndGggPT09IHRoaXMudmFsdWUubGVuZ3RoIDtcblxuICAgICAgICByZXR1cm4gaXNWYWxpZGF0ZWQ7XG5cbiAgICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xuXG59XG5cblNlbGVjdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ob3B0aW9ucyl7XG4gICAgLy8gR2V0IGFsbCBpbnB1dHMgZnJvbSB0aGlzIG5hbWVcbiAgICBjb25zdCBpbnB1dHMgPSBvcHRpb25zLmVsLmZvcm1PYmoucXVlcnlTZWxlY3RvckFsbChgW25hbWU9XCIke3RoaXMubmFtZX1cIl0gb3B0aW9uYClcbiAgICAvLyBSZXR1cm4gdGhlIGNoZWNrZWQgaW5wdXRzXG5cbiAgICBjb25zdCBjaGVja2VkID0gWy4uLmlucHV0c10uZmlsdGVyKCBpbnB1dCA9PiBpbnB1dC5zZWxlY3RlZCApO1xuXG4gICAgLy8gSW5zZXJ0IHZhbHVlIGluIGluc3RhbmNlXG4gICAgdGhpcy52YWx1ZSA9IFsuLi5jaGVja2VkXS5tYXAoIGlucHV0ID0+IGlucHV0LnZhbHVlIClcbiAgICB0aGlzLm5hbWVzID0gWy4uLmNoZWNrZWRdLm1hcCggaW5wdXQgPT4gaW5wdXQuaGFzQXR0cmlidXRlKCdpZCcpICYmIHRoaXMuaWQgPyBpbnB1dC5nZXRBdHRyaWJ1dGUoJ2lkJykgOiBpbnB1dC52YWx1ZSApO1xufVxuXG5TZWxlY3QucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpe1xuICAgIGNvbnN0IHNlbGVjdCA9IG9wdGlvbnMuZm9ybU9iai5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7dGhpcy5uYW1lfVwiXWApO1xuXG4gICAgY29uc3QgaW5wdXRzID0gb3B0aW9ucy5mb3JtT2JqLnF1ZXJ5U2VsZWN0b3JBbGwoYFtuYW1lPVwiJHt0aGlzLm5hbWV9XCJdIG9wdGlvbmApXG4gICAgXG4gICAgY29uc3QgY2hlY2tlZCA9IFsuLi5pbnB1dHNdLmZpbHRlciggaW5wdXQgPT4ge1xuICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5pZCA9PT0gdHJ1ZSAmJiBpbnB1dC5nZXRBdHRyaWJ1dGUoJ2lkJykgPyBpbnB1dC5nZXRBdHRyaWJ1dGUoJ2lkJykgOiBpbnB1dC52YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUuaW5kZXhPZihhdHRyKSA+IC0xKSB7XG4gICAgICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJylcbiAgICAgICAgICAgIHJldHVybiBpbnB1dFxuICAgICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy52YWx1ZSA9IFsuLi5jaGVja2VkXS5tYXAoIGlucHV0ID0+IGlucHV0LnZhbHVlIClcbiAgICB0aGlzLm5hbWVzID0gWy4uLmNoZWNrZWRdLm1hcCggaW5wdXQgPT4gaW5wdXQuZ2V0QXR0cmlidXRlKCdpZCcpID8gaW5wdXQuZ2V0QXR0cmlidXRlKCdpZCcpIDogaW5wdXQudmFsdWUgKTtcblxuICAgIHNlbGVjdC5zZWxlY3RlZE9wdGlvbnMgPSBjaGVja2VkXG4gICAgXG4gICAgXG4gICAgc2VsZWN0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCB0aGlzLnZhbHVlLmpvaW4oJyYnKSlcblxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFQQTtBQUNBO0FBREE7QUFRQTtBQUFBO0FBQ0E7QUFUQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFPQTtBQUNBO0FBVEE7QUFDQTtBQURBO0FBU0E7QUFBQTtBQUNBO0FBVkE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkE7QUFDQTtBQURBO0FBWUE7QUFBQTtBQUNBO0FBYkE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBV0E7QUFDQTtBQWJBO0FBQ0E7QUFEQTtBQWFBO0FBQUE7QUFDQTtBQWRBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQVlBO0FBRUE7QUFHQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/Filter/Inputs/Select.js\\n\');\n    },\n    "./src/Filter/Options/Facette.js":\n    /*!***************************************!*\\\n      !*** ./src/Filter/Options/Facette.js ***!\n      \\***************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'var _require = __webpack_require__(/*! ../../Helpers/Array */ "./src/Helpers/Array.js"),\\n    inArray = _require.inArray;\\n\\nmodule.exports = function () {\\n  return new Facette();\\n}; // TO DO:\\n\\n\\nfunction Facette() {\\n  this.number = false;\\n  this.visible_class = false;\\n  this.hidden_class = false, this.facettes = [];\\n  this.indexs = [];\\n}\\n\\nFacette.prototype.init = function (el) {\\n  var _this = this;\\n\\n  var _loop = function _loop(key) {\\n    var name = _this.facettes[key].compare;\\n    _this.facettes[key][\\\'values\\\'] = [];\\n    var _a = el.datas;\\n\\n    var _f = function _f(d) {\\n      var result = inArray(d, name);\\n\\n      if (_this.facettes[key][\\\'values\\\'].indexOf(result) === -1) {\\n        _this.facettes[key][\\\'values\\\'].push(result);\\n      }\\n    };\\n\\n    for (var _i = 0; _i < _a.length; _i++) {\\n      _f(_a[_i], _i, _a);\\n    }\\n\\n    undefined;\\n  };\\n\\n  for (var key in this.facettes) {\\n    _loop(key);\\n  }\\n};\\n\\nFacette.prototype.update = function (el) {\\n  var _this2 = this;\\n\\n  var _a2 = el.datas;\\n\\n  var _f2 = function _f2(d) {\\n    if (!d.hide) {\\n      return d;\\n    }\\n  };\\n\\n  var _r2 = [];\\n\\n  for (var _i2 = 0; _i2 < _a2.length; _i2++) {\\n    _r2.push(_f2(_a2[_i2], _i2, _a2));\\n  }\\n\\n  var visibles = _r2;\\n  visibles = visibles.filter(function (d) {\\n    return d;\\n  });\\n\\n  var _loop2 = function _loop2(key) {\\n    var name = _this2.facettes[key].compare;\\n    _this2.indexs[key] = [];\\n    var _a3 = visibles;\\n\\n    var _f3 = function _f3(d) {\\n      var result = inArray(d, name);\\n\\n      if (_this2.indexs[key].indexOf(result) === -1) {\\n        _this2.indexs[key].push(result);\\n      }\\n    };\\n\\n    for (var _i3 = 0; _i3 < _a3.length; _i3++) {\\n      _f3(_a3[_i3], _i3, _a3);\\n    }\\n\\n    undefined;\\n    var _a4 = _this2.facettes[key][\\\'values\\\'];\\n\\n    var _f4 = function _f4(r) {\\n      var isIn = _this2.indexs[key].indexOf(r) > -1;\\n      var input = el.formObj.querySelector("[name=\\\\"".concat(key, "\\\\"] [value=\\\\"").concat(r, "\\\\"]")) ? el.formObj.querySelector("[name=\\\\"".concat(key, "\\\\"] [value=\\\\"").concat(r, "\\\\"]")) : el.formObj.querySelector("[name=\\\\"".concat(key, "\\\\"][value=\\\\"").concat(r, "\\\\"]"));\\n\\n      if (input) {\\n        isIn ? input.classList.remove(\\\'noFacette\\\') : input.classList.add(\\\'noFacette\\\');\\n      }\\n    };\\n\\n    for (var _i4 = 0; _i4 < _a4.length; _i4++) {\\n      _f4(_a4[_i4], _i4, _a4);\\n    }\\n\\n    undefined;\\n  };\\n\\n  for (var key in this.facettes) {\\n    _loop2(key);\\n  }\\n};\\n\\nFacette.prototype.compare = function (arr1, arr2) {\\n  var _this3 = this;\\n\\n  if (!arr1 || !arr2) {\\n    return;\\n  }\\n\\n  var result;\\n  var _a5 = arr1;\\n\\n  var _f5 = function _f5(e1, i) {\\n    var _a6 = arr2;\\n\\n    var _f6 = function _f6(e2) {\\n      if (e1.length > 1 && e2.length) {\\n        result = _this3.compare(e1, e2);\\n      } else if (e1 !== e2) {\\n        result = false;\\n      } else {\\n        result = true;\\n      }\\n    };\\n\\n    for (var _i6 = 0; _i6 < _a6.length; _i6++) {\\n      _f6(_a6[_i6], _i6, _a6);\\n    }\\n\\n    return undefined;\\n  };\\n\\n  for (var _i5 = 0; _i5 < _a5.length; _i5++) {\\n    _f5(_a5[_i5], _i5, _a5);\\n  }\\n\\n  undefined;\\n  return result;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL09wdGlvbnMvRmFjZXR0ZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0FCQy8uL3NyYy9GaWx0ZXIvT3B0aW9ucy9GYWNldHRlLmpzP2EwYmMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHsgaW5BcnJheSB9ICA9IHJlcXVpcmUgKCcuLi8uLi9IZWxwZXJzL0FycmF5JyApO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHsgcmV0dXJuIG5ldyBGYWNldHRlKCkgfVxuLy8gVE8gRE86XG5mdW5jdGlvbiBGYWNldHRlKCl7XG4gICAgdGhpcy5udW1iZXIgPSBmYWxzZVxuICAgIHRoaXMudmlzaWJsZV9jbGFzcyA9IGZhbHNlXG4gICAgdGhpcy5oaWRkZW5fY2xhc3MgPSBmYWxzZSxcbiAgICB0aGlzLmZhY2V0dGVzID0gW11cbiAgICB0aGlzLmluZGV4cyA9IFtdO1xufVxuXG5GYWNldHRlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oZWwpIHtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZmFjZXR0ZXMpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuZmFjZXR0ZXNba2V5XS5jb21wYXJlO1xuXG4gICAgICAgIHRoaXMuZmFjZXR0ZXNba2V5XVsndmFsdWVzJ10gPSBbXVxuXG4gICAgICAgIGVsLmRhdGFzLmZvckVhY2goIChkKSA9PiB7XG4gICAgICAgIFxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gaW5BcnJheShkLCBuYW1lKVxuICAgICAgICAgICAgaWYodGhpcy5mYWNldHRlc1trZXldWyd2YWx1ZXMnXS5pbmRleE9mKHJlc3VsdCkgPT09IC0xKSB0aGlzLmZhY2V0dGVzW2tleV1bJ3ZhbHVlcyddLnB1c2gocmVzdWx0KVxuXG4gICAgICAgIH0pXG5cbiAgICB9ICAgICBcbn1cblxuRmFjZXR0ZS5wcm90b3R5cGUudXBkYXRlID0gIGZ1bmN0aW9uKGVsKXtcbiAgICBsZXQgdmlzaWJsZXMgPSBlbC5kYXRhcy5tYXAoIGQgPT57IGlmKCFkLmhpZGUpIHJldHVybiBkfSApICAgIFxuICAgIHZpc2libGVzID0gdmlzaWJsZXMuZmlsdGVyKCBkID0+IGQgKVxuXG4gICAgXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5mYWNldHRlcykge1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5mYWNldHRlc1trZXldLmNvbXBhcmU7XG5cbiAgICAgICAgdGhpcy5pbmRleHNba2V5XSA9IFtdXG4gICAgICAgIHZpc2libGVzLmZvckVhY2goIChkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBpbkFycmF5KGQsIG5hbWUpXG4gICAgICAgICAgICBpZih0aGlzLmluZGV4c1trZXldLmluZGV4T2YocmVzdWx0KSA9PT0gLTEpIHRoaXMuaW5kZXhzW2tleV0ucHVzaChyZXN1bHQpXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5mYWNldHRlc1trZXldWyd2YWx1ZXMnXS5mb3JFYWNoKCByID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzSW4gPSB0aGlzLmluZGV4c1trZXldLmluZGV4T2YocikgPiAtMVxuXG4gICAgICAgICAgICBjb25zdCBpbnB1dCA9IGVsLmZvcm1PYmoucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke2tleX1cIl0gW3ZhbHVlPVwiJHtyfVwiXWApID8gZWwuZm9ybU9iai5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7a2V5fVwiXSBbdmFsdWU9XCIke3J9XCJdYCkgOmVsLmZvcm1PYmoucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke2tleX1cIl1bdmFsdWU9XCIke3J9XCJdYClcbiAgICAgICAgICAgIGlmKGlucHV0KXtcbiAgICAgICAgICAgICAgICBpc0luID8gaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgnbm9GYWNldHRlJykgOiBpbnB1dC5jbGFzc0xpc3QuYWRkKCdub0ZhY2V0dGUnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgfSAgICBcblxufVxuXG5GYWNldHRlLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24oYXJyMSxhcnIyKXtcbiAgXG4gIFxuICAgIGlmKCFhcnIxICB8fCAhYXJyMikgcmV0dXJuXG4gICAgXG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgXG4gICAgYXJyMS5mb3JFYWNoKChlMSxpKT0+YXJyMi5mb3JFYWNoKGUyPT57XG4gICAgICAgIFxuICAgICAgICAgICAgaWYoZTEubGVuZ3RoID4gMSAmJiBlMi5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuY29tcGFyZShlMSxlMik7XG4gICAgICAgICAgICB9ZWxzZSBpZihlMSAhPT0gZTIgKXtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIClcbiAgICBcbiAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgXG5cbiAgfSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFHQTtBQUVBO0FBTEE7QUFDQTtBQURBO0FBU0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFiQTtBQUFBO0FBQUE7QUFDQTtBQU1BO0FBUEE7QUFDQTtBQUNBO0FBQUE7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRkE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUhBO0FBTUE7QUFFQTtBQVJBO0FBQ0E7QUFEQTtBQVVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBYkE7QUFBQTtBQUFBO0FBQ0E7QUFRQTtBQVRBO0FBQ0E7QUFEQTtBQWVBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUF2QkE7QUFBQTtBQUFBO0FBQ0E7QUFhQTtBQWRBO0FBQ0E7QUFJQTtBQUFBO0FBa0JBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBREE7QUFPQTtBQUNBO0FBREE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFWQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFDQTtBQVJBO0FBQUE7QUFBQTtBQUNBO0FBTUE7QUFZQTtBQUdBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/Filter/Options/Facette.js\\n\');\n    },\n    "./src/Filter/Options/LoadMore.js":\n    /*!****************************************!*\\\n      !*** ./src/Filter/Options/LoadMore.js ***!\n      \\****************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\\n\\nfunction _nonIterableSpread() { throw new TypeError(\\"Invalid attempt to spread non-iterable instance\\"); }\\n\\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \\"[object Arguments]\\") { return Array.from(iter); } }\\n\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\\n\\nvar _require = __webpack_require__(/*! ../../Helpers/Array */ \\"./src/Helpers/Array.js\\"),\\n    inArray = _require.inArray;\\n\\nvar _require2 = __webpack_require__(/*! ../../Helpers/Fetch */ \\"./src/Helpers/Fetch.js\\"),\\n    Fetch = _require2.Fetch;\\n\\nmodule.exports = function () {\\n  return new LoadMore();\\n};\\n\\nfunction LoadMore() {\\n  this.url = {\\n    params: \'\',\\n    add: 0\\n  };\\n  this.limit = false;\\n  this.number = false;\\n  this.action = \'\';\\n  this.thresold = \'\';\\n  this.target = \'\';\\n  this.search = \'\';\\n  this.canUpdate = true;\\n  this.onStart = false;\\n  this.onComplete = false;\\n}\\n\\nLoadMore.prototype.init = function (el) {\\n  if (this.action === \'click\') {\\n    this.initClick(el);\\n  } else if (this.action === \'scroll\') {\\n    this.initScroll(el);\\n  }\\n};\\n\\nLoadMore.prototype.initClick = function (el) {\\n  var _this = this;\\n\\n  this.target = document.querySelector(this.target);\\n  this.search = new URLSearchParams(el.options.url);\\n  this.target.addEventListener(\'click\', function (e) {\\n    if (_this.canUpdate) {\\n      _this.update(el);\\n    }\\n  });\\n};\\n\\nLoadMore.prototype.initScroll = function (el) {\\n  var _this2 = this;\\n\\n  this.target = document.querySelector(this.target);\\n  this.search = new URLSearchParams(el.options.url);\\n  var observer;\\n  var options = {\\n    rootMargin: \\"\\".concat(this.thresold, \\"px\\")\\n  };\\n\\n  var callback = function callback(entries, observer) {\\n    var _a = entries;\\n\\n    var _f = function _f(entry) {\\n      if (entry.isIntersecting && _this2.canUpdate) {\\n        _this2.update(el);\\n      }\\n    };\\n\\n    for (var _i = 0; _i < _a.length; _i++) {\\n      _f(_a[_i], _i, _a);\\n    }\\n\\n    undefined;\\n  };\\n\\n  observer = new IntersectionObserver(callback, options);\\n  observer.observe(this.target);\\n};\\n\\nLoadMore.prototype.update = function (el) {\\n  var _this3 = this;\\n\\n  var number = this.search.get(this.url.params);\\n  var newNumber = Number(number) + Number(this.url.add);\\n  this.search.set(this.url.params, newNumber);\\n  el.options.url = decodeURIComponent(decodeURIComponent(this.search.toString()));\\n  var start = this.onStart;\\n  var getdatas = fetch(el.options.url, el).then(function (response) {\\n    return response.json();\\n  }).then(function (json) {\\n    _this3.Fetch(null, json, el);\\n  }).catch(function (error) {\\n    return _this3.Fetch(error, null);\\n  });\\n  var complete = this.onComplete;\\n\\n  if (start) {\\n    start();\\n  }\\n\\n  Promise.all([start]).then(function (getdatas) {\\n    return getdatas;\\n  });\\n\\n  if (complete) {\\n    Promise.all([start, getdatas]).then(function () {\\n      return complete();\\n    });\\n  }\\n};\\n\\nLoadMore.prototype.Fetch = function (error, success, el) {\\n  if (error) {\\n    console.log(error);\\n  } else {\\n    this.datas = success;\\n    this.results = el.results;\\n\\n    if (el.results.path) {\\n      this.datas = inArray(this.datas, el.results.path);\\n    }\\n\\n    if (el.results.template) {\\n      this.container = document.querySelector(el.results.container);\\n    }\\n\\n    var newDatas = el.alldatas.filtered(this.datas, el);\\n    el.datas = [].concat(_toConsumableArray(el.datas), _toConsumableArray(newDatas));\\n    this.number = el.datas.length;\\n\\n    if (this.limit && this.number) {\\n      this.url.add = this.limit - this.number > this.url.add ? this.url.add : this.limit - this.number;\\n      this.canUpdate = this.url.add > 0 ? true : false;\\n    }\\n\\n    if (!this.canUpdate) {\\n      this.target.classList.add(\'abc-limited\');\\n    }\\n\\n    el.form.fn.do();\\n\\n    if (el.debug) {\\n      console.info(el.datas.length + \\" datas loaded\\");\\n    }\\n  }\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL09wdGlvbnMvTG9hZE1vcmUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BQkMvLi9zcmMvRmlsdGVyL09wdGlvbnMvTG9hZE1vcmUuanM/YWMzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgeyBpbkFycmF5IH0gID0gcmVxdWlyZSAoJy4uLy4uL0hlbHBlcnMvQXJyYXknICk7XG52YXIge0ZldGNofSA9IHJlcXVpcmUoICcuLi8uLi9IZWxwZXJzL0ZldGNoJyApXG5cbm1vZHVsZS5leHBvcnRzID0gKCkgPT4geyByZXR1cm4gbmV3IExvYWRNb3JlKCkgfVxuXG5mdW5jdGlvbiBMb2FkTW9yZSgpe1xuICAgIHRoaXMudXJsID0gIHtcbiAgICAgICAgcGFyYW1zIDogJycsXG4gICAgICAgIGFkZCA6IDAsXG4gICAgfVxuICAgIHRoaXMubGltaXQgPSBmYWxzZVxuICAgIHRoaXMubnVtYmVyID0gZmFsc2VcblxuICAgIHRoaXMuYWN0aW9uID0gJydcbiAgICB0aGlzLnRocmVzb2xkID0gJydcbiAgICB0aGlzLnRhcmdldCA9ICcnXG4gICAgdGhpcy5zZWFyY2ggPSAnJ1xuICAgIHRoaXMuY2FuVXBkYXRlID0gdHJ1ZVxuXG4gICAgdGhpcy5vblN0YXJ0ID0gZmFsc2VcbiAgICB0aGlzLm9uQ29tcGxldGUgPSBmYWxzZVxufVxuXG5Mb2FkTW9yZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKGVsKXtcbiAgICBpZih0aGlzLmFjdGlvbiA9PT0gJ2NsaWNrJykgdGhpcy5pbml0Q2xpY2soZWwpXG4gICAgZWxzZSBpZih0aGlzLmFjdGlvbiA9PT0gJ3Njcm9sbCcpIHRoaXMuaW5pdFNjcm9sbChlbClcbiAgICBcbn1cbkxvYWRNb3JlLnByb3RvdHlwZS5pbml0Q2xpY2sgPSBmdW5jdGlvbihlbCl7XG4gICAgdGhpcy50YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMudGFyZ2V0KVxuICAgIHRoaXMuc2VhcmNoID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhlbC5vcHRpb25zLnVybClcbiAgICB0aGlzLnRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICBpZih0aGlzLmNhblVwZGF0ZSkgdGhpcy51cGRhdGUoZWwpO1xuICAgIH0pXG59XG5Mb2FkTW9yZS5wcm90b3R5cGUuaW5pdFNjcm9sbCA9IGZ1bmN0aW9uKGVsKXtcbiAgICB0aGlzLnRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy50YXJnZXQpXG4gICAgdGhpcy5zZWFyY2ggPSBuZXcgVVJMU2VhcmNoUGFyYW1zKGVsLm9wdGlvbnMudXJsKVxuXG4gICAgbGV0IG9ic2VydmVyO1xuXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHJvb3RNYXJnaW4gOiBgJHt0aGlzLnRocmVzb2xkfXB4YFxuICAgIH07XG5cbiAgICBjb25zdCBjYWxsYmFjayA9IChlbnRyaWVzLCBvYnNlcnZlcikgPT4geyBcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgICAgIGlmKGVudHJ5LmlzSW50ZXJzZWN0aW5nICYmIHRoaXMuY2FuVXBkYXRlKSB0aGlzLnVwZGF0ZShlbCk7IFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGNhbGxiYWNrLCBvcHRpb25zKTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRoaXMudGFyZ2V0KTtcbn1cbkxvYWRNb3JlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihlbCl7XG5cbiAgICBjb25zdCBudW1iZXIgPSB0aGlzLnNlYXJjaC5nZXQodGhpcy51cmwucGFyYW1zKTtcbiAgICBjb25zdCBuZXdOdW1iZXIgPSBOdW1iZXIobnVtYmVyKSArIE51bWJlcih0aGlzLnVybC5hZGQpXG4gICAgdGhpcy5zZWFyY2guc2V0KHRoaXMudXJsLnBhcmFtcywgbmV3TnVtYmVyKTtcblxuICAgIGVsLm9wdGlvbnMudXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KGRlY29kZVVSSUNvbXBvbmVudCggdGhpcy5zZWFyY2gudG9TdHJpbmcoKSApKTtcbiAgICBcbiAgICBcbiAgICBjb25zdCBzdGFydCA9IHRoaXMub25TdGFydDtcbiAgICBjb25zdCBnZXRkYXRhcyA9ICBmZXRjaChlbC5vcHRpb25zLnVybCwgZWwpICBcbiAgICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSApXG4gICAgICAgIC50aGVuKCBqc29uID0+IHsgdGhpcy5GZXRjaChudWxsLCBqc29uLCBlbCkgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB0aGlzLkZldGNoKGVycm9yLCBudWxsKSlcbiAgICBjb25zdCBjb21wbGV0ZSA9IHRoaXMub25Db21wbGV0ZTtcbiAgICBcbiAgICBpZihzdGFydCkgc3RhcnQoKTtcbiAgICBQcm9taXNlLmFsbChbc3RhcnRdKS50aGVuKCAoZ2V0ZGF0YXMpID0+IGdldGRhdGFzKTtcbiAgICBpZihjb21wbGV0ZSkgUHJvbWlzZS5hbGwoW3N0YXJ0LCBnZXRkYXRhc10pLnRoZW4oICgpID0+IGNvbXBsZXRlKCkgKTtcbiAgICBcbn1cblxuTG9hZE1vcmUucHJvdG90eXBlLkZldGNoID0gZnVuY3Rpb24oZXJyb3IsIHN1Y2Nlc3MsIGVsKXtcbiAgICAgICAgaWYoZXJyb3IpIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgZWxzZSB7IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmRhdGFzID0gc3VjY2VzcztcbiAgICAgICAgICAgIHRoaXMucmVzdWx0cyA9IGVsLnJlc3VsdHNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoIGVsLnJlc3VsdHMucGF0aCApIHRoaXMuZGF0YXMgPSBpbkFycmF5KHRoaXMuZGF0YXMsIGVsLnJlc3VsdHMucGF0aCk7XG4gICAgICAgICAgICBpZiggZWwucmVzdWx0cy50ZW1wbGF0ZSApIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbC5yZXN1bHRzLmNvbnRhaW5lcilcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgbmV3RGF0YXMgPSBlbC5hbGxkYXRhcy5maWx0ZXJlZCh0aGlzLmRhdGFzLCBlbClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBlbC5kYXRhcyA9IFsuLi5lbC5kYXRhcywgLi4ubmV3RGF0YXNdXG5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5udW1iZXIgPSBlbC5kYXRhcy5sZW5ndGhcblxuICAgICAgICAgICAgaWYodGhpcy5saW1pdCAmJiB0aGlzLm51bWJlcil7XG4gICAgICAgICAgICAgICAgdGhpcy51cmwuYWRkID0gdGhpcy5saW1pdCAtIHRoaXMubnVtYmVyID4gdGhpcy51cmwuYWRkID8gdGhpcy51cmwuYWRkIDogdGhpcy5saW1pdCAtIHRoaXMubnVtYmVyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW5VcGRhdGUgPSB0aGlzLnVybC5hZGQgPiAwID8gdHJ1ZSA6IGZhbHNlIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZighdGhpcy5jYW5VcGRhdGUpICB0aGlzLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdhYmMtbGltaXRlZCcpXG4gICAgICAgICAgICBlbC5mb3JtLmZuLmRvKClcblxuICAgICAgICAgICAgaWYoZWwuZGVidWcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCBlbC5kYXRhcy5sZW5ndGggKyBcIiBkYXRhcyBsb2FkZWRcIilcbiAgICAgICAgICAgIH0gICAgICAgIFxuICAgIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQUE7QUFDQTtBQURBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUpBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFHQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/Filter/Options/LoadMore.js\\n");\n    },\n    "./src/Filter/Options/NumberResults.js":\n    /*!*********************************************!*\\\n      !*** ./src/Filter/Options/NumberResults.js ***!\n      \\*********************************************/\n\n    /*! no static exports found */\n    function (module, exports) {\n      eval(\'module.exports = function (arr, length) {\\n  return new NumberResults(arr, length);\\n};\\n\\nfunction NumberResults(arr, length) {\\n  this.target = document.querySelector(arr.target);\\n  this.getFn = 0;\\n  this.length = length;\\n  this.options = [arr.no_results ? arr.no_results : "", arr.singular ? arr.singular : "", arr.plural ? arr.plural : ""];\\n  this.update(length);\\n  return this;\\n}\\n\\nNumberResults.prototype.update = function (length) {\\n  this.length = length;\\n\\n  if (length > 1) {\\n    this.getFn = 2;\\n  } else this.getFn = length;\\n\\n  this.target.innerHTML = this.options[this.getFn](length);\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL09wdGlvbnMvTnVtYmVyUmVzdWx0cy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0FCQy8uL3NyYy9GaWx0ZXIvT3B0aW9ucy9OdW1iZXJSZXN1bHRzLmpzP2VjNjgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAoYXJyLCBsZW5ndGgpID0+IHsgcmV0dXJuIG5ldyBOdW1iZXJSZXN1bHRzKGFyciwgbGVuZ3RoKSB9XG5cbmZ1bmN0aW9uIE51bWJlclJlc3VsdHMoYXJyLCBsZW5ndGgpe1xuXG4gICAgdGhpcy50YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGFyci50YXJnZXQpO1xuICAgIHRoaXMuZ2V0Rm4gPSAwXG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGhcbiAgICBcbiAgICB0aGlzLm9wdGlvbnMgPSBbXG4gICAgICAgIGFyci5ub19yZXN1bHRzID8gYXJyLm5vX3Jlc3VsdHMgOiBcIlwiLCBcbiAgICAgICAgYXJyLnNpbmd1bGFyID8gYXJyLnNpbmd1bGFyIDogXCJcIiAsXG4gICAgICAgIGFyci5wbHVyYWwgPyBhcnIucGx1cmFsIDogXCJcIlxuICAgIF1cblxuICAgIHRoaXMudXBkYXRlKGxlbmd0aClcbiAgICBcbiAgICAgICBcbiAgICByZXR1cm4gdGhpcztcbn1cblxuTnVtYmVyUmVzdWx0cy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24obGVuZ3RoKXtcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aFxuICAgIGlmKGxlbmd0aCA+IDEpIHRoaXMuZ2V0Rm4gPSAyXG4gICAgZWxzZSB0aGlzLmdldEZuID0gbGVuZ3RoXG4gICAgdGhpcy50YXJnZXQuaW5uZXJIVE1MID0gdGhpcy5vcHRpb25zW3RoaXMuZ2V0Rm5dKGxlbmd0aClcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBTUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/Filter/Options/NumberResults.js\\n\');\n    },\n    "./src/Filter/Options/Template.js":\n    /*!****************************************!*\\\n      !*** ./src/Filter/Options/Template.js ***!\n      \\****************************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'var _require = __webpack_require__(/*! ../../Helpers/String */ "./src/Helpers/String.js"),\\n    createElementFromHTML = _require.createElementFromHTML;\\n\\nmodule.exports = function (results, d, container) {\\n  return new Template(results, d, container);\\n};\\n\\nfunction Template(results, d, container) {\\n  var template = results.template(d);\\n  this.create(template, container);\\n  return template;\\n}\\n\\nTemplate.prototype.create = function (d, container) {\\n  var template = createElementFromHTML(d);\\n  container.appendChild(template);\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL09wdGlvbnMvVGVtcGxhdGUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BQkMvLi9zcmMvRmlsdGVyL09wdGlvbnMvVGVtcGxhdGUuanM/YTg1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgeyBjcmVhdGVFbGVtZW50RnJvbUhUTUwgfSAgPSByZXF1aXJlICgnLi4vLi4vSGVscGVycy9TdHJpbmcnICk7XG5cbm1vZHVsZS5leHBvcnRzID0gKHJlc3VsdHMsIGQsIGNvbnRhaW5lcikgPT4geyByZXR1cm4gbmV3IFRlbXBsYXRlKHJlc3VsdHMsIGQsIGNvbnRhaW5lcikgfVxuXG5mdW5jdGlvbiBUZW1wbGF0ZShyZXN1bHRzLCBkLCBjb250YWluZXIpe1xuXG4gICAgY29uc3QgdGVtcGxhdGUgPSByZXN1bHRzLnRlbXBsYXRlKGQpXG4gICAgdGhpcy5jcmVhdGUodGVtcGxhdGUsIGNvbnRhaW5lcilcbiAgICBcbiAgICByZXR1cm4gdGVtcGxhdGU7XG59XG5cblRlbXBsYXRlLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbihkLCBjb250YWluZXIpe1xuICAgIGNvbnN0IHRlbXBsYXRlID0gY3JlYXRlRWxlbWVudEZyb21IVE1MKGQpXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRlbXBsYXRlKVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/Filter/Options/Template.js\\n\');\n    },\n    "./src/Filter/init.js":\n    /*!****************************!*\\\n      !*** ./src/Filter/init.js ***!\n      \\****************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\\n\\nvar ABCFilter = __webpack_require__(/*! ./Core/Filter */ "./src/Filter/Core/Filter.js");\\n\\nvar Datas = __webpack_require__(/*! ./Core/Datas */ "./src/Filter/Core/Datas.js");\\n\\nvar abc;\\nvar Filter = module.exports = {\\n  init: function init(params) {\\n    if (!params.form || !document.querySelector(params.form.container)) {\\n      console.error(\\\'No container form found\\\');\\n      return;\\n    }\\n\\n    var abc = new ABCFilter(params).construct(params);\\n    abc.formObj = document.querySelector(params.form.container);\\n\\n    if (params.inputs) {\\n      abc.setInputs(params.inputs);\\n    }\\n\\n    abc.alldatas = new Datas();\\n    abc.alldatas.get(abc);\\n\\n    if (abc.load_more) {\\n      Promise.all([abc.alldatas.get]).then(function () {\\n        return abc.load_more.init(abc);\\n      });\\n    }\\n\\n    if (abc.facette) {\\n      Promise.all([abc.alldatas.get]).then(function () {\\n        return abc.facette.init(abc);\\n      });\\n    }\\n\\n    return abc;\\n  }\\n};\\n\\nfunction isFunction(fn) {\\n  return _typeof(fn) === (typeof Function === "undefined" ? "undefined" : _typeof(Function));\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRmlsdGVyL2luaXQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BQkMvLi9zcmMvRmlsdGVyL2luaXQuanM/NTQ0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQUJDRmlsdGVyID0gcmVxdWlyZSgnLi9Db3JlL0ZpbHRlcicpXG52YXIgRGF0YXMgPSByZXF1aXJlKCcuL0NvcmUvRGF0YXMnKVxuXG5sZXQgYWJjO1xudmFyIEZpbHRlciA9IG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgXG4gICAgICAgIGlmKCFwYXJhbXMuZm9ybSB8fCAhZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwYXJhbXMuZm9ybS5jb250YWluZXIpICkge1xuICAgICAgICAgICBjb25zb2xlLmVycm9yKCdObyBjb250YWluZXIgZm9ybSBmb3VuZCcpO1xuICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWJjID0gIG5ldyBBQkNGaWx0ZXIocGFyYW1zKS5jb25zdHJ1Y3QocGFyYW1zKTtcblxuICAgICAgICBhYmMuZm9ybU9iaiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocGFyYW1zLmZvcm0uY29udGFpbmVyKTtcblxuICAgICAgICBpZiggcGFyYW1zLmlucHV0cyApIGFiYy5zZXRJbnB1dHMocGFyYW1zLmlucHV0cylcblxuICAgICAgICBhYmMuYWxsZGF0YXMgPSBuZXcgRGF0YXMoKTtcbiAgICAgICAgYWJjLmFsbGRhdGFzLmdldCggYWJjICkgO1xuICAgIFxuXG4gICAgICAgIGlmKGFiYy5sb2FkX21vcmUpIFByb21pc2UuYWxsKFthYmMuYWxsZGF0YXMuZ2V0XSkudGhlbiggKCkgPT4gYWJjLmxvYWRfbW9yZS5pbml0KGFiYykpOyBcbiAgICAgICAgaWYoYWJjLmZhY2V0dGUpIFByb21pc2UuYWxsKFthYmMuYWxsZGF0YXMuZ2V0XSkudGhlbiggKCkgPT4gYWJjLmZhY2V0dGUuaW5pdChhYmMpKTsgXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYWJjXG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZuKSB7IFxuICAgIHJldHVybiB0eXBlb2YoZm4pID09PSB0eXBlb2YoRnVuY3Rpb24pOyBcbn0gIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQXJCQTtBQUNBO0FBdUJBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/Filter/init.js\\n\');\n    },\n    "./src/Helpers/Array.js":\n    /*!******************************!*\\\n      !*** ./src/Helpers/Array.js ***!\n      \\******************************/\n\n    /*! exports provided: setArray, setArrayRange, inArray */\n    function (module, __webpack_exports__, __webpack_require__) {\n      "use strict";\n\n      eval(\'__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setArray", function() { return setArray; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setArrayRange", function() { return setArrayRange; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inArray", function() { return inArray; });\\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\\n\\nvar setArray = function setArray(array, options) {\\n  for (var key in array) {\\n    if (typeof array[key] === "function") {\\n      array[key] = array[key];\\n    } else if (_typeof(array[key]) !== "object" || key === "value" || key === "compare") {\\n      array[key] = key in options ? options[key] : array[key];\\n    } else if (_typeof(array[key]) === "object" && options[key] && options[key].length) {\\n      array[key] = options[key];\\n    } else if (_typeof(array[key]) === "object") {\\n      array[key] = key in options ? setArray(array[key], options[key]) : array[key];\\n    }\\n\\n    ;\\n  }\\n\\n  return array;\\n};\\nvar setArrayRange = function setArrayRange(array, range, form) {\\n  // Set attributes from input to Object \\n  // Min input\\n  range.min = range.min ? range.min : {};\\n  range.max = range.max ? range.max : {};\\n  var inputMin = range.name ? form.querySelector("[name=\\\\"".concat(range.name, "\\\\"]")) : form.querySelector("[name=\\\\"".concat(range.min.name, "\\\\"]"));\\n\\n  if (inputMin) {\\n    range.min.value = inputMin.value;\\n    range.min.min = inputMin.getAttribute(\\\'min\\\');\\n  } //Max input\\n\\n\\n  var inputMax = range.max ? form.querySelector("[name=\\\\"".concat(range.max.name, "\\\\"]")) : false;\\n\\n  if (inputMax) {\\n    range.max.value = inputMax.value;\\n    range.max.max = inputMax.getAttribute(\\\'max\\\');\\n  }\\n\\n  array = setArray(array, range);\\n  return array;\\n};\\nvar inArray = function inArray(data, compare, val) {\\n  var toCompare = compare.split(\\\'.\\\');\\n  val = data;\\n  var _a = toCompare;\\n\\n  var _f = function _f(t, i) {\\n    val = typeof val[t] != "undefined" ? val[t] : false;\\n  };\\n\\n  for (var _i = 0; _i < _a.length; _i++) {\\n    _f(_a[_i], _i, _a);\\n  }\\n\\n  undefined;\\n  return val;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvSGVscGVycy9BcnJheS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0FCQy8uL3NyYy9IZWxwZXJzL0FycmF5LmpzPzIxNzQiXSwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgY29uc3Qgc2V0QXJyYXkgPSBmdW5jdGlvbihhcnJheSwgb3B0aW9ucyl7XG4gICAgZm9yICh2YXIga2V5IGluIGFycmF5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJyYXlba2V5XSA9PT0gXCJmdW5jdGlvblwiIClcbiAgICAgICAgICBhcnJheVtrZXldID0gYXJyYXlba2V5XTtcblxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgYXJyYXlba2V5XSAhPT0gXCJvYmplY3RcIiB8fCBrZXkgPT09IFwidmFsdWVcIiB8fCBrZXkgPT09IFwiY29tcGFyZVwiKVxuICAgICAgICB7ICAgICAgICAgIFxuICAgICAgICAgICAgYXJyYXlba2V5XSA9IGtleSBpbiBvcHRpb25zID8gb3B0aW9uc1trZXldIDogYXJyYXlba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICggdHlwZW9mIGFycmF5W2tleV0gPT09IFwib2JqZWN0XCIgJiYgb3B0aW9uc1trZXldICYmIG9wdGlvbnNba2V5XS5sZW5ndGggKSB7XG4gICAgICAgICAgYXJyYXlba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICggdHlwZW9mIGFycmF5W2tleV0gPT09IFwib2JqZWN0XCIgKSB7XG4gICAgICAgICAgYXJyYXlba2V5XSA9ICBrZXkgaW4gb3B0aW9ucyA/IHNldEFycmF5KGFycmF5W2tleV0sIG9wdGlvbnNba2V5XSApIDogYXJyYXlba2V5XVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBjb25zdCBzZXRBcnJheVJhbmdlID0gZnVuY3Rpb24oYXJyYXksIHJhbmdlLCBmb3JtKXtcblxuICAvLyBTZXQgYXR0cmlidXRlcyBmcm9tIGlucHV0IHRvIE9iamVjdCBcbiAgLy8gTWluIGlucHV0XG4gIHJhbmdlLm1pbiA9IHJhbmdlLm1pbiA/IHJhbmdlLm1pbiA6IHt9XG4gIHJhbmdlLm1heCA9IHJhbmdlLm1heCA/IHJhbmdlLm1heCA6IHt9XG5cbiAgY29uc3QgaW5wdXRNaW4gPSByYW5nZS5uYW1lID8gZm9ybS5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7cmFuZ2UubmFtZX1cIl1gKSA6IGZvcm0ucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke3JhbmdlLm1pbi5uYW1lfVwiXWApXG4gIFxuICBpZihpbnB1dE1pbil7XG4gICAgcmFuZ2UubWluLnZhbHVlID0gaW5wdXRNaW4udmFsdWVcbiAgICByYW5nZS5taW4ubWluID0gaW5wdXRNaW4uZ2V0QXR0cmlidXRlKCdtaW4nKVxuICB9XG4gIC8vTWF4IGlucHV0XG4gIGNvbnN0IGlucHV0TWF4ID0gcmFuZ2UubWF4ID8gZm9ybS5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7cmFuZ2UubWF4Lm5hbWV9XCJdYCkgOiBmYWxzZVxuICBpZihpbnB1dE1heCl7XG4gICAgcmFuZ2UubWF4LnZhbHVlID0gaW5wdXRNYXgudmFsdWVcbiAgICByYW5nZS5tYXgubWF4ID0gaW5wdXRNYXguZ2V0QXR0cmlidXRlKCdtYXgnKVxuICB9XG5cblxuICBhcnJheSA9IHNldEFycmF5KCBhcnJheSwgcmFuZ2UgKVxuXG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGNvbnN0IGluQXJyYXkgPSAoZGF0YSwgY29tcGFyZSwgdmFsKSA9PiB7XG5cbiAgY29uc3QgdG9Db21wYXJlID0gY29tcGFyZS5zcGxpdCgnLicpXG5cblxuICB2YWwgPSBkYXRhO1xuXG4gIHRvQ29tcGFyZS5mb3JFYWNoKCAodCwgaSkgPT4ge1xuICAgIHZhbCA9IHR5cGVvZiB2YWxbdF0gIT0gXCJ1bmRlZmluZWRcIiA/IHZhbFt0XSA6IGZhbHNlXG4gIH0pXG4gIHJldHVybiB2YWxcblxufVxuICJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBR0E7QUFMQTtBQUNBO0FBREE7QUFRQTtBQUNBO0FBQ0E7QUFWQTtBQUFBO0FBQUE7QUFDQTtBQU1BO0FBR0E7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/Helpers/Array.js\\n\');\n    },\n    "./src/Helpers/Fetch.js":\n    /*!******************************!*\\\n      !*** ./src/Helpers/Fetch.js ***!\n      \\******************************/\n\n    /*! exports provided: Fetch */\n    function (module, __webpack_exports__, __webpack_require__) {\n      "use strict";\n\n      eval(\'__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fetch", function() { return Fetch; });\\nvar Fetch = function Fetch(url, callback) {\\n  fetch(url).then(function (response) {\\n    return response.json();\\n  }).then(function (json) {\\n    return callback(null, json);\\n  }).catch(function (error) {\\n    return callback(error, null);\\n  });\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvSGVscGVycy9GZXRjaC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0FCQy8uL3NyYy9IZWxwZXJzL0ZldGNoLmpzPzE4YjgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEZldGNoID0gKHVybCwgY2FsbGJhY2spID0+IHtcbiAgICBmZXRjaCh1cmwpXG4gICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgIC50aGVuKGpzb24gPT4gY2FsbGJhY2sobnVsbCwganNvbikpXG4gICAgICAgLmNhdGNoKGVycm9yID0+IGNhbGxiYWNrKGVycm9yLCBudWxsKSlcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/Helpers/Fetch.js\\n\');\n    },\n    "./src/Helpers/String.js":\n    /*!*******************************!*\\\n      !*** ./src/Helpers/String.js ***!\n      \\*******************************/\n\n    /*! exports provided: capitalize, createElementFromHTML */\n    function (module, __webpack_exports__, __webpack_require__) {\n      "use strict";\n\n      eval(\'__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capitalize", function() { return capitalize; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createElementFromHTML", function() { return createElementFromHTML; });\\nvar capitalize = function capitalize(str) {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n};\\nfunction createElementFromHTML(htmlString) {\\n  var div = document.createElement(\\\'div\\\');\\n  div.innerHTML = htmlString.trim(); // Change this to div.childNodes to support multiple top-level nodes\\n\\n  return div.firstChild;\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvSGVscGVycy9TdHJpbmcuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BQkMvLi9zcmMvSGVscGVycy9TdHJpbmcuanM/MmUwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRGcm9tSFRNTChodG1sU3RyaW5nKSB7XG4gICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdi5pbm5lckhUTUwgPSBodG1sU3RyaW5nLnRyaW0oKTtcblxuICAgIC8vIENoYW5nZSB0aGlzIHRvIGRpdi5jaGlsZE5vZGVzIHRvIHN1cHBvcnQgbXVsdGlwbGUgdG9wLWxldmVsIG5vZGVzXG4gICAgcmV0dXJuIGRpdi5maXJzdENoaWxkOyBcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/Helpers/String.js\\n\');\n    },\n    "./src/Helpers/Utils.js":\n    /*!******************************!*\\\n      !*** ./src/Helpers/Utils.js ***!\n      \\******************************/\n\n    /*! exports provided: error, isTarget, isTargetSelected, closest */\n    function (module, __webpack_exports__, __webpack_require__) {\n      "use strict";\n\n      eval(\'__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "error", function() { return error; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTarget", function() { return isTarget; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTargetSelected", function() { return isTargetSelected; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closest", function() { return closest; });\\nvar error = function error(msg) {\\n  console.error(msg);\\n  return;\\n};\\nvar isTarget = function isTarget(e, el) {\\n  el.target = e.target.hasAttribute(\\\'id\\\') ? e.target.getAttribute(\\\'id\\\') : e.target.value;\\n  return closest(e.target, el.name, el.name) || e.target.getAttribute(\\\'name\\\') === el.name;\\n};\\nvar isTargetSelected = function isTargetSelected(e, el, form) {\\n  var attr = e.target.getAttribute(\\\'rel\\\');\\n\\n  if (attr === "" || attr === null || attr === "default" || attr === "all") {\\n    return true;\\n  }\\n\\n  var target = attr ? form.querySelector("[name=\\\\"".concat(el.name, "\\\\"] [value=\\\\"").concat(attr, "\\\\"]")) : e.target;\\n\\n  if (!target) {\\n    return;\\n  }\\n\\n  return closest(target, "select", "select") || target.getAttribute(\\\'name\\\') === el.name;\\n};\\nvar closest = function closest(el, selector, stopSelector) {\\n  var retval = null;\\n\\n  while (el) {\\n    if (el.matches(selector)) {\\n      retval = el;\\n      break;\\n    } else if (stopSelector && el.matches(stopSelector)) {\\n      break;\\n    }\\n\\n    el = el.parentElement;\\n  }\\n\\n  return retval;\\n};\\n\\nif (!Element.prototype.matches) {\\n  Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\\n    var matches = (this.document || this.ownerDocument).querySelectorAll(s),\\n        i = matches.length;\\n\\n    while (--i >= 0 && matches.item(i) !== this) {}\\n\\n    return i > -1;\\n  };\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvSGVscGVycy9VdGlscy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0FCQy8uL3NyYy9IZWxwZXJzL1V0aWxzLmpzPzBiN2MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGVycm9yID0gKG1zZykgPT4ge1xuICBjb25zb2xlLmVycm9yKG1zZyk7XG4gIHJldHVybjtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1RhcmdldCA9IChlLCBlbCkgPT4ge1xuICBlbC50YXJnZXQgPSBlLnRhcmdldC5oYXNBdHRyaWJ1dGUoJ2lkJykgPyBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2lkJykgOiBlLnRhcmdldC52YWx1ZVxuICByZXR1cm4gY2xvc2VzdChlLnRhcmdldCwgZWwubmFtZSwgZWwubmFtZSkgfHwgZS50YXJnZXQuZ2V0QXR0cmlidXRlKCduYW1lJykgPT09IGVsLm5hbWU7XG59XG5leHBvcnQgY29uc3QgaXNUYXJnZXRTZWxlY3RlZCA9IChlLCBlbCwgZm9ybSkgPT4ge1xuXHRjb25zdCBhdHRyID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdyZWwnKVxuXHRpZiAoYXR0ciA9PT0gXCJcIiB8fCBhdHRyID09PSBudWxsIHx8IGF0dHIgPT09IFwiZGVmYXVsdFwiIHx8IGF0dHIgPT09IFwiYWxsXCIpIHJldHVybiB0cnVlO1xuXHRjb25zdCB0YXJnZXQgPSBhdHRyID8gZm9ybS5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7ZWwubmFtZX1cIl0gW3ZhbHVlPVwiJHthdHRyfVwiXWApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0OiBlLnRhcmdldFxuXHRpZiAoIXRhcmdldCkgcmV0dXJuO1xuXHRyZXR1cm4gY2xvc2VzdCh0YXJnZXQsIFwic2VsZWN0XCIsIFwic2VsZWN0XCIpIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ25hbWUnKSA9PT0gZWwubmFtZTtcbn1cblxuZXhwb3J0IGNvbnN0IGNsb3Nlc3QgPSAoZWwsIHNlbGVjdG9yLCBzdG9wU2VsZWN0b3IpID0+IHtcblx0dmFyIHJldHZhbCA9IG51bGw7XG5cdHdoaWxlIChlbCkge1xuXHRcdGlmIChlbC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuXHRcdFx0cmV0dmFsID0gZWw7XG5cdFx0XHRicmVha1xuXHRcdH0gZWxzZSBpZiAoc3RvcFNlbGVjdG9yICYmIGVsLm1hdGNoZXMoc3RvcFNlbGVjdG9yKSkge1xuXHRcdFx0YnJlYWtcblx0XHR9XG5cdFx0ZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuXHR9XG5cdHJldHVybiByZXR2YWw7XG59XG5cblxuXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcblx0RWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9XG5cdFx0RWxlbWVudC5wcm90b3R5cGUubWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0RWxlbWVudC5wcm90b3R5cGUubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0RWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRFbGVtZW50LnByb3RvdHlwZS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0RWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZnVuY3Rpb24gKHMpIHtcblx0XHRcdHZhciBtYXRjaGVzID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpLFxuXHRcdFx0XHRpID0gbWF0Y2hlcy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoLS1pID49IDAgJiYgbWF0Y2hlcy5pdGVtKGkpICE9PSB0aGlzKSB7fVxuXHRcdFx0cmV0dXJuIGkgPiAtMTtcblx0XHR9O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBT0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/Helpers/Utils.js\\n\');\n    },\n    "./src/Range/Core/Input.js":\n    /*!*********************************!*\\\n      !*** ./src/Range/Core/Input.js ***!\n      \\*********************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval("var _require = __webpack_require__(/*! ../../Helpers/Array */ \\"./src/Helpers/Array.js\\"),\\n    setArray = _require.setArray;\\n\\nmodule.exports = function (el) {\\n  return new Input(el);\\n};\\n\\nfunction Input(el) {\\n  this.diff = 1;\\n  this.multiple = false;\\n  this.name = false;\\n  this.compare = false;\\n  this.url_name = false;\\n  this.operator = \\"or\\";\\n  this.relation = \\"and\\";\\n  this.min = {\\n    label: {\\n      target: false,\\n      default: false,\\n      singular: false,\\n      plural: false,\\n      zero: false\\n    },\\n    value: false,\\n    name: false,\\n    min: false,\\n    default: false\\n  };\\n  this.max = {\\n    label: {\\n      target: false,\\n      default: false,\\n      singular: false,\\n      plural: false,\\n      zero: false\\n    },\\n    default: false,\\n    value: false,\\n    name: false,\\n    max: false\\n  };\\n  this.line = {\\n    target: this.createLine()\\n  };\\n}\\n\\nInput.prototype.construct = function (params) {\\n  if (params) {\\n    setArray(this, params);\\n  }\\n\\n  if (this.min.name) {\\n    this.min.target = document.querySelector(\\"[name=\\\\\\"\\".concat(this.min.name, \\"\\\\\\"]\\"));\\n  }\\n\\n  if (this.max.name) {\\n    this.max.target = document.querySelector(\\"[name=\\\\\\"\\".concat(this.max.name, \\"\\\\\\"]\\"));\\n  }\\n\\n  if (this.min.label.target) {\\n    this.min.label.el = document.querySelector(this.min.label.target);\\n  }\\n\\n  if (this.max.label.target) {\\n    this.max.label.el = document.querySelector(this.max.label.target);\\n  }\\n\\n  if (this.min.target) {\\n    this.min.target.parentNode.appendChild(this.line.target);\\n    this.line.target.width = this.line.target.clientWidth;\\n\\n    if (this.multiple && Number(this.min.target.value) <= Number(this.max.target.value) - this.diff) {\\n      this.update(\'min\');\\n    } else this.min.target.value = Number(this.max.target.value) - this.diff;\\n\\n    this.min.min = this.min.target.getAttribute(\'min\');\\n    this.min.max = this.min.target.getAttribute(\'max\');\\n\\n    if (!this.multiple) {\\n      this.update(\'min\');\\n    }\\n\\n    this.update(\'min\');\\n    this.updateLine(\'min\');\\n  }\\n\\n  if (this.max.target) {\\n    if (this.multiple && Number(this.min.target.value) + this.diff <= Number(this.max.target.value)) {\\n      this.update(\'max\');\\n    } else this.max.target.value = Number(this.min.target.value) + this.diff;\\n\\n    this.max.min = this.max.target.getAttribute(\'min\');\\n    this.max.max = this.max.target.getAttribute(\'max\');\\n    this.update(\'max\');\\n    this.updateLine(\'max\');\\n  }\\n\\n  this.bindEvents();\\n};\\n\\nInput.prototype.bindEvents = function () {\\n  var _this = this;\\n\\n  if (this.min.target) {\\n    this.min.target.addEventListener(\'input\', function (e) {\\n      if (_this.multiple && Number(_this.min.target.value) <= Number(_this.max.target.value) - _this.diff) {\\n        _this.update(\'min\');\\n      } else _this.min.target.value = Number(_this.max.target.value) - _this.diff;\\n\\n      _this.updateLine(\'min\');\\n\\n      if (!_this.multiple) {\\n        _this.update(\'min\');\\n      }\\n    });\\n  }\\n\\n  if (this.max.target) {\\n    this.max.target.addEventListener(\'input\', function (e) {\\n      if (_this.multiple && Number(_this.min.target.value) + _this.diff <= Number(_this.max.target.value)) {\\n        _this.update(\'max\');\\n      } else _this.max.target.value = Number(_this.min.target.value) + _this.diff;\\n\\n      _this.update(\'max\');\\n\\n      _this.updateLine(\'max\');\\n    });\\n  }\\n};\\n\\nInput.prototype.update = function (input) {\\n  this[input].target.setAttribute(\'value\', this[input].target.value);\\n  this[input].value = this[input].target.value;\\n  var HTML;\\n\\n  if (Number(this[input].value) === 0) {\\n    if (this[input].label.zero) {\\n      HTML = this[input].label.zero(this[input].value);\\n    } else if (this[input].label.singular) {\\n      HTML = this[input].label.singular(this[input].value);\\n    } else if (this[input].label.default) {\\n      HTML = this[input].label.default(this[input].value);\\n    }\\n  } else if (Number(this[input].value) === 1) {\\n    if (this[input].label.singular) {\\n      HTML = this[input].label.singular(this[input].value);\\n    } else if (this[input].label.default) {\\n      HTML = this[input].label.default(this[input].value);\\n    }\\n  } else {\\n    if (this[input].label.plural) {\\n      HTML = this[input].label.plural(this[input].value);\\n    } else if (this[input].label.default) {\\n      HTML = this[input].label.default(this[input].value);\\n    }\\n  }\\n\\n  if (this[input].label.el) {\\n    this[input].label.el.innerHTML = HTML;\\n  }\\n};\\n\\nInput.prototype.createLine = function () {\\n  var line = document.createElement(\'span\');\\n  line.classList.add(\'abc_range__line\');\\n  line.style.transformOrigin = \'left\';\\n  return line;\\n};\\n\\nInput.prototype.updateLine = function (val) {\\n  var min = 100 * this.min.value / this.min.max;\\n  var max = this.min.value / this.max.max - this.max.value / this.max.max;\\n\\n  if (val === \'min\') {\\n    this.line.target.style.left = min + \'%\';\\n\\n    if (this.multiple) {\\n      this.line.target.style.transform = \\"scaleX(\\".concat(Math.abs(max), \\")\\");\\n    }\\n  }\\n\\n  if (val === \'max\') {\\n    this.line.target.style.transform = \\"scaleX(\\".concat(Math.abs(max), \\")\\");\\n  }\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./src/Range/Core/Input.js\\n");\n    },\n    "./src/Range/init.js":\n    /*!***************************!*\\\n      !*** ./src/Range/init.js ***!\n      \\***************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'var Input = __webpack_require__(/*! ./Core/Input */ "./src/Range/Core/Input.js");\\n\\nvar Range = module.exports = {\\n  init: function init(params) {\\n    return new Input().construct(params);\\n  }\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvUmFuZ2UvaW5pdC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0FCQy8uL3NyYy9SYW5nZS9pbml0LmpzP2YzNWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIElucHV0ID0gcmVxdWlyZSgnLi9Db3JlL0lucHV0JylcbnZhciBSYW5nZSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnB1dCgpLmNvbnN0cnVjdChwYXJhbXMpIFxuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSEEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/Range/init.js\\n\');\n    },\n    "./src/Select/Core/Body.js":\n    /*!*********************************!*\\\n      !*** ./src/Select/Core/Body.js ***!\n      \\*********************************/\n\n    /*! no static exports found */\n    function (module, exports) {\n      eval("module.exports = function () {\\n  return new Body();\\n};\\n\\nfunction Body() {\\n  this.tag = \'ul\';\\n  this.className = \'abc-select__body\';\\n  this.target = false;\\n  this.auto_height = true;\\n  this.close = 0;\\n  return this;\\n}\\n\\nBody.prototype.construct = function (opt) {\\n  this.target = document.createElement(opt.body.tag);\\n  opt.container.appendChild(this.target);\\n\\n  if (opt.options) {\\n    this.els = opt.options.construct(this.target);\\n  }\\n\\n  this.target.classList.add(this.className);\\n  this.target.setAttribute(\'role\', \'listbox\');\\n  this.target.setAttribute(\'tabindex\', \'-1\');\\n\\n  if (this.auto_height) {\\n    this.setHeight();\\n  }\\n};\\n\\nBody.prototype.setHeight = function () {\\n  this.height = this.getHeight();\\n  this.target.style.height = \\"\\".concat(this.height, \\"px\\");\\n};\\n\\nBody.prototype.getHeight = function () {\\n  return this.target.scrollHeight;\\n};\\n\\nBody.prototype.state = function (open) {\\n  this.target.style.height = open ? \\"\\".concat(this.height, \\"px\\") : \\"\\".concat(this.close, \\"px\\"); // this.els.forEach(el => el.setAttribute(\'tabIndex\', open ? \'0\' : \'-1\' ))\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvU2VsZWN0L0NvcmUvQm9keS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0FCQy8uL3NyYy9TZWxlY3QvQ29yZS9Cb2R5LmpzPzY2NjQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7IHJldHVybiBuZXcgQm9keSgpIH1cblxuZnVuY3Rpb24gQm9keSgpe1xuICAgIHRoaXMudGFnID0gJ3VsJ1xuICAgIHRoaXMuY2xhc3NOYW1lID0gJ2FiYy1zZWxlY3RfX2JvZHknXG4gICAgdGhpcy50YXJnZXQgPSBmYWxzZVxuICAgIHRoaXMuYXV0b19oZWlnaHQgPSB0cnVlXG4gICAgdGhpcy5jbG9zZSA9IDBcbiAgICBcbiAgICBcbiAgICByZXR1cm4gdGhpcztcbn1cblxuQm9keS5wcm90b3R5cGUuY29uc3RydWN0ID0gZnVuY3Rpb24ob3B0KXtcblxuICAgIFxuICAgIHRoaXMudGFyZ2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChvcHQuYm9keS50YWcpXG4gICAgb3B0LmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnRhcmdldClcblxuICAgIGlmKG9wdC5vcHRpb25zICkgdGhpcy5lbHMgPSBvcHQub3B0aW9ucy5jb25zdHJ1Y3QodGhpcy50YXJnZXQpIFxuXG5cbiAgICB0aGlzLnRhcmdldC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lKVxuICAgIHRoaXMudGFyZ2V0LnNldEF0dHJpYnV0ZSgncm9sZScsICdsaXN0Ym94JylcbiAgICB0aGlzLnRhcmdldC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJylcblxuICAgIGlmKHRoaXMuYXV0b19oZWlnaHQpIHRoaXMuc2V0SGVpZ2h0KClcbiAgICBcbn1cblxuQm9keS5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0KClcbiAgICB0aGlzLnRhcmdldC5zdHlsZS5oZWlnaHQgPSBgJHt0aGlzLmhlaWdodH1weGBcbn1cbkJvZHkucHJvdG90eXBlLmdldEhlaWdodCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMudGFyZ2V0LnNjcm9sbEhlaWdodFxuICAgIFxufVxuXG5Cb2R5LnByb3RvdHlwZS5zdGF0ZSA9IGZ1bmN0aW9uKG9wZW4pIHtcbiAgICB0aGlzLnRhcmdldC5zdHlsZS5oZWlnaHQgPSBvcGVuID8gYCR7dGhpcy5oZWlnaHR9cHhgIDogYCR7dGhpcy5jbG9zZX1weGBcbiAgICAvLyB0aGlzLmVscy5mb3JFYWNoKGVsID0+IGVsLnNldEF0dHJpYnV0ZSgndGFiSW5kZXgnLCBvcGVuID8gJzAnIDogJy0xJyApKVxufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/Select/Core/Body.js\\n");\n    },\n    "./src/Select/Core/Head.js":\n    /*!*********************************!*\\\n      !*** ./src/Select/Core/Head.js ***!\n      \\*********************************/\n\n    /*! no static exports found */\n    function (module, exports) {\n      eval("module.exports = function () {\\n  return new Head();\\n};\\n\\nfunction Head() {\\n  this.tag = \'button\';\\n  this.className = \'abc-select__head\';\\n  this.default = \\"\\";\\n  this.auto = true;\\n  this.join = \',\';\\n  this.max_char = false;\\n  return this;\\n}\\n\\nHead.prototype.construct = function (opt) {\\n  this.target = document.createElement(this.tag);\\n  opt.container.appendChild(this.target);\\n  this.target.classList.add(this.className);\\n  this.target.setAttribute(\'aria-hasPopup\', \'listbox\');\\n  this.default = this.default ? this.default : opt.options.options[0].innerHTML;\\n  this.target.innerHTML = this.default;\\n};\\n\\nHead.prototype.update = function (options) {\\n  if (!this.auto) {\\n    return;\\n  }\\n\\n  var html = options.selected && options.selected.length > 0 ? options.default.join(this.join) : this.default;\\n  this.target.innerHTML = this.max_char && html.length > this.max_char ? html.slice(0, this.max_char) + \'…\' : html;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvU2VsZWN0L0NvcmUvSGVhZC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0FCQy8uL3NyYy9TZWxlY3QvQ29yZS9IZWFkLmpzPzRhZDYiXSwic291cmNlc0NvbnRlbnQiOlsiXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHsgcmV0dXJuIG5ldyBIZWFkKCkgfVxuXG5mdW5jdGlvbiBIZWFkKCl7XG4gICAgdGhpcy50YWcgPSAnYnV0dG9uJ1xuICAgIHRoaXMuY2xhc3NOYW1lID0gJ2FiYy1zZWxlY3RfX2hlYWQnXG4gICAgdGhpcy5kZWZhdWx0ID0gXCJcIlxuICAgIHRoaXMuYXV0byA9IHRydWVcbiAgICB0aGlzLmpvaW4gPSAnLCdcbiAgICB0aGlzLm1heF9jaGFyID0gZmFsc2VcblxuICAgIHJldHVybiB0aGlzO1xufVxuXG5IZWFkLnByb3RvdHlwZS5jb25zdHJ1Y3QgPSBmdW5jdGlvbihvcHQpe1xuICAgIHRoaXMudGFyZ2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZylcbiAgICBvcHQuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMudGFyZ2V0KVxuXG4gICAgdGhpcy50YXJnZXQuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZSlcblxuICAgIHRoaXMudGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1oYXNQb3B1cCcsICdsaXN0Ym94JylcbiAgICB0aGlzLmRlZmF1bHQgPSB0aGlzLmRlZmF1bHQgPyB0aGlzLmRlZmF1bHQgOiBvcHQub3B0aW9ucy5vcHRpb25zWzBdLmlubmVySFRNTFxuICAgIHRoaXMudGFyZ2V0LmlubmVySFRNTCA9IHRoaXMuZGVmYXVsdFxuICAgIFxufVxuXG5IZWFkLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgICBpZighdGhpcy5hdXRvKSByZXR1cm5cbiAgICBcbiAgICBjb25zdCBodG1sID0gb3B0aW9ucy5zZWxlY3RlZCAmJiBvcHRpb25zLnNlbGVjdGVkLmxlbmd0aCA+IDAgPyBvcHRpb25zLmRlZmF1bHQuam9pbih0aGlzLmpvaW4pIDogdGhpcy5kZWZhdWx0XG4gICAgXG4gICAgdGhpcy50YXJnZXQuaW5uZXJIVE1MID0gdGhpcy5tYXhfY2hhciAmJiBodG1sLmxlbmd0aCA+IHRoaXMubWF4X2NoYXIgPyBodG1sLnNsaWNlKDAsIHRoaXMubWF4X2NoYXIpICsgJ+KApicgOiBodG1sXG59Il0sIm1hcHBpbmdzIjoiQUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/Select/Core/Head.js\\n");\n    },\n    "./src/Select/Core/Input.js":\n    /*!**********************************!*\\\n      !*** ./src/Select/Core/Input.js ***!\n      \\**********************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval("var _require = __webpack_require__(/*! ../../Helpers/Array */ \\"./src/Helpers/Array.js\\"),\\n    setArray = _require.setArray;\\n\\nvar Head = __webpack_require__(/*! ./Head */ \\"./src/Select/Core/Head.js\\");\\n\\nvar Body = __webpack_require__(/*! ./Body */ \\"./src/Select/Core/Body.js\\");\\n\\nvar Options = __webpack_require__(/*! ./Options */ \\"./src/Select/Core/Options.js\\");\\n\\nmodule.exports = function (el) {\\n  return new Input(el);\\n};\\n\\nfunction Input(el) {\\n  this.input = {\\n    multiple: false,\\n    tag: \'div\',\\n    target: false,\\n    open: false,\\n    openClass: \'abc-select--open\'\\n  };\\n  this.el = el; // this.el.setAttribute(\'tabIndex\', \'-1\')\\n\\n  this.body = new Body();\\n  this.head = new Head();\\n  this.options = new Options();\\n  this.focus = -1;\\n} // Input.prototype.onOpen = function(){\\n//     this.head.target.setAttribute(\'aria-expanded\', \'true\');\\n// }\\n\\n\\nInput.prototype.bindEvents = function () {\\n  var _this = this;\\n\\n  this.head.target.addEventListener(\'click\', function (evt) {\\n    evt.preventDefault();\\n\\n    _this.update();\\n  });\\n  this.head.target.addEventListener(\'keydown\', function (evt) {\\n    if (evt.keyCode === 13) {\\n      _this.update();\\n    } else if ([38, 40].indexOf(evt.keyCode) > -1) {\\n      _this.update(true);\\n    } else if ([27].indexOf(evt.keyCode) > -1) {\\n      _this.update(false);\\n\\n      _this.options.els[_this.focus].blur();\\n    }\\n\\n    if (_this.options.selected && _this.options.selected[0]) {\\n      _this.focus = _this.options.selected[0].index;\\n\\n      _this.options.selected[0].related.focus();\\n    } else _this.options.els[0].focus();\\n  });\\n  this.body.target.addEventListener(\'keydown\', function (evt) {\\n    // if( [38,40].indexOf(evt.keyCode) > -1 ) this.update(true) \\n    if (_this.focus != _this.options.els.length - 1 && evt.keyCode === 40) {\\n      _this.focus = _this.focus + 1;\\n    }\\n\\n    if (_this.focus != 0 && evt.keyCode === 38) {\\n      _this.focus = _this.focus - 1;\\n    }\\n\\n    if (_this.focus > -1 && [38, 40].indexOf(evt.keyCode) > -1) {\\n      _this.options.els[_this.focus].focus();\\n\\n      if (!_this.input.multiple) {\\n        _this.options.single(_this.options.els[_this.focus]);\\n\\n        _this.head.update(_this.options);\\n      }\\n    }\\n\\n    if (_this.focus > -1 && evt.keyCode === 13 && !_this.input.multiple) {\\n      _this.update(false);\\n\\n      _this.options.els[_this.focus].blur();\\n    } else if (_this.focus > -1 && evt.keyCode === 13 && _this.input.multiple) {\\n      _this.options.multi(_this.options.els[_this.focus]);\\n\\n      _this.head.update(_this.options);\\n    } else if (_this.focus > -1 && [27, 9].indexOf(evt.keyCode) > -1) {\\n      _this.update(false);\\n\\n      _this.options.els[_this.focus].blur();\\n    }\\n  });\\n  var _a = this.options.els;\\n\\n  var _f = function _f(el) {\\n    el.addEventListener(\'click\', function () {\\n      if (!_this.input.multiple) {\\n        _this.options.single(el);\\n\\n        _this.update(false);\\n\\n        el.blur();\\n      } else {\\n        _this.options.multi(el);\\n\\n        _this.head.update(_this.options);\\n      } // this.head.update(this.options)\\n\\n    }); // el.addEventListener(\'keydown\', evt => {\\n    //     !this.input.multiple ? this.options.single(el) : this.options.multi(el)\\n    //     this.head.update(this.options)\\n    // })\\n  };\\n\\n  for (var _i = 0; _i < _a.length; _i++) {\\n    _f(_a[_i], _i, _a);\\n  }\\n\\n  undefined;\\n};\\n\\nInput.prototype.update = function (open) {\\n  this.open = open ? open : !this.open;\\n  this.state();\\n};\\n\\nInput.prototype.construct = function (params) {\\n  if (params) {\\n    this.input = setArray(this.input, params);\\n  }\\n\\n  if (params.body != false && params.body) {\\n    this.body = setArray(this.body, params.body);\\n  } else if (params.body === false) {\\n    this.body = false;\\n  }\\n\\n  if (params.head != false && params.head) {\\n    this.head = setArray(this.head, params.head);\\n  } else if (params.head === false) {\\n    this.head = false;\\n  }\\n\\n  if (params.options != false && params.options) {\\n    this.options = setArray(this.options, params.options);\\n  } else if (params.options === false) {\\n    this.options = false;\\n  }\\n\\n  this.create();\\n};\\n\\nInput.prototype.create = function () {\\n  this.options.options = this.el.options;\\n  this.options.selected = this.el.selectedOptions;\\n  this.container = document.createElement(this.input.tag);\\n  this.container.classList.add(\'abc-select\');\\n  this.el.parentNode.insertBefore(this.container, this.el);\\n  this.container.appendChild(this.el);\\n\\n  if (this.head) {\\n    this.head.construct(this);\\n  }\\n\\n  if (this.body) {\\n    this.body.construct(this);\\n  }\\n\\n  if (!this.head.default) {\\n    this.head.target.innerHTML = this.options.options[0].innerHTML;\\n  }\\n\\n  this.state();\\n  this.bindEvents();\\n};\\n\\nInput.prototype.state = function () {\\n  this.open ? this.container.classList.add(this.input.openClass) : this.container.classList.remove(this.input.openClass);\\n  this.body.state(this.open);\\n  this.head.update(this.options);\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvU2VsZWN0L0NvcmUvSW5wdXQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BQkMvLi9zcmMvU2VsZWN0L0NvcmUvSW5wdXQuanM/OTI1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgeyBzZXRBcnJheSB9ICA9IHJlcXVpcmUgKCcuLi8uLi9IZWxwZXJzL0FycmF5JyApO1xuXG52YXIgSGVhZCA9IHJlcXVpcmUgKCcuL0hlYWQnICk7XG52YXIgQm9keSA9IHJlcXVpcmUgKCcuL0JvZHknICk7XG52YXIgT3B0aW9ucyA9IHJlcXVpcmUgKCcuL09wdGlvbnMnICk7XG5cbm1vZHVsZS5leHBvcnRzID0gKGVsKSA9PiB7IHJldHVybiBuZXcgSW5wdXQoZWwpIH1cblxuZnVuY3Rpb24gSW5wdXQoZWwpe1xuICAgIHRoaXMuaW5wdXQgPSB7XG4gICAgICAgIG11bHRpcGxlIDogZmFsc2UsXG4gICAgICAgIHRhZzogJ2RpdicsXG4gICAgICAgIHRhcmdldCA6IGZhbHNlLCBcbiAgICAgICAgb3BlbjogZmFsc2UsXG4gICAgICAgIG9wZW5DbGFzcyA6ICdhYmMtc2VsZWN0LS1vcGVuJ1xuICAgIH1cblxuICAgIHRoaXMuZWwgPSBlbDtcbiAgICAvLyB0aGlzLmVsLnNldEF0dHJpYnV0ZSgndGFiSW5kZXgnLCAnLTEnKVxuXG4gICAgdGhpcy5ib2R5ID0gbmV3IEJvZHkoKVxuICAgIHRoaXMuaGVhZCA9IG5ldyBIZWFkKClcbiAgICB0aGlzLm9wdGlvbnMgPSBuZXcgT3B0aW9ucygpXG5cbiAgICB0aGlzLmZvY3VzID0gLTFcbiAgICBcbn1cbi8vIElucHV0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbigpe1xuLy8gICAgIHRoaXMuaGVhZC50YXJnZXQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbi8vIH1cbklucHV0LnByb3RvdHlwZS5iaW5kRXZlbnRzID0gZnVuY3Rpb24oKXtcblxuICAgIHRoaXMuaGVhZC50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldnQgPT4gIHsgXG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHRoaXMudXBkYXRlKCkgXG4gICAgfSlcblxuICAgIHRoaXMuaGVhZC50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGV2dCA9PiAgeyBcbiAgICAgICAgaWYoZXZ0LmtleUNvZGUgPT09IDEzICkgdGhpcy51cGRhdGUoKSBcbiAgICAgICAgZWxzZSBpZiggWzM4LDQwXS5pbmRleE9mKGV2dC5rZXlDb2RlKSA+IC0xICl0aGlzLnVwZGF0ZSh0cnVlKSBcbiAgICAgICAgZWxzZSBpZiggWzI3XS5pbmRleE9mKGV2dC5rZXlDb2RlKSA+IC0xICl7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShmYWxzZSkgXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZWxzW3RoaXMuZm9jdXNdLmJsdXIoKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIHRoaXMub3B0aW9ucy5zZWxlY3RlZCAmJiB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRbMF0gKXtcbiAgICAgICAgICAgIHRoaXMuZm9jdXMgPSB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRbMF0uaW5kZXhcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zZWxlY3RlZFswXS5yZWxhdGVkLmZvY3VzKClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHRoaXMub3B0aW9ucy5lbHNbMF0uZm9jdXMoKSAgICAgICAgXG4gICAgfSlcbiAgICB0aGlzLmJvZHkudGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldnQgPT4gIHsgXG4gICAgICAgIC8vIGlmKCBbMzgsNDBdLmluZGV4T2YoZXZ0LmtleUNvZGUpID4gLTEgKSB0aGlzLnVwZGF0ZSh0cnVlKSBcbiAgICAgICAgaWYodGhpcy5mb2N1cyAhPSB0aGlzLm9wdGlvbnMuZWxzLmxlbmd0aCAtIDEgJiYgZXZ0LmtleUNvZGUgPT09IDQwICkgdGhpcy5mb2N1cyA9IHRoaXMuZm9jdXMgKyAxXG4gICAgICAgIGlmKHRoaXMuZm9jdXMgIT0gMCAmJiBldnQua2V5Q29kZSA9PT0gMzggKSB0aGlzLmZvY3VzID0gdGhpcy5mb2N1cyAtIDFcblxuICAgICAgICBpZih0aGlzLmZvY3VzID4gLTEgICYmIFszOCw0MF0uaW5kZXhPZihldnQua2V5Q29kZSkgPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmVsc1t0aGlzLmZvY3VzXS5mb2N1cygpICBcbiAgICAgICAgICAgIGlmKCF0aGlzLmlucHV0Lm11bHRpcGxlKXtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2luZ2xlKHRoaXMub3B0aW9ucy5lbHNbdGhpcy5mb2N1c10pIFxuICAgICAgICAgICAgICAgIHRoaXMuaGVhZC51cGRhdGUodGhpcy5vcHRpb25zKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMuZm9jdXMgPiAtMSAmJiBldnQua2V5Q29kZSA9PT0gMTMgJiYgIXRoaXMuaW5wdXQubXVsdGlwbGUpe1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoZmFsc2UpXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZWxzW3RoaXMuZm9jdXNdLmJsdXIoKVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYodGhpcy5mb2N1cyA+IC0xICYmIGV2dC5rZXlDb2RlID09PSAxMyAmJiB0aGlzLmlucHV0Lm11bHRpcGxlKXtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5tdWx0aSh0aGlzLm9wdGlvbnMuZWxzW3RoaXMuZm9jdXNdKSBcbiAgICAgICAgICAgIHRoaXMuaGVhZC51cGRhdGUodGhpcy5vcHRpb25zKVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYodGhpcy5mb2N1cyA+IC0xICYmIFsyNywgOV0uaW5kZXhPZihldnQua2V5Q29kZSkgPiAtMSApe1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoZmFsc2UpIFxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmVsc1t0aGlzLmZvY3VzXS5ibHVyKClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9KVxuICAgIHRoaXMub3B0aW9ucy5lbHMuZm9yRWFjaCggKGVsKSA9PiB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYoICF0aGlzLmlucHV0Lm11bHRpcGxlICl7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNpbmdsZShlbClcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShmYWxzZSlcbiAgICAgICAgICAgICAgICBlbC5ibHVyKClcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5tdWx0aShlbClcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWQudXBkYXRlKHRoaXMub3B0aW9ucylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoaXMuaGVhZC51cGRhdGUodGhpcy5vcHRpb25zKVxuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgICAgIC8vIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldnQgPT4ge1xuICAgICAgICAvLyAgICAgIXRoaXMuaW5wdXQubXVsdGlwbGUgPyB0aGlzLm9wdGlvbnMuc2luZ2xlKGVsKSA6IHRoaXMub3B0aW9ucy5tdWx0aShlbClcbiAgICAgICAgLy8gICAgIHRoaXMuaGVhZC51cGRhdGUodGhpcy5vcHRpb25zKVxuICAgICAgICAvLyB9KVxuICAgIH0pXG5cblxufVxuXG5JbnB1dC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ob3Blbil7XG4gICAgdGhpcy5vcGVuID0gb3BlbiA/IG9wZW4gOiAhdGhpcy5vcGVuXG4gICAgdGhpcy5zdGF0ZSgpXG59XG5cbklucHV0LnByb3RvdHlwZS5jb25zdHJ1Y3QgPSBmdW5jdGlvbihwYXJhbXMpe1xuXG4gICAgaWYgKHBhcmFtcykgdGhpcy5pbnB1dCA9IHNldEFycmF5KHRoaXMuaW5wdXQsIHBhcmFtcyk7XG5cbiAgICBpZiggcGFyYW1zLmJvZHkgIT0gZmFsc2UgJiYgcGFyYW1zLmJvZHkpIHRoaXMuYm9keSA9IHNldEFycmF5KHRoaXMuYm9keSwgcGFyYW1zLmJvZHkpXG4gICAgZWxzZSBpZiggcGFyYW1zLmJvZHkgPT09IGZhbHNlKSB0aGlzLmJvZHkgPSBmYWxzZVxuXG4gICAgaWYoIHBhcmFtcy5oZWFkICE9IGZhbHNlICYmIHBhcmFtcy5oZWFkKSB0aGlzLmhlYWQgPSBzZXRBcnJheSh0aGlzLmhlYWQsIHBhcmFtcy5oZWFkKVxuICAgIGVsc2UgaWYoIHBhcmFtcy5oZWFkID09PSBmYWxzZSkgdGhpcy5oZWFkID0gZmFsc2VcblxuICAgIGlmKCBwYXJhbXMub3B0aW9ucyAhPSBmYWxzZSAmJiBwYXJhbXMub3B0aW9ucykgdGhpcy5vcHRpb25zID0gc2V0QXJyYXkodGhpcy5vcHRpb25zLCBwYXJhbXMub3B0aW9ucylcbiAgICBlbHNlIGlmKCBwYXJhbXMub3B0aW9ucyA9PT0gZmFsc2UpIHRoaXMub3B0aW9ucyA9IGZhbHNlXG5cbiAgICBcbiAgICB0aGlzLmNyZWF0ZSgpICBcbn1cblxuXG5JbnB1dC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLm9wdGlvbnMub3B0aW9ucyA9IHRoaXMuZWwub3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucy5zZWxlY3RlZCA9IHRoaXMuZWwuc2VsZWN0ZWRPcHRpb25zXG4gICAgICAgICAgICBcbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy5pbnB1dC50YWcpO1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2FiYy1zZWxlY3QnKTtcblxuICAgIHRoaXMuZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jb250YWluZXIsIHRoaXMuZWwpXG4gICBcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmVsKTtcbiAgICBcbiAgICBpZiggdGhpcy5oZWFkICkgdGhpcy5oZWFkLmNvbnN0cnVjdCh0aGlzKSBcbiAgICBpZiggdGhpcy5ib2R5ICkgdGhpcy5ib2R5LmNvbnN0cnVjdCh0aGlzKSBcbiAgIFxuICAgIGlmKCF0aGlzLmhlYWQuZGVmYXVsdCkgdGhpcy5oZWFkLnRhcmdldC5pbm5lckhUTUwgPSAgdGhpcy5vcHRpb25zLm9wdGlvbnNbMF0uaW5uZXJIVE1MXG4gICAgdGhpcy5zdGF0ZSgpXG5cbiAgIFxuXG4gICAgdGhpcy5iaW5kRXZlbnRzKClcbn1cblxuSW5wdXQucHJvdG90eXBlLnN0YXRlID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLm9wZW4gPyB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHRoaXMuaW5wdXQub3BlbkNsYXNzKSA6IHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5pbnB1dC5vcGVuQ2xhc3MpXG4gICAgdGhpcy5ib2R5LnN0YXRlKHRoaXMub3BlbilcbiAgICB0aGlzLmhlYWQudXBkYXRlKHRoaXMub3B0aW9ucylcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQVFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBOUNBO0FBQ0E7QUFEQTtBQWdEQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW5FQTtBQUFBO0FBQUE7QUFDQTtBQThDQTtBQXNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/Select/Core/Input.js\\n");\n    },\n    "./src/Select/Core/Options.js":\n    /*!************************************!*\\\n      !*** ./src/Select/Core/Options.js ***!\n      \\************************************/\n\n    /*! no static exports found */\n    function (module, exports) {\n      eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\\n\\nfunction _nonIterableSpread() { throw new TypeError(\\"Invalid attempt to spread non-iterable instance\\"); }\\n\\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \\"[object Arguments]\\") { return Array.from(iter); } }\\n\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\\n\\nmodule.exports = function () {\\n  return new Options();\\n};\\n\\nfunction Options() {\\n  this.tag = \'li\';\\n  this.className = \'abc-select__item\';\\n  this.targets = false;\\n  this.values = [];\\n  this.els = [];\\n  this.default = [];\\n}\\n\\nOptions.prototype.construct = function (body) {\\n  var _this = this;\\n\\n  var _a = this.options;\\n\\n  var _f = function _f(option) {\\n    var el = document.createElement(_this.tag);\\n    var _a3 = option.attributes;\\n\\n    var _f3 = function _f3(attr) {\\n      if (attr.name === \\"value\\" && attr.value) {\\n        el.setAttribute(\'abc-value\', attr.value);\\n      } else if (attr.name === \\"id\\" && attr.value) {\\n        el.setAttribute(\\"abc-\\".concat(attr.name), attr.value);\\n      } else if (attr.name && attr.value) {\\n        el.setAttribute(attr.name, attr.value);\\n      }\\n    };\\n\\n    for (var _i3 = 0; _i3 < _a3.length; _i3++) {\\n      _f3(_a3[_i3], _i3, _a3);\\n    }\\n\\n    undefined;\\n    el.innerHTML = option.innerHTML;\\n    el.setAttribute(\'role\', \'option\');\\n    el.setAttribute(\'tabindex\', \'-1\');\\n    el.classList.add(_this.className);\\n    el.related = option;\\n    option.related = el;\\n    body.appendChild(el);\\n\\n    _this.els.push(el);\\n  };\\n\\n  for (var _i = 0; _i < _a.length; _i++) {\\n    _f(_a[_i], _i, _a);\\n  }\\n\\n  undefined;\\n\\n  var _a2 = _toConsumableArray(this.selected);\\n\\n  var _f2 = function _f2(val) {\\n    return val.value;\\n  };\\n\\n  var _r2 = [];\\n\\n  for (var _i2 = 0; _i2 < _a2.length; _i2++) {\\n    _r2.push(_f2(_a2[_i2], _i2, _a2));\\n  }\\n\\n  this.values = _r2;\\n  this.default = this.selected ? _toConsumableArray(this.selected).map(function (val) {\\n    return val.innerHTML;\\n  }) : this.options[0].innerHTML;\\n  return this.els;\\n};\\n\\nOptions.prototype.single = function (el) {\\n  var _this2 = this;\\n\\n  var _a4 = this.els;\\n\\n  var _f4 = function _f4(opt) {\\n    if (opt != el) {\\n      opt.removeAttribute(\'selected\');\\n      opt.removeAttribute(\'aria-selected\');\\n      opt.related.removeAttribute(\'selected\');\\n    } else {\\n      opt.setAttribute(\'selected\', \'selected\');\\n      opt.setAttribute(\'aria-selected\', true);\\n      opt.related.setAttribute(\'selected\', \'selected\');\\n      _this2.selected = [opt];\\n      _this2.default = [opt.innerHTML];\\n      _this2.values = [opt.value];\\n    }\\n  };\\n\\n  for (var _i4 = 0; _i4 < _a4.length; _i4++) {\\n    _f4(_a4[_i4], _i4, _a4);\\n  }\\n\\n  undefined;\\n};\\n\\nOptions.prototype.multi = function (el) {\\n  if (el.hasAttribute(\'selected\')) {\\n    el.removeAttribute(\'selected\');\\n    el.related.removeAttribute(\'selected\');\\n    var indexDef = this.default.indexOf(el.related.innerHTML);\\n    var indexVal = this.values.indexOf(el.related.value);\\n\\n    if (indexDef > -1) {\\n      this.default.splice(indexDef, 1);\\n    }\\n\\n    if (indexVal > -1) {\\n      this.values.splice(indexVal, 1);\\n    }\\n  } else {\\n    el.setAttribute(\'selected\', \'selected\');\\n    el.related.setAttribute(\'selected\', \'selected\');\\n    el.setAttribute(\'aria-selected\', true);\\n    this.default.push(el.related.innerHTML);\\n    this.values.push(el.related.value);\\n  }\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvU2VsZWN0L0NvcmUvT3B0aW9ucy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0FCQy8uL3NyYy9TZWxlY3QvQ29yZS9PcHRpb25zLmpzPzg0MDYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7IHJldHVybiBuZXcgT3B0aW9ucygpIH1cblxuZnVuY3Rpb24gT3B0aW9ucygpe1xuICAgIHRoaXMudGFnID0gJ2xpJ1xuICAgIHRoaXMuY2xhc3NOYW1lID0gJ2FiYy1zZWxlY3RfX2l0ZW0nXG4gICAgdGhpcy50YXJnZXRzID0gZmFsc2VcbiAgICB0aGlzLnZhbHVlcyA9IFtdXG4gICAgdGhpcy5lbHMgPSBbXVxuICAgIHRoaXMuZGVmYXVsdCA9IFtdO1xufVxuXG5PcHRpb25zLnByb3RvdHlwZS5jb25zdHJ1Y3QgPSBmdW5jdGlvbihib2R5KXtcbiAgICB0aGlzLm9wdGlvbnMuZm9yRWFjaChvcHRpb24gPT4ge1xuICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy50YWcpXG4gICAgICAgIG9wdGlvbi5hdHRyaWJ1dGVzLmZvckVhY2goIGF0dHIgPT4ge1xuICAgICAgICAgICAgaWYoYXR0ci5uYW1lID09PSBcInZhbHVlXCIgICYmIGF0dHIudmFsdWUpIGVsLnNldEF0dHJpYnV0ZSgnYWJjLXZhbHVlJywgYXR0ci52YWx1ZSlcbiAgICAgICAgICAgIGVsc2UgaWYoYXR0ci5uYW1lID09PSBcImlkXCIgJiYgYXR0ci52YWx1ZSkgZWwuc2V0QXR0cmlidXRlKGBhYmMtJHthdHRyLm5hbWV9YCwgYXR0ci52YWx1ZSlcbiAgICAgICAgICAgIGVsc2UgaWYoYXR0ci5uYW1lICYmIGF0dHIudmFsdWUpIGVsLnNldEF0dHJpYnV0ZShhdHRyLm5hbWUsIGF0dHIudmFsdWUpXG4gICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICAgICAgZWwuaW5uZXJIVE1MID0gb3B0aW9uLmlubmVySFRNTFxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnb3B0aW9uJylcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpXG5cbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZSlcbiAgICAgICAgZWwucmVsYXRlZCA9IG9wdGlvblxuICAgICAgICBvcHRpb24ucmVsYXRlZCA9IGVsXG4gICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoZWwpXG4gICAgICAgIHRoaXMuZWxzLnB1c2goZWwpXG4gICAgfSk7XG5cbiAgICB0aGlzLnZhbHVlcyA9IFsuLi50aGlzLnNlbGVjdGVkXS5tYXAoIHZhbCA9PiB2YWwudmFsdWUgKVxuICAgIHRoaXMuZGVmYXVsdCA9IHRoaXMuc2VsZWN0ZWQgPyBbLi4udGhpcy5zZWxlY3RlZF0ubWFwKCB2YWwgPT4gdmFsLmlubmVySFRNTCApIDogdGhpcy5vcHRpb25zWzBdLmlubmVySFRNTFxuICAgIFxuICAgIHJldHVybiB0aGlzLmVscztcbn1cblxuXG5PcHRpb25zLnByb3RvdHlwZS5zaW5nbGUgPSBmdW5jdGlvbihlbCl7XG5cbiAgICB0aGlzLmVscy5mb3JFYWNoKCAob3B0KSA9PiB7XG4gICAgICAgIGlmKG9wdCAhPSBlbCl7XG4gICAgICAgICAgICBvcHQucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpXG4gICAgICAgICAgICBvcHQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJylcblxuICAgICAgICAgICAgb3B0LnJlbGF0ZWQucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpIFxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIG9wdC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJylcbiAgICAgICAgICAgIG9wdC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCB0cnVlKVxuICAgICAgICAgICAgb3B0LnJlbGF0ZWQuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsICdzZWxlY3RlZCcpXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gW29wdF1cbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdCA9IFtvcHQuaW5uZXJIVE1MXVxuICAgICAgICAgICAgdGhpcy52YWx1ZXMgPSBbb3B0LnZhbHVlXVxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH0pXG59XG5PcHRpb25zLnByb3RvdHlwZS5tdWx0aSA9IGZ1bmN0aW9uKGVsKXtcbiAgICBpZiggZWwuaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpICl7XG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKVxuICAgICAgICBlbC5yZWxhdGVkLnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKVxuXG4gICAgICAgIGNvbnN0IGluZGV4RGVmID0gdGhpcy5kZWZhdWx0LmluZGV4T2YoZWwucmVsYXRlZC5pbm5lckhUTUwpO1xuICAgICAgICBjb25zdCBpbmRleFZhbCA9IHRoaXMudmFsdWVzLmluZGV4T2YoZWwucmVsYXRlZC52YWx1ZSk7XG4gICAgICAgIGlmKGluZGV4RGVmID4gLTEpIHRoaXMuZGVmYXVsdC5zcGxpY2UoaW5kZXhEZWYsIDEpO1xuICAgICAgICBpZihpbmRleFZhbCA+IC0xKSB0aGlzLnZhbHVlcy5zcGxpY2UoaW5kZXhWYWwsIDEpO1xuICAgIH1lbHNle1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJylcbiAgICAgICAgZWwucmVsYXRlZC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJylcblxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCB0cnVlKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5kZWZhdWx0LnB1c2goZWwucmVsYXRlZC5pbm5lckhUTUwpXG4gICAgICAgIHRoaXMudmFsdWVzLnB1c2goZWwucmVsYXRlZC52YWx1ZSlcbiAgICBcbiAgICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFDQTtBQURBO0FBRUE7QUFEQTtBQUNBO0FBREE7QUFHQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFSQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQW5CQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFGQTtBQUNBO0FBREE7QUFvQkE7QUFBQTtBQUNBO0FBckJBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQW1CQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFsQkE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQWdCQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/Select/Core/Options.js\\n");\n    },\n    "./src/Select/init.js":\n    /*!****************************!*\\\n      !*** ./src/Select/init.js ***!\n      \\****************************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'var Input = __webpack_require__(/*! ./Core/Input */ "./src/Select/Core/Input.js");\\n\\nvar Select = module.exports = {\\n  init: function init(params) {\\n    if (params.all) {\\n      var targets = document.querySelectorAll(params.target);\\n\\n      if (!targets) {\\n        return;\\n      }\\n\\n      var _a = targets;\\n\\n      var _f = function _f(target) {\\n        return new Input(target).construct(params);\\n      };\\n\\n      for (var _i = 0; _i < _a.length; _i++) {\\n        _f(_a[_i], _i, _a);\\n      }\\n\\n      undefined;\\n    } else {\\n      var target = document.querySelector(params.target);\\n\\n      if (!target) {\\n        return;\\n      }\\n\\n      new Input(target).construct(params);\\n    }\\n  }\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvU2VsZWN0L2luaXQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BQkMvLi9zcmMvU2VsZWN0L2luaXQuanM/YjE3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgSW5wdXQgPSByZXF1aXJlKCcuL0NvcmUvSW5wdXQnKVxudmFyIFNlbGVjdCA9IG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBcbiAgICAgICAgaWYocGFyYW1zLmFsbCl7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMudGFyZ2V0KVxuICAgICAgICAgICAgaWYoIXRhcmdldHMpIHJldHVybjtcblxuICAgICAgICAgICAgdGFyZ2V0cy5mb3JFYWNoKCB0YXJnZXQgPT4gbmV3IElucHV0KHRhcmdldCkuY29uc3RydWN0KHBhcmFtcykgKVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocGFyYW1zLnRhcmdldClcbiAgICAgICAgICAgIGlmKCF0YXJnZXQpIHJldHVybjtcbiAgICAgICAgICAgIG5ldyBJbnB1dCh0YXJnZXQpLmNvbnN0cnVjdChwYXJhbXMpXG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFIQTtBQUNBO0FBREE7QUFJQTtBQUFBO0FBQ0E7QUFMQTtBQUFBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFiQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/Select/init.js\\n\');\n    },\n    "./src/abc.js":\n    /*!********************!*\\\n      !*** ./src/abc.js ***!\n      \\********************/\n\n    /*! no static exports found */\n    function (module, exports, __webpack_require__) {\n      eval(\'var ABCFilter = __webpack_require__(/*! ./Filter/init.js */ "./src/Filter/init.js");\\n\\nvar ABCSelect = __webpack_require__(/*! ./Select/init.js */ "./src/Select/init.js");\\n\\nvar ABCRange = __webpack_require__(/*! ./Range/init.js */ "./src/Range/init.js");\\n\\nvar ABCAutoComplete = __webpack_require__(/*! ./AutoComplete/init.js */ "./src/AutoComplete/init.js");\\n\\nvar abc;\\nvar Select = {\\n  init: function init(params) {\\n    new ABCSelect.init(params);\\n  },\\n  test: function test() {\\n    console.log(\\\'ABC Select is running\\\');\\n  }\\n};\\nvar Range = {\\n  init: function init(params) {\\n    new ABCRange.init(params);\\n  }\\n};\\nvar AutoComplete = {\\n  init: function init(params) {\\n    new ABCAutoComplete.init(params);\\n  }\\n};\\nvar Filter = {\\n  init: function init(params) {\\n    abc = new ABCFilter.init(params);\\n    return abc;\\n  },\\n  test: function test() {\\n    console.log(\\\'ABC Filter is running\\\');\\n  } // template : function(){\\n  //     Promise.all([ABC.filter]).then( (abc) =>{\\n  //         console.log(abc[0]);\\n  //     } ); \\n  // }\\n\\n};\\nmodule.exports = {\\n  Filter: Filter,\\n  Select: Select,\\n  Range: Range,\\n  AutoComplete: AutoComplete\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYWJjLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQUJDLy4vc3JjL2FiYy5qcz82YTA3Il0sInNvdXJjZXNDb250ZW50IjpbIlxudmFyIEFCQ0ZpbHRlciA9IHJlcXVpcmUoJy4vRmlsdGVyL2luaXQuanMnKVxudmFyIEFCQ1NlbGVjdCA9IHJlcXVpcmUoJy4vU2VsZWN0L2luaXQuanMnKVxudmFyIEFCQ1JhbmdlID0gcmVxdWlyZSgnLi9SYW5nZS9pbml0LmpzJylcbnZhciBBQkNBdXRvQ29tcGxldGUgPSByZXF1aXJlKCcuL0F1dG9Db21wbGV0ZS9pbml0LmpzJylcblxuXG5sZXQgYWJjO1xudmFyIFNlbGVjdCA9IHtcbiAgICBpbml0OiBmdW5jdGlvbiAocGFyYW1zKSB7IG5ldyBBQkNTZWxlY3QuaW5pdChwYXJhbXMpIH0sXG4gICAgdGVzdDogZnVuY3Rpb24oKSB7IGNvbnNvbGUubG9nKCdBQkMgU2VsZWN0IGlzIHJ1bm5pbmcnKSB9XG59O1xuXG52YXIgUmFuZ2UgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24gKHBhcmFtcykgeyBuZXcgQUJDUmFuZ2UuaW5pdChwYXJhbXMpIH0sXG59XG52YXIgQXV0b0NvbXBsZXRlID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uIChwYXJhbXMpeyBuZXcgQUJDQXV0b0NvbXBsZXRlLmluaXQocGFyYW1zKSB9XG59XG52YXIgRmlsdGVyID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uIChwYXJhbXMpIHsgXG4gICAgICAgIGFiYyA9IG5ldyBBQkNGaWx0ZXIuaW5pdChwYXJhbXMpXG4gICAgICAgIHJldHVybiBhYmNcbiAgICAgfSxcbiAgICB0ZXN0OiBmdW5jdGlvbigpIHsgY29uc29sZS5sb2coJ0FCQyBGaWx0ZXIgaXMgcnVubmluZycpIH1cbiAgICAvLyB0ZW1wbGF0ZSA6IGZ1bmN0aW9uKCl7XG4gICAgLy8gICAgIFByb21pc2UuYWxsKFtBQkMuZmlsdGVyXSkudGhlbiggKGFiYykgPT57XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhhYmNbMF0pO1xuICAgIC8vICAgICB9ICk7IFxuICAgIC8vIH1cbn1cblxuXG5cbm1vZHVsZS5leHBvcnRzID0ge0ZpbHRlciwgU2VsZWN0LCBSYW5nZSwgQXV0b0NvbXBsZXRlfTsiXSwibWFwcGluZ3MiOiJBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBRkE7QUFLQTtBQUNBO0FBQUE7QUFBQTtBQURBO0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWEE7QUFlQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/abc.js\\n\');\n    },\n    0:\n    /*!**************************!*\\\n      !*** multi ./src/abc.js ***!\n      \\**************************/\n\n    /*! no static exports found */\n    function (n, t, e) {\n      n.exports = e(\n      /*! /Users/audreyrobic/projects/abc/abc-filter/src/abc.js */\n      "./src/abc.js");\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYnVpbGQvYWJjLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2J1aWxkL2FiYy5qcz8zNGY0Il0sInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihuLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiQUJDXCIsW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5BQkM9dCgpOm4uQUJDPXQoKX0od2luZG93LGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciB0PXt9O2Z1bmN0aW9uIGUobCl7aWYodFtsXSlyZXR1cm4gdFtsXS5leHBvcnRzO3ZhciBhPXRbbF09e2k6bCxsOiExLGV4cG9ydHM6e319O3JldHVybiBuW2xdLmNhbGwoYS5leHBvcnRzLGEsYS5leHBvcnRzLGUpLGEubD0hMCxhLmV4cG9ydHN9cmV0dXJuIGUubT1uLGUuYz10LGUuZD1mdW5jdGlvbihuLHQsbCl7ZS5vKG4sdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLHQse2VudW1lcmFibGU6ITAsZ2V0Omx9KX0sZS5yPWZ1bmN0aW9uKG4pe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LGUudD1mdW5jdGlvbihuLHQpe2lmKDEmdCYmKG49ZShuKSksOCZ0KXJldHVybiBuO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIG4mJm4mJm4uX19lc01vZHVsZSlyZXR1cm4gbjt2YXIgbD1PYmplY3QuY3JlYXRlKG51bGwpO2lmKGUucihsKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobCxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTpufSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2Ygbilmb3IodmFyIGEgaW4gbillLmQobCxhLGZ1bmN0aW9uKHQpe3JldHVybiBuW3RdfS5iaW5kKG51bGwsYSkpO3JldHVybiBsfSxlLm49ZnVuY3Rpb24obil7dmFyIHQ9biYmbi5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIG4uZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gbn07cmV0dXJuIGUuZCh0LFwiYVwiLHQpLHR9LGUubz1mdW5jdGlvbihuLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobix0KX0sZS5wPVwiXCIsZShlLnM9MCl9KHtcIi4vbm9kZV9tb2R1bGVzL2Z1c2UuanMvZGlzdC9mdXNlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2Z1c2UuanMvZGlzdC9mdXNlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbCgnLyohXFxuICogRnVzZS5qcyB2My40LjYgLSBMaWdodHdlaWdodCBmdXp6eS1zZWFyY2ggKGh0dHA6Ly9mdXNlanMuaW8pXFxuICogXFxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgS2lyb2xsb3MgUmlzayAoaHR0cDovL2tpcm8ubWUpXFxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC4gQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgMi4wXFxuICogXFxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXFxuICovXFxuIWZ1bmN0aW9uKGUsdCl7IHRydWU/bW9kdWxlLmV4cG9ydHM9dCgpOnVuZGVmaW5lZH0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBuKHIpe2lmKHRbcl0pcmV0dXJuIHRbcl0uZXhwb3J0czt2YXIgbz10W3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtyXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyxuKSxvLmw9ITAsby5leHBvcnRzfXJldHVybiBuLm09ZSxuLmM9dCxuLmQ9ZnVuY3Rpb24oZSx0LHIpe24ubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxuLnQ9ZnVuY3Rpb24oZSx0KXtpZigxJnQmJihlPW4oZSkpLDgmdClyZXR1cm4gZTtpZig0JnQmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHI9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihuLnIociksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImdCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciBvIGluIGUpbi5kKHIsbyxmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0uYmluZChudWxsLG8pKTtyZXR1cm4gcn0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCxcImFcIix0KSx0fSxuLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LG4ucD1cIlwiLG4obi5zPTEpfShbZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIEFycmF5LmlzQXJyYXk/QXJyYXkuaXNBcnJheShlKTpcIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9fSxmdW5jdGlvbihlLHQsbil7ZnVuY3Rpb24gcihlKXtyZXR1cm4ocj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSkoZSl9ZnVuY3Rpb24gbyhlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19dmFyIGk9bigyKSxhPW4oOCkscz1uKDApLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbil7dmFyIHI9bi5sb2NhdGlvbixvPXZvaWQgMD09PXI/MDpyLGk9bi5kaXN0YW5jZSxzPXZvaWQgMD09PWk/MTAwOmksYz1uLnRocmVzaG9sZCxoPXZvaWQgMD09PWM/LjY6YyxsPW4ubWF4UGF0dGVybkxlbmd0aCx1PXZvaWQgMD09PWw/MzI6bCxmPW4uY2FzZVNlbnNpdGl2ZSxkPXZvaWQgMCE9PWYmJmYsdj1uLnRva2VuU2VwYXJhdG9yLHA9dm9pZCAwPT09dj8vICsvZzp2LGc9bi5maW5kQWxsTWF0Y2hlcyx5PXZvaWQgMCE9PWcmJmcsbT1uLm1pbk1hdGNoQ2hhckxlbmd0aCxrPXZvaWQgMD09PW0/MTptLFM9bi5pZCx4PXZvaWQgMD09PVM/bnVsbDpTLGI9bi5rZXlzLE09dm9pZCAwPT09Yj9bXTpiLF89bi5zaG91bGRTb3J0LEw9dm9pZCAwPT09X3x8Xyx3PW4uZ2V0Rm4sQT12b2lkIDA9PT13P2E6dyxDPW4uc29ydEZuLEk9dm9pZCAwPT09Qz9mdW5jdGlvbihlLHQpe3JldHVybiBlLnNjb3JlLXQuc2NvcmV9OkMsTz1uLnRva2VuaXplLGo9dm9pZCAwIT09TyYmTyxQPW4ubWF0Y2hBbGxUb2tlbnMsRj12b2lkIDAhPT1QJiZQLFQ9bi5pbmNsdWRlTWF0Y2hlcyx6PXZvaWQgMCE9PVQmJlQsRT1uLmluY2x1ZGVTY29yZSxLPXZvaWQgMCE9PUUmJkUsJD1uLnZlcmJvc2UsSj12b2lkIDAhPT0kJiYkOyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5vcHRpb25zPXtsb2NhdGlvbjpvLGRpc3RhbmNlOnMsdGhyZXNob2xkOmgsbWF4UGF0dGVybkxlbmd0aDp1LGlzQ2FzZVNlbnNpdGl2ZTpkLHRva2VuU2VwYXJhdG9yOnAsZmluZEFsbE1hdGNoZXM6eSxtaW5NYXRjaENoYXJMZW5ndGg6ayxpZDp4LGtleXM6TSxpbmNsdWRlTWF0Y2hlczp6LGluY2x1ZGVTY29yZTpLLHNob3VsZFNvcnQ6TCxnZXRGbjpBLHNvcnRGbjpJLHZlcmJvc2U6Six0b2tlbml6ZTpqLG1hdGNoQWxsVG9rZW5zOkZ9LHRoaXMuc2V0Q29sbGVjdGlvbih0KX12YXIgdCxuLGM7cmV0dXJuIHQ9ZSwobj1be2tleTpcInNldENvbGxlY3Rpb25cIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5saXN0PWUsZX19LHtrZXk6XCJzZWFyY2hcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e2xpbWl0OiExfTt0aGlzLl9sb2coXFwnLS0tLS0tLS0tXFxcXG5TZWFyY2ggcGF0dGVybjogXCJcXCcuY29uY2F0KGUsXFwnXCJcXCcpKTt2YXIgbj10aGlzLl9wcmVwYXJlU2VhcmNoZXJzKGUpLHI9bi50b2tlblNlYXJjaGVycyxvPW4uZnVsbFNlYXJjaGVyLGk9dGhpcy5fc2VhcmNoKHIsbyksYT1pLndlaWdodHMscz1pLnJlc3VsdHM7cmV0dXJuIHRoaXMuX2NvbXB1dGVTY29yZShhLHMpLHRoaXMub3B0aW9ucy5zaG91bGRTb3J0JiZ0aGlzLl9zb3J0KHMpLHQubGltaXQmJlwibnVtYmVyXCI9PXR5cGVvZiB0LmxpbWl0JiYocz1zLnNsaWNlKDAsdC5saW1pdCkpLHRoaXMuX2Zvcm1hdChzKX19LHtrZXk6XCJfcHJlcGFyZVNlYXJjaGVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlwiXCIsdD1bXTtpZih0aGlzLm9wdGlvbnMudG9rZW5pemUpZm9yKHZhciBuPWUuc3BsaXQodGhpcy5vcHRpb25zLnRva2VuU2VwYXJhdG9yKSxyPTAsbz1uLmxlbmd0aDtyPG87cis9MSl0LnB1c2gobmV3IGkobltyXSx0aGlzLm9wdGlvbnMpKTtyZXR1cm57dG9rZW5TZWFyY2hlcnM6dCxmdWxsU2VhcmNoZXI6bmV3IGkoZSx0aGlzLm9wdGlvbnMpfX19LHtrZXk6XCJfc2VhcmNoXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06W10sdD1hcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCxuPXRoaXMubGlzdCxyPXt9LG89W107aWYoXCJzdHJpbmdcIj09dHlwZW9mIG5bMF0pe2Zvcih2YXIgaT0wLGE9bi5sZW5ndGg7aTxhO2krPTEpdGhpcy5fYW5hbHl6ZSh7a2V5OlwiXCIsdmFsdWU6bltpXSxyZWNvcmQ6aSxpbmRleDppfSx7cmVzdWx0TWFwOnIscmVzdWx0czpvLHRva2VuU2VhcmNoZXJzOmUsZnVsbFNlYXJjaGVyOnR9KTtyZXR1cm57d2VpZ2h0czpudWxsLHJlc3VsdHM6b319Zm9yKHZhciBzPXt9LGM9MCxoPW4ubGVuZ3RoO2M8aDtjKz0xKWZvcih2YXIgbD1uW2NdLHU9MCxmPXRoaXMub3B0aW9ucy5rZXlzLmxlbmd0aDt1PGY7dSs9MSl7dmFyIGQ9dGhpcy5vcHRpb25zLmtleXNbdV07aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGQpe2lmKHNbZC5uYW1lXT17d2VpZ2h0OjEtZC53ZWlnaHR8fDF9LGQud2VpZ2h0PD0wfHxkLndlaWdodD4xKXRocm93IG5ldyBFcnJvcihcIktleSB3ZWlnaHQgaGFzIHRvIGJlID4gMCBhbmQgPD0gMVwiKTtkPWQubmFtZX1lbHNlIHNbZF09e3dlaWdodDoxfTt0aGlzLl9hbmFseXplKHtrZXk6ZCx2YWx1ZTp0aGlzLm9wdGlvbnMuZ2V0Rm4obCxkKSxyZWNvcmQ6bCxpbmRleDpjfSx7cmVzdWx0TWFwOnIscmVzdWx0czpvLHRva2VuU2VhcmNoZXJzOmUsZnVsbFNlYXJjaGVyOnR9KX1yZXR1cm57d2VpZ2h0czpzLHJlc3VsdHM6b319fSx7a2V5OlwiX2FuYWx5emVcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPWUua2V5LHI9ZS5hcnJheUluZGV4LG89dm9pZCAwPT09cj8tMTpyLGk9ZS52YWx1ZSxhPWUucmVjb3JkLGM9ZS5pbmRleCxoPXQudG9rZW5TZWFyY2hlcnMsbD12b2lkIDA9PT1oP1tdOmgsdT10LmZ1bGxTZWFyY2hlcixmPXZvaWQgMD09PXU/W106dSxkPXQucmVzdWx0TWFwLHY9dm9pZCAwPT09ZD97fTpkLHA9dC5yZXN1bHRzLGc9dm9pZCAwPT09cD9bXTpwO2lmKG51bGwhPWkpe3ZhciB5PSExLG09LTEsaz0wO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpKXt0aGlzLl9sb2coXCJcXFxcbktleTogXCIuY29uY2F0KFwiXCI9PT1uP1wiLVwiOm4pKTt2YXIgUz1mLnNlYXJjaChpKTtpZih0aGlzLl9sb2coXFwnRnVsbCB0ZXh0OiBcIlxcJy5jb25jYXQoaSxcXCdcIiwgc2NvcmU6IFxcJykuY29uY2F0KFMuc2NvcmUpKSx0aGlzLm9wdGlvbnMudG9rZW5pemUpe2Zvcih2YXIgeD1pLnNwbGl0KHRoaXMub3B0aW9ucy50b2tlblNlcGFyYXRvciksYj1bXSxNPTA7TTxsLmxlbmd0aDtNKz0xKXt2YXIgXz1sW01dO3RoaXMuX2xvZyhcXCdcXFxcblBhdHRlcm46IFwiXFwnLmNvbmNhdChfLnBhdHRlcm4sXFwnXCJcXCcpKTtmb3IodmFyIEw9ITEsdz0wO3c8eC5sZW5ndGg7dys9MSl7dmFyIEE9eFt3XSxDPV8uc2VhcmNoKEEpLEk9e307Qy5pc01hdGNoPyhJW0FdPUMuc2NvcmUseT0hMCxMPSEwLGIucHVzaChDLnNjb3JlKSk6KElbQV09MSx0aGlzLm9wdGlvbnMubWF0Y2hBbGxUb2tlbnN8fGIucHVzaCgxKSksdGhpcy5fbG9nKFxcJ1Rva2VuOiBcIlxcJy5jb25jYXQoQSxcXCdcIiwgc2NvcmU6IFxcJykuY29uY2F0KElbQV0pKX1MJiYoays9MSl9bT1iWzBdO2Zvcih2YXIgTz1iLmxlbmd0aCxqPTE7ajxPO2orPTEpbSs9YltqXTttLz1PLHRoaXMuX2xvZyhcIlRva2VuIHNjb3JlIGF2ZXJhZ2U6XCIsbSl9dmFyIFA9Uy5zY29yZTttPi0xJiYoUD0oUCttKS8yKSx0aGlzLl9sb2coXCJTY29yZSBhdmVyYWdlOlwiLFApO3ZhciBGPSF0aGlzLm9wdGlvbnMudG9rZW5pemV8fCF0aGlzLm9wdGlvbnMubWF0Y2hBbGxUb2tlbnN8fGs+PWwubGVuZ3RoO2lmKHRoaXMuX2xvZyhcIlxcXFxuQ2hlY2sgTWF0Y2hlczogXCIuY29uY2F0KEYpKSwoeXx8Uy5pc01hdGNoKSYmRil7dmFyIFQ9dltjXTtUP1Qub3V0cHV0LnB1c2goe2tleTpuLGFycmF5SW5kZXg6byx2YWx1ZTppLHNjb3JlOlAsbWF0Y2hlZEluZGljZXM6Uy5tYXRjaGVkSW5kaWNlc30pOih2W2NdPXtpdGVtOmEsb3V0cHV0Olt7a2V5Om4sYXJyYXlJbmRleDpvLHZhbHVlOmksc2NvcmU6UCxtYXRjaGVkSW5kaWNlczpTLm1hdGNoZWRJbmRpY2VzfV19LGcucHVzaCh2W2NdKSl9fWVsc2UgaWYocyhpKSlmb3IodmFyIHo9MCxFPWkubGVuZ3RoO3o8RTt6Kz0xKXRoaXMuX2FuYWx5emUoe2tleTpuLGFycmF5SW5kZXg6eix2YWx1ZTppW3pdLHJlY29yZDphLGluZGV4OmN9LHtyZXN1bHRNYXA6dixyZXN1bHRzOmcsdG9rZW5TZWFyY2hlcnM6bCxmdWxsU2VhcmNoZXI6Zn0pfX19LHtrZXk6XCJfY29tcHV0ZVNjb3JlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt0aGlzLl9sb2coXCJcXFxcblxcXFxuQ29tcHV0aW5nIHNjb3JlOlxcXFxuXCIpO2Zvcih2YXIgbj0wLHI9dC5sZW5ndGg7bjxyO24rPTEpe2Zvcih2YXIgbz10W25dLm91dHB1dCxpPW8ubGVuZ3RoLGE9MSxzPTEsYz0wO2M8aTtjKz0xKXt2YXIgaD1lP2Vbb1tjXS5rZXldLndlaWdodDoxLGw9KDE9PT1oP29bY10uc2NvcmU6b1tjXS5zY29yZXx8LjAwMSkqaDsxIT09aD9zPU1hdGgubWluKHMsbCk6KG9bY10ublNjb3JlPWwsYSo9bCl9dFtuXS5zY29yZT0xPT09cz9hOnMsdGhpcy5fbG9nKHRbbl0pfX19LHtrZXk6XCJfc29ydFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX2xvZyhcIlxcXFxuXFxcXG5Tb3J0aW5nLi4uLlwiKSxlLnNvcnQodGhpcy5vcHRpb25zLnNvcnRGbil9fSx7a2V5OlwiX2Zvcm1hdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PVtdO2lmKHRoaXMub3B0aW9ucy52ZXJib3NlKXt2YXIgbj1bXTt0aGlzLl9sb2coXCJcXFxcblxcXFxuT3V0cHV0OlxcXFxuXFxcXG5cIixKU09OLnN0cmluZ2lmeShlLGZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIj09PXIodCkmJm51bGwhPT10KXtpZigtMSE9PW4uaW5kZXhPZih0KSlyZXR1cm47bi5wdXNoKHQpfXJldHVybiB0fSkpLG49bnVsbH12YXIgbz1bXTt0aGlzLm9wdGlvbnMuaW5jbHVkZU1hdGNoZXMmJm8ucHVzaChmdW5jdGlvbihlLHQpe3ZhciBuPWUub3V0cHV0O3QubWF0Y2hlcz1bXTtmb3IodmFyIHI9MCxvPW4ubGVuZ3RoO3I8bztyKz0xKXt2YXIgaT1uW3JdO2lmKDAhPT1pLm1hdGNoZWRJbmRpY2VzLmxlbmd0aCl7dmFyIGE9e2luZGljZXM6aS5tYXRjaGVkSW5kaWNlcyx2YWx1ZTppLnZhbHVlfTtpLmtleSYmKGEua2V5PWkua2V5KSxpLmhhc093blByb3BlcnR5KFwiYXJyYXlJbmRleFwiKSYmaS5hcnJheUluZGV4Pi0xJiYoYS5hcnJheUluZGV4PWkuYXJyYXlJbmRleCksdC5tYXRjaGVzLnB1c2goYSl9fX0pLHRoaXMub3B0aW9ucy5pbmNsdWRlU2NvcmUmJm8ucHVzaChmdW5jdGlvbihlLHQpe3Quc2NvcmU9ZS5zY29yZX0pO2Zvcih2YXIgaT0wLGE9ZS5sZW5ndGg7aTxhO2krPTEpe3ZhciBzPWVbaV07aWYodGhpcy5vcHRpb25zLmlkJiYocy5pdGVtPXRoaXMub3B0aW9ucy5nZXRGbihzLml0ZW0sdGhpcy5vcHRpb25zLmlkKVswXSksby5sZW5ndGgpe2Zvcih2YXIgYz17aXRlbTpzLml0ZW19LGg9MCxsPW8ubGVuZ3RoO2g8bDtoKz0xKW9baF0ocyxjKTt0LnB1c2goYyl9ZWxzZSB0LnB1c2gocy5pdGVtKX1yZXR1cm4gdH19LHtrZXk6XCJfbG9nXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZTt0aGlzLm9wdGlvbnMudmVyYm9zZSYmKGU9Y29uc29sZSkubG9nLmFwcGx5KGUsYXJndW1lbnRzKX19XSkmJm8odC5wcm90b3R5cGUsbiksYyYmbyh0LGMpLGV9KCk7ZS5leHBvcnRzPWN9LGZ1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiByKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX12YXIgbz1uKDMpLGk9big0KSxhPW4oNykscz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuKXt2YXIgcj1uLmxvY2F0aW9uLG89dm9pZCAwPT09cj8wOnIsaT1uLmRpc3RhbmNlLHM9dm9pZCAwPT09aT8xMDA6aSxjPW4udGhyZXNob2xkLGg9dm9pZCAwPT09Yz8uNjpjLGw9bi5tYXhQYXR0ZXJuTGVuZ3RoLHU9dm9pZCAwPT09bD8zMjpsLGY9bi5pc0Nhc2VTZW5zaXRpdmUsZD12b2lkIDAhPT1mJiZmLHY9bi50b2tlblNlcGFyYXRvcixwPXZvaWQgMD09PXY/LyArL2c6dixnPW4uZmluZEFsbE1hdGNoZXMseT12b2lkIDAhPT1nJiZnLG09bi5taW5NYXRjaENoYXJMZW5ndGgsaz12b2lkIDA9PT1tPzE6bTshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMub3B0aW9ucz17bG9jYXRpb246byxkaXN0YW5jZTpzLHRocmVzaG9sZDpoLG1heFBhdHRlcm5MZW5ndGg6dSxpc0Nhc2VTZW5zaXRpdmU6ZCx0b2tlblNlcGFyYXRvcjpwLGZpbmRBbGxNYXRjaGVzOnksbWluTWF0Y2hDaGFyTGVuZ3RoOmt9LHRoaXMucGF0dGVybj10aGlzLm9wdGlvbnMuaXNDYXNlU2Vuc2l0aXZlP3Q6dC50b0xvd2VyQ2FzZSgpLHRoaXMucGF0dGVybi5sZW5ndGg8PXUmJih0aGlzLnBhdHRlcm5BbHBoYWJldD1hKHRoaXMucGF0dGVybikpfXZhciB0LG4scztyZXR1cm4gdD1lLChuPVt7a2V5Olwic2VhcmNoXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYodGhpcy5vcHRpb25zLmlzQ2FzZVNlbnNpdGl2ZXx8KGU9ZS50b0xvd2VyQ2FzZSgpKSx0aGlzLnBhdHRlcm49PT1lKXJldHVybntpc01hdGNoOiEwLHNjb3JlOjAsbWF0Y2hlZEluZGljZXM6W1swLGUubGVuZ3RoLTFdXX07dmFyIHQ9dGhpcy5vcHRpb25zLG49dC5tYXhQYXR0ZXJuTGVuZ3RoLHI9dC50b2tlblNlcGFyYXRvcjtpZih0aGlzLnBhdHRlcm4ubGVuZ3RoPm4pcmV0dXJuIG8oZSx0aGlzLnBhdHRlcm4scik7dmFyIGE9dGhpcy5vcHRpb25zLHM9YS5sb2NhdGlvbixjPWEuZGlzdGFuY2UsaD1hLnRocmVzaG9sZCxsPWEuZmluZEFsbE1hdGNoZXMsdT1hLm1pbk1hdGNoQ2hhckxlbmd0aDtyZXR1cm4gaShlLHRoaXMucGF0dGVybix0aGlzLnBhdHRlcm5BbHBoYWJldCx7bG9jYXRpb246cyxkaXN0YW5jZTpjLHRocmVzaG9sZDpoLGZpbmRBbGxNYXRjaGVzOmwsbWluTWF0Y2hDaGFyTGVuZ3RoOnV9KX19XSkmJnIodC5wcm90b3R5cGUsbikscyYmcih0LHMpLGV9KCk7ZS5leHBvcnRzPXN9LGZ1bmN0aW9uKGUsdCl7dmFyIG49L1tcXFxcLVxcXFxbXFxcXF1cXFxcL1xcXFx7XFxcXH1cXFxcKFxcXFwpXFxcXCpcXFxcK1xcXFw/XFxcXC5cXFxcXFxcXFxcXFxeXFxcXCRcXFxcfF0vZztlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06LyArL2csbz1uZXcgUmVnRXhwKHQucmVwbGFjZShuLFwiXFxcXFxcXFwkJlwiKS5yZXBsYWNlKHIsXCJ8XCIpKSxpPWUubWF0Y2gobyksYT0hIWkscz1bXTtpZihhKWZvcih2YXIgYz0wLGg9aS5sZW5ndGg7YzxoO2MrPTEpe3ZhciBsPWlbY107cy5wdXNoKFtlLmluZGV4T2YobCksbC5sZW5ndGgtMV0pfXJldHVybntzY29yZTphPy41OjEsaXNNYXRjaDphLG1hdGNoZWRJbmRpY2VzOnN9fX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oNSksbz1uKDYpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbixpKXtmb3IodmFyIGE9aS5sb2NhdGlvbixzPXZvaWQgMD09PWE/MDphLGM9aS5kaXN0YW5jZSxoPXZvaWQgMD09PWM/MTAwOmMsbD1pLnRocmVzaG9sZCx1PXZvaWQgMD09PWw/LjY6bCxmPWkuZmluZEFsbE1hdGNoZXMsZD12b2lkIDAhPT1mJiZmLHY9aS5taW5NYXRjaENoYXJMZW5ndGgscD12b2lkIDA9PT12PzE6dixnPXMseT1lLmxlbmd0aCxtPXUsaz1lLmluZGV4T2YodCxnKSxTPXQubGVuZ3RoLHg9W10sYj0wO2I8eTtiKz0xKXhbYl09MDtpZigtMSE9PWspe3ZhciBNPXIodCx7ZXJyb3JzOjAsY3VycmVudExvY2F0aW9uOmssZXhwZWN0ZWRMb2NhdGlvbjpnLGRpc3RhbmNlOmh9KTtpZihtPU1hdGgubWluKE0sbSksLTEhPT0oaz1lLmxhc3RJbmRleE9mKHQsZytTKSkpe3ZhciBfPXIodCx7ZXJyb3JzOjAsY3VycmVudExvY2F0aW9uOmssZXhwZWN0ZWRMb2NhdGlvbjpnLGRpc3RhbmNlOmh9KTttPU1hdGgubWluKF8sbSl9fWs9LTE7Zm9yKHZhciBMPVtdLHc9MSxBPVMreSxDPTE8PChTPD0zMT9TLTE6MzApLEk9MDtJPFM7SSs9MSl7Zm9yKHZhciBPPTAsaj1BO088ajspe3IodCx7ZXJyb3JzOkksY3VycmVudExvY2F0aW9uOmcraixleHBlY3RlZExvY2F0aW9uOmcsZGlzdGFuY2U6aH0pPD1tP089ajpBPWosaj1NYXRoLmZsb29yKChBLU8pLzIrTyl9QT1qO3ZhciBQPU1hdGgubWF4KDEsZy1qKzEpLEY9ZD95Ok1hdGgubWluKGcraix5KStTLFQ9QXJyYXkoRisyKTtUW0YrMV09KDE8PEkpLTE7Zm9yKHZhciB6PUY7ej49UDt6LT0xKXt2YXIgRT16LTEsSz1uW2UuY2hhckF0KEUpXTtpZihLJiYoeFtFXT0xKSxUW3pdPShUW3orMV08PDF8MSkmSywwIT09SSYmKFRbel18PShMW3orMV18TFt6XSk8PDF8MXxMW3orMV0pLFRbel0mQyYmKHc9cih0LHtlcnJvcnM6SSxjdXJyZW50TG9jYXRpb246RSxleHBlY3RlZExvY2F0aW9uOmcsZGlzdGFuY2U6aH0pKTw9bSl7aWYobT13LChrPUUpPD1nKWJyZWFrO1A9TWF0aC5tYXgoMSwyKmctayl9fWlmKHIodCx7ZXJyb3JzOkkrMSxjdXJyZW50TG9jYXRpb246ZyxleHBlY3RlZExvY2F0aW9uOmcsZGlzdGFuY2U6aH0pPm0pYnJlYWs7TD1UfXJldHVybntpc01hdGNoOms+PTAsc2NvcmU6MD09PXc/LjAwMTp3LG1hdGNoZWRJbmRpY2VzOm8oeCxwKX19fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBuPXQuZXJyb3JzLHI9dm9pZCAwPT09bj8wOm4sbz10LmN1cnJlbnRMb2NhdGlvbixpPXZvaWQgMD09PW8/MDpvLGE9dC5leHBlY3RlZExvY2F0aW9uLHM9dm9pZCAwPT09YT8wOmEsYz10LmRpc3RhbmNlLGg9dm9pZCAwPT09Yz8xMDA6YyxsPXIvZS5sZW5ndGgsdT1NYXRoLmFicyhzLWkpO3JldHVybiBoP2wrdS9oOnU/MTpsfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOltdLHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjEsbj1bXSxyPS0xLG89LTEsaT0wLGE9ZS5sZW5ndGg7aTxhO2krPTEpe3ZhciBzPWVbaV07cyYmLTE9PT1yP3I9aTpzfHwtMT09PXJ8fCgobz1pLTEpLXIrMT49dCYmbi5wdXNoKFtyLG9dKSxyPS0xKX1yZXR1cm4gZVtpLTFdJiZpLXI+PXQmJm4ucHVzaChbcixpLTFdKSxufX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXt9LG49ZS5sZW5ndGgscj0wO3I8bjtyKz0xKXRbZS5jaGFyQXQocildPTA7Zm9yKHZhciBvPTA7bzxuO28rPTEpdFtlLmNoYXJBdChvKV18PTE8PG4tby0xO3JldHVybiB0fX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oMCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uIGUodCxuLG8pe2lmKG4pe3ZhciBpPW4uaW5kZXhPZihcIi5cIiksYT1uLHM9bnVsbDstMSE9PWkmJihhPW4uc2xpY2UoMCxpKSxzPW4uc2xpY2UoaSsxKSk7dmFyIGM9dFthXTtpZihudWxsIT1jKWlmKHN8fFwic3RyaW5nXCIhPXR5cGVvZiBjJiZcIm51bWJlclwiIT10eXBlb2YgYylpZihyKGMpKWZvcih2YXIgaD0wLGw9Yy5sZW5ndGg7aDxsO2grPTEpZShjW2hdLHMsbyk7ZWxzZSBzJiZlKGMscyxvKTtlbHNlIG8ucHVzaChjLnRvU3RyaW5nKCkpfWVsc2Ugby5wdXNoKHQpO3JldHVybiBvfShlLHQsW10pfX1dKX0pOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXViMlJsWDIxdlpIVnNaWE12Wm5WelpTNXFjeTlrYVhOMEwyWjFjMlV1YW5NdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5QlFrTXZMaTl1YjJSbFgyMXZaSFZzWlhNdlpuVnpaUzVxY3k5a2FYTjBMMloxYzJVdWFuTS9abVpsTnlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaUZjYmlBcUlFWjFjMlV1YW5NZ2RqTXVOQzQySUMwZ1RHbG5hSFIzWldsbmFIUWdablY2ZW5rdGMyVmhjbU5vSUNob2RIUndPaTh2Wm5WelpXcHpMbWx2S1Z4dUlDb2dYRzRnS2lCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRJdE1qQXhOeUJMYVhKdmJHeHZjeUJTYVhOcklDaG9kSFJ3T2k4dmEybHlieTV0WlNsY2JpQXFJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1SUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JNYVdObGJuTmxJREl1TUZ4dUlDb2dYRzRnS2lCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcUwxeHVJV1oxYm1OMGFXOXVLR1VzZENsN1hDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHVjRjRzl5ZEhNbUpsd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQnRiMlIxYkdVL2JXOWtkV3hsTG1WNGNHOXlkSE05ZENncE9sd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR1JsWm1sdVpTWW1aR1ZtYVc1bExtRnRaRDlrWldacGJtVW9YQ0pHZFhObFhDSXNXMTBzZENrNlhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHVjRjRzl5ZEhNL1pYaHdiM0owY3k1R2RYTmxQWFFvS1RwbExrWjFjMlU5ZENncGZTaDBhR2x6TEdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUdaMWJtTjBhVzl1S0dVcGUzWmhjaUIwUFh0OU8yWjFibU4wYVc5dUlHNG9jaWw3YVdZb2RGdHlYU2x5WlhSMWNtNGdkRnR5WFM1bGVIQnZjblJ6TzNaaGNpQnZQWFJiY2wwOWUyazZjaXhzT2lFeExHVjRjRzl5ZEhNNmUzMTlPM0psZEhWeWJpQmxXM0pkTG1OaGJHd29ieTVsZUhCdmNuUnpMRzhzYnk1bGVIQnZjblJ6TEc0cExHOHViRDBoTUN4dkxtVjRjRzl5ZEhOOWNtVjBkWEp1SUc0dWJUMWxMRzR1WXoxMExHNHVaRDFtZFc1amRHbHZiaWhsTEhRc2NpbDdiaTV2S0dVc2RDbDhmRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobExIUXNlMlZ1ZFcxbGNtRmliR1U2SVRBc1oyVjBPbko5S1gwc2JpNXlQV1oxYm1OMGFXOXVLR1VwZTF3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQlRlVzFpYjJ3bUpsTjViV0p2YkM1MGIxTjBjbWx1WjFSaFp5WW1UMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dVc1UzbHRZbTlzTG5SdlUzUnlhVzVuVkdGbkxIdDJZV3gxWlRwY0lrMXZaSFZzWlZ3aWZTa3NUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dVc1hDSmZYMlZ6VFc5a2RXeGxYQ0lzZTNaaGJIVmxPaUV3ZlNsOUxHNHVkRDFtZFc1amRHbHZiaWhsTEhRcGUybG1LREVtZENZbUtHVTliaWhsS1Nrc09DWjBLWEpsZEhWeWJpQmxPMmxtS0RRbWRDWW1YQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JR1VtSm1VbUptVXVYMTlsYzAxdlpIVnNaU2x5WlhSMWNtNGdaVHQyWVhJZ2NqMVBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BPMmxtS0c0dWNpaHlLU3hQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2NpeGNJbVJsWm1GMWJIUmNJaXg3Wlc1MWJXVnlZV0pzWlRvaE1DeDJZV3gxWlRwbGZTa3NNaVowSmlaY0luTjBjbWx1WjF3aUlUMTBlWEJsYjJZZ1pTbG1iM0lvZG1GeUlHOGdhVzRnWlNsdUxtUW9jaXh2TEdaMWJtTjBhVzl1S0hRcGUzSmxkSFZ5YmlCbFczUmRmUzVpYVc1a0tHNTFiR3dzYnlrcE8zSmxkSFZ5YmlCeWZTeHVMbTQ5Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5WlNZbVpTNWZYMlZ6VFc5a2RXeGxQMloxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJR1V1WkdWbVlYVnNkSDA2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnWlgwN2NtVjBkWEp1SUc0dVpDaDBMRndpWVZ3aUxIUXBMSFI5TEc0dWJ6MW1kVzVqZEdsdmJpaGxMSFFwZTNKbGRIVnliaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvWlN4MEtYMHNiaTV3UFZ3aVhDSXNiaWh1TG5NOU1TbDlLRnRtZFc1amRHbHZiaWhsTEhRcGUyVXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdRWEp5WVhrdWFYTkJjbkpoZVQ5QmNuSmhlUzVwYzBGeWNtRjVLR1VwT2x3aVcyOWlhbVZqZENCQmNuSmhlVjFjSWowOVBVOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2hsS1gxOUxHWjFibU4wYVc5dUtHVXNkQ3h1S1h0bWRXNWpkR2x2YmlCeUtHVXBlM0psZEhWeWJpaHlQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUZONWJXSnZiQ1ltWENKemVXMWliMnhjSWowOWRIbHdaVzltSUZONWJXSnZiQzVwZEdWeVlYUnZjajltZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnZEhsd1pXOW1JR1Y5T21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbEppWmNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJUZVcxaWIyd21KbVV1WTI5dWMzUnlkV04wYjNJOVBUMVRlVzFpYjJ3bUptVWhQVDFUZVcxaWIyd3VjSEp2ZEc5MGVYQmxQMXdpYzNsdFltOXNYQ0k2ZEhsd1pXOW1JR1Y5S1NobEtYMW1kVzVqZEdsdmJpQnZLR1VzZENsN1ptOXlLSFpoY2lCdVBUQTdiangwTG14bGJtZDBhRHR1S3lzcGUzWmhjaUJ5UFhSYmJsMDdjaTVsYm5WdFpYSmhZbXhsUFhJdVpXNTFiV1Z5WVdKc1pYeDhJVEVzY2k1amIyNW1hV2QxY21GaWJHVTlJVEFzWENKMllXeDFaVndpYVc0Z2NpWW1LSEl1ZDNKcGRHRmliR1U5SVRBcExFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsTEhJdWEyVjVMSElwZlgxMllYSWdhVDF1S0RJcExHRTliaWc0S1N4elBXNG9NQ2tzWXoxbWRXNWpkR2x2YmlncGUyWjFibU4wYVc5dUlHVW9kQ3h1S1h0MllYSWdjajF1TG14dlkyRjBhVzl1TEc4OWRtOXBaQ0F3UFQwOWNqOHdPbklzYVQxdUxtUnBjM1JoYm1ObExITTlkbTlwWkNBd1BUMDlhVDh4TURBNmFTeGpQVzR1ZEdoeVpYTm9iMnhrTEdnOWRtOXBaQ0F3UFQwOVl6OHVOanBqTEd3OWJpNXRZWGhRWVhSMFpYSnVUR1Z1WjNSb0xIVTlkbTlwWkNBd1BUMDliRDh6TWpwc0xHWTliaTVqWVhObFUyVnVjMmwwYVhabExHUTlkbTlwWkNBd0lUMDlaaVltWml4MlBXNHVkRzlyWlc1VFpYQmhjbUYwYjNJc2NEMTJiMmxrSURBOVBUMTJQeThnS3k5bk9uWXNaejF1TG1acGJtUkJiR3hOWVhSamFHVnpMSGs5ZG05cFpDQXdJVDA5WnlZbVp5eHRQVzR1YldsdVRXRjBZMmhEYUdGeVRHVnVaM1JvTEdzOWRtOXBaQ0F3UFQwOWJUOHhPbTBzVXoxdUxtbGtMSGc5ZG05cFpDQXdQVDA5VXo5dWRXeHNPbE1zWWoxdUxtdGxlWE1zVFQxMmIybGtJREE5UFQxaVAxdGRPbUlzWHoxdUxuTm9iM1ZzWkZOdmNuUXNURDEyYjJsa0lEQTlQVDFmZkh4ZkxIYzliaTVuWlhSR2JpeEJQWFp2YVdRZ01EMDlQWGMvWVRwM0xFTTliaTV6YjNKMFJtNHNTVDEyYjJsa0lEQTlQVDFEUDJaMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdUlHVXVjMk52Y21VdGRDNXpZMjl5WlgwNlF5eFBQVzR1ZEc5clpXNXBlbVVzYWoxMmIybGtJREFoUFQxUEppWlBMRkE5Ymk1dFlYUmphRUZzYkZSdmEyVnVjeXhHUFhadmFXUWdNQ0U5UFZBbUpsQXNWRDF1TG1sdVkyeDFaR1ZOWVhSamFHVnpMSG85ZG05cFpDQXdJVDA5VkNZbVZDeEZQVzR1YVc1amJIVmtaVk5qYjNKbExFczlkbTlwWkNBd0lUMDlSU1ltUlN3a1BXNHVkbVZ5WW05elpTeEtQWFp2YVdRZ01DRTlQU1FtSmlRN0lXWjFibU4wYVc5dUtHVXNkQ2w3YVdZb0lTaGxJR2x1YzNSaGJtTmxiMllnZENrcGRHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJa05oYm01dmRDQmpZV3hzSUdFZ1kyeGhjM01nWVhNZ1lTQm1kVzVqZEdsdmJsd2lLWDBvZEdocGN5eGxLU3gwYUdsekxtOXdkR2x2Ym5NOWUyeHZZMkYwYVc5dU9tOHNaR2x6ZEdGdVkyVTZjeXgwYUhKbGMyaHZiR1E2YUN4dFlYaFFZWFIwWlhKdVRHVnVaM1JvT25Vc2FYTkRZWE5sVTJWdWMybDBhWFpsT21Rc2RHOXJaVzVUWlhCaGNtRjBiM0k2Y0N4bWFXNWtRV3hzVFdGMFkyaGxjenA1TEcxcGJrMWhkR05vUTJoaGNreGxibWQwYURwckxHbGtPbmdzYTJWNWN6cE5MR2x1WTJ4MVpHVk5ZWFJqYUdWek9ub3NhVzVqYkhWa1pWTmpiM0psT2tzc2MyaHZkV3hrVTI5eWREcE1MR2RsZEVadU9rRXNjMjl5ZEVadU9ra3NkbVZ5WW05elpUcEtMSFJ2YTJWdWFYcGxPbW9zYldGMFkyaEJiR3hVYjJ0bGJuTTZSbjBzZEdocGN5NXpaWFJEYjJ4c1pXTjBhVzl1S0hRcGZYWmhjaUIwTEc0c1l6dHlaWFIxY200Z2REMWxMQ2h1UFZ0N2EyVjVPbHdpYzJWMFEyOXNiR1ZqZEdsdmJsd2lMSFpoYkhWbE9tWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQjBhR2x6TG14cGMzUTlaU3hsZlgwc2UydGxlVHBjSW5ObFlYSmphRndpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VwZTNaaGNpQjBQV0Z5WjNWdFpXNTBjeTVzWlc1bmRHZytNU1ltZG05cFpDQXdJVDA5WVhKbmRXMWxiblJ6V3pGZFAyRnlaM1Z0Wlc1MGMxc3hYVHA3YkdsdGFYUTZJVEY5TzNSb2FYTXVYMnh2WnlnbkxTMHRMUzB0TFMwdFhGeHVVMlZoY21Ob0lIQmhkSFJsY200NklGd2lKeTVqYjI1allYUW9aU3duWENJbktTazdkbUZ5SUc0OWRHaHBjeTVmY0hKbGNHRnlaVk5sWVhKamFHVnljeWhsS1N4eVBXNHVkRzlyWlc1VFpXRnlZMmhsY25Nc2J6MXVMbVoxYkd4VFpXRnlZMmhsY2l4cFBYUm9hWE11WDNObFlYSmphQ2h5TEc4cExHRTlhUzUzWldsbmFIUnpMSE05YVM1eVpYTjFiSFJ6TzNKbGRIVnliaUIwYUdsekxsOWpiMjF3ZFhSbFUyTnZjbVVvWVN4ektTeDBhR2x6TG05d2RHbHZibk11YzJodmRXeGtVMjl5ZENZbWRHaHBjeTVmYzI5eWRDaHpLU3gwTG14cGJXbDBKaVpjSW01MWJXSmxjbHdpUFQxMGVYQmxiMllnZEM1c2FXMXBkQ1ltS0hNOWN5NXpiR2xqWlNnd0xIUXViR2x0YVhRcEtTeDBhR2x6TGw5bWIzSnRZWFFvY3lsOWZTeDdhMlY1T2x3aVgzQnlaWEJoY21WVFpXRnlZMmhsY25OY0lpeDJZV3gxWlRwbWRXNWpkR2x2YmlncGUzWmhjaUJsUFdGeVozVnRaVzUwY3k1c1pXNW5kR2crTUNZbWRtOXBaQ0F3SVQwOVlYSm5kVzFsYm5Seld6QmRQMkZ5WjNWdFpXNTBjMXN3WFRwY0lsd2lMSFE5VzEwN2FXWW9kR2hwY3k1dmNIUnBiMjV6TG5SdmEyVnVhWHBsS1dadmNpaDJZWElnYmoxbExuTndiR2wwS0hSb2FYTXViM0IwYVc5dWN5NTBiMnRsYmxObGNHRnlZWFJ2Y2lrc2NqMHdMRzg5Ymk1c1pXNW5kR2c3Y2p4dk8zSXJQVEVwZEM1d2RYTm9LRzVsZHlCcEtHNWJjbDBzZEdocGN5NXZjSFJwYjI1ektTazdjbVYwZFhKdWUzUnZhMlZ1VTJWaGNtTm9aWEp6T25Rc1puVnNiRk5sWVhKamFHVnlPbTVsZHlCcEtHVXNkR2hwY3k1dmNIUnBiMjV6S1gxOWZTeDdhMlY1T2x3aVgzTmxZWEpqYUZ3aUxIWmhiSFZsT21aMWJtTjBhVzl1S0NsN2RtRnlJR1U5WVhKbmRXMWxiblJ6TG14bGJtZDBhRDR3SmlaMmIybGtJREFoUFQxaGNtZDFiV1Z1ZEhOYk1GMC9ZWEpuZFcxbGJuUnpXekJkT2x0ZExIUTlZWEpuZFcxbGJuUnpMbXhsYm1kMGFENHhQMkZ5WjNWdFpXNTBjMXN4WFRwMmIybGtJREFzYmoxMGFHbHpMbXhwYzNRc2NqMTdmU3h2UFZ0ZE8ybG1LRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJ1V3pCZEtYdG1iM0lvZG1GeUlHazlNQ3hoUFc0dWJHVnVaM1JvTzJrOFlUdHBLejB4S1hSb2FYTXVYMkZ1WVd4NWVtVW9lMnRsZVRwY0lsd2lMSFpoYkhWbE9tNWJhVjBzY21WamIzSmtPbWtzYVc1a1pYZzZhWDBzZTNKbGMzVnNkRTFoY0RweUxISmxjM1ZzZEhNNmJ5eDBiMnRsYmxObFlYSmphR1Z5Y3pwbExHWjFiR3hUWldGeVkyaGxjanAwZlNrN2NtVjBkWEp1ZTNkbGFXZG9kSE02Ym5Wc2JDeHlaWE4xYkhSek9tOTlmV1p2Y2loMllYSWdjejE3ZlN4alBUQXNhRDF1TG14bGJtZDBhRHRqUEdnN1l5czlNU2xtYjNJb2RtRnlJR3c5Ymx0alhTeDFQVEFzWmoxMGFHbHpMbTl3ZEdsdmJuTXVhMlY1Y3k1c1pXNW5kR2c3ZFR4bU8zVXJQVEVwZTNaaGNpQmtQWFJvYVhNdWIzQjBhVzl1Y3k1clpYbHpXM1ZkTzJsbUtGd2ljM1J5YVc1blhDSWhQWFI1Y0dWdlppQmtLWHRwWmloelcyUXVibUZ0WlYwOWUzZGxhV2RvZERveExXUXVkMlZwWjJoMGZId3hmU3hrTG5kbGFXZG9kRHc5TUh4OFpDNTNaV2xuYUhRK01TbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkxaWGtnZDJWcFoyaDBJR2hoY3lCMGJ5QmlaU0ErSURBZ1lXNWtJRHc5SURGY0lpazdaRDFrTG01aGJXVjlaV3h6WlNCelcyUmRQWHQzWldsbmFIUTZNWDA3ZEdocGN5NWZZVzVoYkhsNlpTaDdhMlY1T21Rc2RtRnNkV1U2ZEdocGN5NXZjSFJwYjI1ekxtZGxkRVp1S0d3c1pDa3NjbVZqYjNKa09td3NhVzVrWlhnNlkzMHNlM0psYzNWc2RFMWhjRHB5TEhKbGMzVnNkSE02Ynl4MGIydGxibE5sWVhKamFHVnljenBsTEdaMWJHeFRaV0Z5WTJobGNqcDBmU2w5Y21WMGRYSnVlM2RsYVdkb2RITTZjeXh5WlhOMWJIUnpPbTk5Zlgwc2UydGxlVHBjSWw5aGJtRnNlWHBsWENJc2RtRnNkV1U2Wm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnYmoxbExtdGxlU3h5UFdVdVlYSnlZWGxKYm1SbGVDeHZQWFp2YVdRZ01EMDlQWEkvTFRFNmNpeHBQV1V1ZG1Gc2RXVXNZVDFsTG5KbFkyOXlaQ3hqUFdVdWFXNWtaWGdzYUQxMExuUnZhMlZ1VTJWaGNtTm9aWEp6TEd3OWRtOXBaQ0F3UFQwOWFEOWJYVHBvTEhVOWRDNW1kV3hzVTJWaGNtTm9aWElzWmoxMmIybGtJREE5UFQxMVAxdGRPblVzWkQxMExuSmxjM1ZzZEUxaGNDeDJQWFp2YVdRZ01EMDlQV1EvZTMwNlpDeHdQWFF1Y21WemRXeDBjeXhuUFhadmFXUWdNRDA5UFhBL1cxMDZjRHRwWmlodWRXeHNJVDFwS1h0MllYSWdlVDBoTVN4dFBTMHhMR3M5TUR0cFppaGNJbk4wY21sdVoxd2lQVDEwZVhCbGIyWWdhU2w3ZEdocGN5NWZiRzluS0Z3aVhGeHVTMlY1T2lCY0lpNWpiMjVqWVhRb1hDSmNJajA5UFc0L1hDSXRYQ0k2YmlrcE8zWmhjaUJUUFdZdWMyVmhjbU5vS0drcE8ybG1LSFJvYVhNdVgyeHZaeWduUm5Wc2JDQjBaWGgwT2lCY0lpY3VZMjl1WTJGMEtHa3NKMXdpTENCelkyOXlaVG9nSnlrdVkyOXVZMkYwS0ZNdWMyTnZjbVVwS1N4MGFHbHpMbTl3ZEdsdmJuTXVkRzlyWlc1cGVtVXBlMlp2Y2loMllYSWdlRDFwTG5Od2JHbDBLSFJvYVhNdWIzQjBhVzl1Y3k1MGIydGxibE5sY0dGeVlYUnZjaWtzWWoxYlhTeE5QVEE3VFR4c0xteGxibWQwYUR0Tkt6MHhLWHQyWVhJZ1h6MXNXMDFkTzNSb2FYTXVYMnh2WnlnblhGeHVVR0YwZEdWeWJqb2dYQ0luTG1OdmJtTmhkQ2hmTG5CaGRIUmxjbTRzSjF3aUp5a3BPMlp2Y2loMllYSWdURDBoTVN4M1BUQTdkeng0TG14bGJtZDBhRHQzS3oweEtYdDJZWElnUVQxNFczZGRMRU05WHk1elpXRnlZMmdvUVNrc1NUMTdmVHRETG1selRXRjBZMmcvS0VsYlFWMDlReTV6WTI5eVpTeDVQU0V3TEV3OUlUQXNZaTV3ZFhOb0tFTXVjMk52Y21VcEtUb29TVnRCWFQweExIUm9hWE11YjNCMGFXOXVjeTV0WVhSamFFRnNiRlJ2YTJWdWMzeDhZaTV3ZFhOb0tERXBLU3gwYUdsekxsOXNiMmNvSjFSdmEyVnVPaUJjSWljdVkyOXVZMkYwS0VFc0oxd2lMQ0J6WTI5eVpUb2dKeWt1WTI5dVkyRjBLRWxiUVYwcEtYMU1KaVlvYXlzOU1TbDliVDFpV3pCZE8yWnZjaWgyWVhJZ1R6MWlMbXhsYm1kMGFDeHFQVEU3YWp4UE8yb3JQVEVwYlNzOVlsdHFYVHR0THoxUExIUm9hWE11WDJ4dlp5aGNJbFJ2YTJWdUlITmpiM0psSUdGMlpYSmhaMlU2WENJc2JTbDlkbUZ5SUZBOVV5NXpZMjl5WlR0dFBpMHhKaVlvVUQwb1VDdHRLUzh5S1N4MGFHbHpMbDlzYjJjb1hDSlRZMjl5WlNCaGRtVnlZV2RsT2x3aUxGQXBPM1poY2lCR1BTRjBhR2x6TG05d2RHbHZibk11ZEc5clpXNXBlbVY4ZkNGMGFHbHpMbTl3ZEdsdmJuTXViV0YwWTJoQmJHeFViMnRsYm5OOGZHcytQV3d1YkdWdVozUm9PMmxtS0hSb2FYTXVYMnh2WnloY0lseGNia05vWldOcklFMWhkR05vWlhNNklGd2lMbU52Ym1OaGRDaEdLU2tzS0hsOGZGTXVhWE5OWVhSamFDa21Ka1lwZTNaaGNpQlVQWFpiWTEwN1ZEOVVMbTkxZEhCMWRDNXdkWE5vS0h0clpYazZiaXhoY25KaGVVbHVaR1Y0T204c2RtRnNkV1U2YVN4elkyOXlaVHBRTEcxaGRHTm9aV1JKYm1ScFkyVnpPbE11YldGMFkyaGxaRWx1WkdsalpYTjlLVG9vZGx0alhUMTdhWFJsYlRwaExHOTFkSEIxZERwYmUydGxlVHB1TEdGeWNtRjVTVzVrWlhnNmJ5eDJZV3gxWlRwcExITmpiM0psT2xBc2JXRjBZMmhsWkVsdVpHbGpaWE02VXk1dFlYUmphR1ZrU1c1a2FXTmxjMzFkZlN4bkxuQjFjMmdvZGx0alhTa3BmWDFsYkhObElHbG1LSE1vYVNrcFptOXlLSFpoY2lCNlBUQXNSVDFwTG14bGJtZDBhRHQ2UEVVN2VpczlNU2wwYUdsekxsOWhibUZzZVhwbEtIdHJaWGs2Yml4aGNuSmhlVWx1WkdWNE9ub3NkbUZzZFdVNmFWdDZYU3h5WldOdmNtUTZZU3hwYm1SbGVEcGpmU3g3Y21WemRXeDBUV0Z3T25Zc2NtVnpkV3gwY3pwbkxIUnZhMlZ1VTJWaGNtTm9aWEp6T213c1puVnNiRk5sWVhKamFHVnlPbVo5S1gxOWZTeDdhMlY1T2x3aVgyTnZiWEIxZEdWVFkyOXlaVndpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VzZENsN2RHaHBjeTVmYkc5bktGd2lYRnh1WEZ4dVEyOXRjSFYwYVc1bklITmpiM0psT2x4Y2Jsd2lLVHRtYjNJb2RtRnlJRzQ5TUN4eVBYUXViR1Z1WjNSb08yNDhjanR1S3oweEtYdG1iM0lvZG1GeUlHODlkRnR1WFM1dmRYUndkWFFzYVQxdkxteGxibWQwYUN4aFBURXNjejB4TEdNOU1EdGpQR2s3WXlzOU1TbDdkbUZ5SUdnOVpUOWxXMjliWTEwdWEyVjVYUzUzWldsbmFIUTZNU3hzUFNneFBUMDlhRDl2VzJOZExuTmpiM0psT205YlkxMHVjMk52Y21WOGZDNHdNREVwS21nN01TRTlQV2cvY3oxTllYUm9MbTFwYmloekxHd3BPaWh2VzJOZExtNVRZMjl5WlQxc0xHRXFQV3dwZlhSYmJsMHVjMk52Y21VOU1UMDlQWE0vWVRwekxIUm9hWE11WDJ4dlp5aDBXMjVkS1gxOWZTeDdhMlY1T2x3aVgzTnZjblJjSWl4MllXeDFaVHBtZFc1amRHbHZiaWhsS1h0MGFHbHpMbDlzYjJjb1hDSmNYRzVjWEc1VGIzSjBhVzVuTGk0dUxsd2lLU3hsTG5OdmNuUW9kR2hwY3k1dmNIUnBiMjV6TG5OdmNuUkdiaWw5ZlN4N2EyVjVPbHdpWDJadmNtMWhkRndpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VwZTNaaGNpQjBQVnRkTzJsbUtIUm9hWE11YjNCMGFXOXVjeTUyWlhKaWIzTmxLWHQyWVhJZ2JqMWJYVHQwYUdsekxsOXNiMmNvWENKY1hHNWNYRzVQZFhSd2RYUTZYRnh1WEZ4dVhDSXNTbE5QVGk1emRISnBibWRwWm5rb1pTeG1kVzVqZEdsdmJpaGxMSFFwZTJsbUtGd2liMkpxWldOMFhDSTlQVDF5S0hRcEppWnVkV3hzSVQwOWRDbDdhV1lvTFRFaFBUMXVMbWx1WkdWNFQyWW9kQ2twY21WMGRYSnVPMjR1Y0hWemFDaDBLWDF5WlhSMWNtNGdkSDBwS1N4dVBXNTFiR3g5ZG1GeUlHODlXMTA3ZEdocGN5NXZjSFJwYjI1ekxtbHVZMngxWkdWTllYUmphR1Z6SmladkxuQjFjMmdvWm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnYmoxbExtOTFkSEIxZER0MExtMWhkR05vWlhNOVcxMDdabTl5S0haaGNpQnlQVEFzYnoxdUxteGxibWQwYUR0eVBHODdjaXM5TVNsN2RtRnlJR2s5Ymx0eVhUdHBaaWd3SVQwOWFTNXRZWFJqYUdWa1NXNWthV05sY3k1c1pXNW5kR2dwZTNaaGNpQmhQWHRwYm1ScFkyVnpPbWt1YldGMFkyaGxaRWx1WkdsalpYTXNkbUZzZFdVNmFTNTJZV3gxWlgwN2FTNXJaWGttSmloaExtdGxlVDFwTG10bGVTa3NhUzVvWVhOUGQyNVFjbTl3WlhKMGVTaGNJbUZ5Y21GNVNXNWtaWGhjSWlrbUpta3VZWEp5WVhsSmJtUmxlRDR0TVNZbUtHRXVZWEp5WVhsSmJtUmxlRDFwTG1GeWNtRjVTVzVrWlhncExIUXViV0YwWTJobGN5NXdkWE5vS0dFcGZYMTlLU3gwYUdsekxtOXdkR2x2Ym5NdWFXNWpiSFZrWlZOamIzSmxKaVp2TG5CMWMyZ29ablZ1WTNScGIyNG9aU3gwS1h0MExuTmpiM0psUFdVdWMyTnZjbVY5S1R0bWIzSW9kbUZ5SUdrOU1DeGhQV1V1YkdWdVozUm9PMms4WVR0cEt6MHhLWHQyWVhJZ2N6MWxXMmxkTzJsbUtIUm9hWE11YjNCMGFXOXVjeTVwWkNZbUtITXVhWFJsYlQxMGFHbHpMbTl3ZEdsdmJuTXVaMlYwUm00b2N5NXBkR1Z0TEhSb2FYTXViM0IwYVc5dWN5NXBaQ2xiTUYwcExHOHViR1Z1WjNSb0tYdG1iM0lvZG1GeUlHTTllMmwwWlcwNmN5NXBkR1Z0ZlN4b1BUQXNiRDF2TG14bGJtZDBhRHRvUEd3N2FDczlNU2x2VzJoZEtITXNZeWs3ZEM1d2RYTm9LR01wZldWc2MyVWdkQzV3ZFhOb0tITXVhWFJsYlNsOWNtVjBkWEp1SUhSOWZTeDdhMlY1T2x3aVgyeHZaMXdpTEhaaGJIVmxPbVoxYm1OMGFXOXVLQ2w3ZG1GeUlHVTdkR2hwY3k1dmNIUnBiMjV6TG5abGNtSnZjMlVtSmlobFBXTnZibk52YkdVcExteHZaeTVoY0hCc2VTaGxMR0Z5WjNWdFpXNTBjeWw5ZlYwcEppWnZLSFF1Y0hKdmRHOTBlWEJsTEc0cExHTW1KbThvZEN4aktTeGxmU2dwTzJVdVpYaHdiM0owY3oxamZTeG1kVzVqZEdsdmJpaGxMSFFzYmlsN1puVnVZM1JwYjI0Z2NpaGxMSFFwZTJadmNpaDJZWElnYmowd08yNDhkQzVzWlc1bmRHZzdiaXNyS1h0MllYSWdjajEwVzI1ZE8zSXVaVzUxYldWeVlXSnNaVDF5TG1WdWRXMWxjbUZpYkdWOGZDRXhMSEl1WTI5dVptbG5kWEpoWW14bFBTRXdMRndpZG1Gc2RXVmNJbWx1SUhJbUppaHlMbmR5YVhSaFlteGxQU0V3S1N4UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aU3h5TG10bGVTeHlLWDE5ZG1GeUlHODliaWd6S1N4cFBXNG9OQ2tzWVQxdUtEY3BMSE05Wm5WdVkzUnBiMjRvS1h0bWRXNWpkR2x2YmlCbEtIUXNiaWw3ZG1GeUlISTliaTVzYjJOaGRHbHZiaXh2UFhadmFXUWdNRDA5UFhJL01EcHlMR2s5Ymk1a2FYTjBZVzVqWlN4elBYWnZhV1FnTUQwOVBXay9NVEF3T21rc1l6MXVMblJvY21WemFHOXNaQ3hvUFhadmFXUWdNRDA5UFdNL0xqWTZZeXhzUFc0dWJXRjRVR0YwZEdWeWJreGxibWQwYUN4MVBYWnZhV1FnTUQwOVBXdy9Nekk2YkN4bVBXNHVhWE5EWVhObFUyVnVjMmwwYVhabExHUTlkbTlwWkNBd0lUMDlaaVltWml4MlBXNHVkRzlyWlc1VFpYQmhjbUYwYjNJc2NEMTJiMmxrSURBOVBUMTJQeThnS3k5bk9uWXNaejF1TG1acGJtUkJiR3hOWVhSamFHVnpMSGs5ZG05cFpDQXdJVDA5WnlZbVp5eHRQVzR1YldsdVRXRjBZMmhEYUdGeVRHVnVaM1JvTEdzOWRtOXBaQ0F3UFQwOWJUOHhPbTA3SVdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvSVNobElHbHVjM1JoYm1ObGIyWWdkQ2twZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrTmhibTV2ZENCallXeHNJR0VnWTJ4aGMzTWdZWE1nWVNCbWRXNWpkR2x2Ymx3aUtYMG9kR2hwY3l4bEtTeDBhR2x6TG05d2RHbHZibk05ZTJ4dlkyRjBhVzl1T204c1pHbHpkR0Z1WTJVNmN5eDBhSEpsYzJodmJHUTZhQ3h0WVhoUVlYUjBaWEp1VEdWdVozUm9PblVzYVhORFlYTmxVMlZ1YzJsMGFYWmxPbVFzZEc5clpXNVRaWEJoY21GMGIzSTZjQ3htYVc1a1FXeHNUV0YwWTJobGN6cDVMRzFwYmsxaGRHTm9RMmhoY2t4bGJtZDBhRHByZlN4MGFHbHpMbkJoZEhSbGNtNDlkR2hwY3k1dmNIUnBiMjV6TG1selEyRnpaVk5sYm5OcGRHbDJaVDkwT25RdWRHOU1iM2RsY2tOaGMyVW9LU3gwYUdsekxuQmhkSFJsY200dWJHVnVaM1JvUEQxMUppWW9kR2hwY3k1d1lYUjBaWEp1UVd4d2FHRmlaWFE5WVNoMGFHbHpMbkJoZEhSbGNtNHBLWDEyWVhJZ2RDeHVMSE03Y21WMGRYSnVJSFE5WlN3b2JqMWJlMnRsZVRwY0luTmxZWEpqYUZ3aUxIWmhiSFZsT21aMWJtTjBhVzl1S0dVcGUybG1LSFJvYVhNdWIzQjBhVzl1Y3k1cGMwTmhjMlZUWlc1emFYUnBkbVY4ZkNobFBXVXVkRzlNYjNkbGNrTmhjMlVvS1Nrc2RHaHBjeTV3WVhSMFpYSnVQVDA5WlNseVpYUjFjbTU3YVhOTllYUmphRG9oTUN4elkyOXlaVG93TEcxaGRHTm9aV1JKYm1ScFkyVnpPbHRiTUN4bExteGxibWQwYUMweFhWMTlPM1poY2lCMFBYUm9hWE11YjNCMGFXOXVjeXh1UFhRdWJXRjRVR0YwZEdWeWJreGxibWQwYUN4eVBYUXVkRzlyWlc1VFpYQmhjbUYwYjNJN2FXWW9kR2hwY3k1d1lYUjBaWEp1TG14bGJtZDBhRDV1S1hKbGRIVnliaUJ2S0dVc2RHaHBjeTV3WVhSMFpYSnVMSElwTzNaaGNpQmhQWFJvYVhNdWIzQjBhVzl1Y3l4elBXRXViRzlqWVhScGIyNHNZejFoTG1ScGMzUmhibU5sTEdnOVlTNTBhSEpsYzJodmJHUXNiRDFoTG1acGJtUkJiR3hOWVhSamFHVnpMSFU5WVM1dGFXNU5ZWFJqYUVOb1lYSk1aVzVuZEdnN2NtVjBkWEp1SUdrb1pTeDBhR2x6TG5CaGRIUmxjbTRzZEdocGN5NXdZWFIwWlhKdVFXeHdhR0ZpWlhRc2UyeHZZMkYwYVc5dU9uTXNaR2x6ZEdGdVkyVTZZeXgwYUhKbGMyaHZiR1E2YUN4bWFXNWtRV3hzVFdGMFkyaGxjenBzTEcxcGJrMWhkR05vUTJoaGNreGxibWQwYURwMWZTbDlmVjBwSmlaeUtIUXVjSEp2ZEc5MGVYQmxMRzRwTEhNbUpuSW9kQ3h6S1N4bGZTZ3BPMlV1Wlhod2IzSjBjejF6ZlN4bWRXNWpkR2x2YmlobExIUXBlM1poY2lCdVBTOWJYRnd0WEZ4YlhGeGRYRnd2WEZ4N1hGeDlYRndvWEZ3cFhGd3FYRndyWEZ3L1hGd3VYRnhjWEZ4Y1hseGNKRnhjZkYwdlp6dGxMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwS1h0MllYSWdjajFoY21kMWJXVnVkSE11YkdWdVozUm9QakltSm5admFXUWdNQ0U5UFdGeVozVnRaVzUwYzFzeVhUOWhjbWQxYldWdWRITmJNbDA2THlBckwyY3NiejF1WlhjZ1VtVm5SWGh3S0hRdWNtVndiR0ZqWlNodUxGd2lYRnhjWENRbVhDSXBMbkpsY0d4aFkyVW9jaXhjSW54Y0lpa3BMR2s5WlM1dFlYUmphQ2h2S1N4aFBTRWhhU3h6UFZ0ZE8ybG1LR0VwWm05eUtIWmhjaUJqUFRBc2FEMXBMbXhsYm1kMGFEdGpQR2c3WXlzOU1TbDdkbUZ5SUd3OWFWdGpYVHR6TG5CMWMyZ29XMlV1YVc1a1pYaFBaaWhzS1N4c0xteGxibWQwYUMweFhTbDljbVYwZFhKdWUzTmpiM0psT21FL0xqVTZNU3hwYzAxaGRHTm9PbUVzYldGMFkyaGxaRWx1WkdsalpYTTZjMzE5ZlN4bWRXNWpkR2x2YmlobExIUXNiaWw3ZG1GeUlISTliaWcxS1N4dlBXNG9OaWs3WlM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDeHVMR2twZTJadmNpaDJZWElnWVQxcExteHZZMkYwYVc5dUxITTlkbTlwWkNBd1BUMDlZVDh3T21Fc1l6MXBMbVJwYzNSaGJtTmxMR2c5ZG05cFpDQXdQVDA5WXo4eE1EQTZZeXhzUFdrdWRHaHlaWE5vYjJ4a0xIVTlkbTlwWkNBd1BUMDliRDh1Tmpwc0xHWTlhUzVtYVc1a1FXeHNUV0YwWTJobGN5eGtQWFp2YVdRZ01DRTlQV1ltSm1Zc2RqMXBMbTFwYmsxaGRHTm9RMmhoY2t4bGJtZDBhQ3h3UFhadmFXUWdNRDA5UFhZL01UcDJMR2M5Y3l4NVBXVXViR1Z1WjNSb0xHMDlkU3hyUFdVdWFXNWtaWGhQWmloMExHY3BMRk05ZEM1c1pXNW5kR2dzZUQxYlhTeGlQVEE3WWp4NU8ySXJQVEVwZUZ0aVhUMHdPMmxtS0MweElUMDlheWw3ZG1GeUlFMDljaWgwTEh0bGNuSnZjbk02TUN4amRYSnlaVzUwVEc5allYUnBiMjQ2YXl4bGVIQmxZM1JsWkV4dlkyRjBhVzl1T21jc1pHbHpkR0Z1WTJVNmFIMHBPMmxtS0cwOVRXRjBhQzV0YVc0b1RTeHRLU3d0TVNFOVBTaHJQV1V1YkdGemRFbHVaR1Y0VDJZb2RDeG5LMU1wS1NsN2RtRnlJRjg5Y2loMExIdGxjbkp2Y25NNk1DeGpkWEp5Wlc1MFRHOWpZWFJwYjI0NmF5eGxlSEJsWTNSbFpFeHZZMkYwYVc5dU9tY3NaR2x6ZEdGdVkyVTZhSDBwTzIwOVRXRjBhQzV0YVc0b1h5eHRLWDE5YXowdE1UdG1iM0lvZG1GeUlFdzlXMTBzZHoweExFRTlVeXQ1TEVNOU1UdzhLRk04UFRNeFAxTXRNVG96TUNrc1NUMHdPMGs4VXp0Skt6MHhLWHRtYjNJb2RtRnlJRTg5TUN4cVBVRTdUenhxT3lsN2NpaDBMSHRsY25KdmNuTTZTU3hqZFhKeVpXNTBURzlqWVhScGIyNDZaeXRxTEdWNGNHVmpkR1ZrVEc5allYUnBiMjQ2Wnl4a2FYTjBZVzVqWlRwb2ZTazhQVzAvVHoxcU9rRTlhaXhxUFUxaGRHZ3VabXh2YjNJb0tFRXRUeWt2TWl0UEtYMUJQV283ZG1GeUlGQTlUV0YwYUM1dFlYZ29NU3huTFdvck1Ta3NSajFrUDNrNlRXRjBhQzV0YVc0b1p5dHFMSGtwSzFNc1ZEMUJjbkpoZVNoR0t6SXBPMVJiUmlzeFhUMG9NVHc4U1NrdE1UdG1iM0lvZG1GeUlIbzlSanQ2UGoxUU8zb3RQVEVwZTNaaGNpQkZQWG90TVN4TFBXNWJaUzVqYUdGeVFYUW9SU2xkTzJsbUtFc21KaWg0VzBWZFBURXBMRlJiZWwwOUtGUmJlaXN4WFR3OE1Yd3hLU1pMTERBaFBUMUpKaVlvVkZ0NlhYdzlLRXhiZWlzeFhYeE1XM3BkS1R3OE1Yd3hmRXhiZWlzeFhTa3NWRnQ2WFNaREppWW9kejF5S0hRc2UyVnljbTl5Y3pwSkxHTjFjbkpsYm5STWIyTmhkR2x2YmpwRkxHVjRjR1ZqZEdWa1RHOWpZWFJwYjI0Nlp5eGthWE4wWVc1alpUcG9mU2twUEQxdEtYdHBaaWh0UFhjc0tHczlSU2s4UFdjcFluSmxZV3M3VUQxTllYUm9MbTFoZUNneExESXFaeTFyS1gxOWFXWW9jaWgwTEh0bGNuSnZjbk02U1NzeExHTjFjbkpsYm5STWIyTmhkR2x2YmpwbkxHVjRjR1ZqZEdWa1RHOWpZWFJwYjI0Nlp5eGthWE4wWVc1alpUcG9mU2srYlNsaWNtVmhhenRNUFZSOWNtVjBkWEp1ZTJselRXRjBZMmc2YXo0OU1DeHpZMjl5WlRvd1BUMDlkejh1TURBeE9uY3NiV0YwWTJobFpFbHVaR2xqWlhNNmJ5aDRMSEFwZlgxOUxHWjFibU4wYVc5dUtHVXNkQ2w3WlM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDbDdkbUZ5SUc0OWRDNWxjbkp2Y25Nc2NqMTJiMmxrSURBOVBUMXVQekE2Yml4dlBYUXVZM1Z5Y21WdWRFeHZZMkYwYVc5dUxHazlkbTlwWkNBd1BUMDliejh3T204c1lUMTBMbVY0Y0dWamRHVmtURzlqWVhScGIyNHNjejEyYjJsa0lEQTlQVDFoUHpBNllTeGpQWFF1WkdsemRHRnVZMlVzYUQxMmIybGtJREE5UFQxalB6RXdNRHBqTEd3OWNpOWxMbXhsYm1kMGFDeDFQVTFoZEdndVlXSnpLSE10YVNrN2NtVjBkWEp1SUdnL2JDdDFMMmc2ZFQ4eE9teDlmU3htZFc1amRHbHZiaWhsTEhRcGUyVXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpZ3BlMlp2Y2loMllYSWdaVDFoY21kMWJXVnVkSE11YkdWdVozUm9QakFtSm5admFXUWdNQ0U5UFdGeVozVnRaVzUwYzFzd1hUOWhjbWQxYldWdWRITmJNRjA2VzEwc2REMWhjbWQxYldWdWRITXViR1Z1WjNSb1BqRW1Kblp2YVdRZ01DRTlQV0Z5WjNWdFpXNTBjMXN4WFQ5aGNtZDFiV1Z1ZEhOYk1WMDZNU3h1UFZ0ZExISTlMVEVzYnowdE1TeHBQVEFzWVQxbExteGxibWQwYUR0cFBHRTdhU3M5TVNsN2RtRnlJSE05WlZ0cFhUdHpKaVl0TVQwOVBYSS9jajFwT25OOGZDMHhQVDA5Y254OEtDaHZQV2t0TVNrdGNpc3hQajEwSmladUxuQjFjMmdvVzNJc2IxMHBMSEk5TFRFcGZYSmxkSFZ5YmlCbFcya3RNVjBtSm1rdGNqNDlkQ1ltYmk1d2RYTm9LRnR5TEdrdE1WMHBMRzU5ZlN4bWRXNWpkR2x2YmlobExIUXBlMlV1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsS1h0bWIzSW9kbUZ5SUhROWUzMHNiajFsTG14bGJtZDBhQ3h5UFRBN2NqeHVPM0lyUFRFcGRGdGxMbU5vWVhKQmRDaHlLVjA5TUR0bWIzSW9kbUZ5SUc4OU1EdHZQRzQ3YnlzOU1TbDBXMlV1WTJoaGNrRjBLRzhwWFh3OU1UdzhiaTF2TFRFN2NtVjBkWEp1SUhSOWZTeG1kVzVqZEdsdmJpaGxMSFFzYmlsN2RtRnlJSEk5Ymlnd0tUdGxMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwS1h0eVpYUjFjbTRnWm5WdVkzUnBiMjRnWlNoMExHNHNieWw3YVdZb2JpbDdkbUZ5SUdrOWJpNXBibVJsZUU5bUtGd2lMbHdpS1N4aFBXNHNjejF1ZFd4c095MHhJVDA5YVNZbUtHRTliaTV6YkdsalpTZ3dMR2twTEhNOWJpNXpiR2xqWlNocEt6RXBLVHQyWVhJZ1l6MTBXMkZkTzJsbUtHNTFiR3doUFdNcGFXWW9jM3g4WENKemRISnBibWRjSWlFOWRIbHdaVzltSUdNbUpsd2liblZ0WW1WeVhDSWhQWFI1Y0dWdlppQmpLV2xtS0hJb1l5a3BabTl5S0haaGNpQm9QVEFzYkQxakxteGxibWQwYUR0b1BHdzdhQ3M5TVNsbEtHTmJhRjBzY3l4dktUdGxiSE5sSUhNbUptVW9ZeXh6TEc4cE8yVnNjMlVnYnk1d2RYTm9LR011ZEc5VGRISnBibWNvS1NsOVpXeHpaU0J2TG5CMWMyZ29kQ2s3Y21WMGRYSnVJRzk5S0dVc2RDeGJYU2w5ZlYwcGZTazdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL25vZGVfbW9kdWxlcy9mdXNlLmpzL2Rpc3QvZnVzZS5qc1xcbicpfSxcIi4vc3JjL0F1dG9Db21wbGV0ZS9Db3JlL0lucHV0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0F1dG9Db21wbGV0ZS9Db3JlL0lucHV0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbChcInZhciBGdXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgZnVzZS5qcyAqLyBcXFwiLi9ub2RlX21vZHVsZXMvZnVzZS5qcy9kaXN0L2Z1c2UuanNcXFwiKTtcXG5cXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi9IZWxwZXJzL0FycmF5ICovIFxcXCIuL3NyYy9IZWxwZXJzL0FycmF5LmpzXFxcIiksXFxuICAgIHNldEFycmF5ID0gX3JlcXVpcmUuc2V0QXJyYXksXFxuICAgIGluQXJyYXkgPSBfcmVxdWlyZS5pbkFycmF5O1xcblxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xcbiAgcmV0dXJuIG5ldyBBdXRvQ29tcGxldGUoKTtcXG59O1xcblxcbmZ1bmN0aW9uIEF1dG9Db21wbGV0ZSgpIHtcXG4gIHRoaXMudXJsID0gZmFsc2U7XFxuICB0aGlzLmRhdGFzID0gZmFsc2U7XFxuICB0aGlzLnJlc3VsdHMgPSB7XFxuICAgIHBhdGg6ICcnXFxuICB9O1xcbiAgdGhpcy5sYWJlbCA9IHtcXG4gICAgdGFyZ2V0OiBmYWxzZSxcXG4gICAgZGVmYXVsdDogZmFsc2UsXFxuICAgIHNpbmd1bGFyOiBmYWxzZSxcXG4gICAgcGx1cmFsOiBmYWxzZSxcXG4gICAgemVybzogZmFsc2VcXG4gIH07XFxuICB0aGlzLm1heCA9IDEwMDtcXG4gIHRoaXMudGFyZ2V0ID0gZmFsc2U7XFxuICB0aGlzLnRlbXBsYXRlID0ge307XFxufVxcblxcbkF1dG9Db21wbGV0ZS5wcm90b3R5cGUuY29uc3RydWN0ID0gZnVuY3Rpb24gKHBhcmFtcykge1xcbiAgdmFyIGdldERhdGFzO1xcblxcbiAgaWYgKHBhcmFtcykge1xcbiAgICBzZXRBcnJheSh0aGlzLCBwYXJhbXMpO1xcbiAgfVxcblxcbiAgaWYgKHRoaXMudXJsKSB7XFxuICAgIGdldERhdGFzID0gdGhpcy5maW5kO1xcbiAgICBnZXREYXRhcygpO1xcbiAgfVxcblxcbiAgUHJvbWlzZS5hbGwoW2dldERhdGFzXSkudGhlbihmdW5jdGlvbiAoKSB7XFxuICAgIHZhciBvcHRpb25zID0ge1xcbiAgICAgIHRocmVzaG9sZDogMC40LFxcbiAgICAgIGtleXM6IGNvbXBhcmUsXFxuICAgICAgZGlzdGFuY2U6IDEwMDAwXFxuICAgIH07XFxuICAgIHZhciBmdXNlID0gbmV3IEZ1c2UoZGF0YXMsIG9wdGlvbnMpO1xcbiAgICByZXR1cm4gdmFsdWUgPyBmdXNlLnNlYXJjaCh2YWx1ZSkgOiBkYXRhcztcXG4gIH0pO1xcbn07XFxuXFxuQXV0b0NvbXBsZXRlLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKCkge1xcbiAgdmFyIF90aGlzID0gdGhpcztcXG5cXG4gIGlmICh0aGlzLnVybCkge1xcbiAgICBmZXRjaCh0aGlzLnVybCwgdGhpcykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcXG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChqc29uKSB7XFxuICAgICAgX3RoaXMuRmV0Y2gobnVsbCwganNvbiwgX3RoaXMpO1xcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcXG4gICAgICByZXR1cm4gX3RoaXMuRmV0Y2goZXJyb3IsIG51bGwpO1xcbiAgICB9KTtcXG4gIH1cXG59O1xcblxcbkF1dG9Db21wbGV0ZS5wcm90b3R5cGUuRmV0Y2ggPSBmdW5jdGlvbiAoZXJyb3IsIHN1Y2Nlc3MpIHtcXG4gIGlmIChlcnJvcikge1xcbiAgICBjb25zb2xlLmxvZyhlcnJvcik7XFxuICB9IGVsc2Uge1xcbiAgICB0aGlzLmRhdGFzID0gc3VjY2VzcztcXG5cXG4gICAgaWYgKHRoaXMucmVzdWx0cy5wYXRoKSB7XFxuICAgICAgdGhpcy5kYXRhcyA9IGluQXJyYXkodGhpcy5kYXRhcywgdGhpcy5yZXN1bHRzLnBhdGgpO1xcbiAgICB9XFxuICB9XFxufTsgLy8gICBmdW5jdGlvbiBhdXRvY29tcGxldGUob3B0aW9ucyl7XFxuLy8gICAgIG9wdGlvbnMgPSB7XFxuLy8gICAgICAgJ3VybCcgICA6IG9wdGlvbnMudXJsID8gb3B0aW9ucy51cmwgOiAnJyxcXG4vLyAgICAgICAnZGF0YXMnIDogb3B0aW9ucy5kYXRhcyA/IG9wdGlvbnMuZGF0YXMgOiAnJyxcXG4vLyAgICAgICAnbm9fcmVzdWx0cycgOiBvcHRpb25zLm5vX3Jlc3VsdHMgPyBvcHRpb25zLm5vX3Jlc3VsdHMgOiAnJyxcXG4vLyAgICAgICAnbWF4X3Jlc3VsdHNfdGV4dCcgOiBvcHRpb25zLm1heF9yZXN1bHRzX3RleHQgPyBvcHRpb25zLm1heF9yZXN1bHRzX3RleHQgOiAnJyxcXG4vLyAgICAgICAnbWF4X3Jlc3VsdHMnOiBvcHRpb25zLm1heF9yZXN1bHRzID8gb3B0aW9ucy5tYXhfcmVzdWx0cyA6ICcnLFxcbi8vICAgICAgICd0YXJnZXRzJyA6IG9wdGlvbnMudGFyZ2V0cyA/IG9wdGlvbnMudGFyZ2V0cyA6ICcnLFxcbi8vICAgICAgICd0b19zaG93JyA6IG9wdGlvbnMudG9fc2hvdyA/IG9wdGlvbnMudG9fc2hvdyA6ICcnLFxcbi8vICAgICB9XFxuLy8gICAgIG9wdGlvbnMudGFyZ2V0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCR7b3B0aW9ucy50YXJnZXRzfWApO1xcbi8vICAgICBvcHRpb25zLmRhdGFzID0gZ2V0RGF0YXMob3B0aW9ucyk7XFxuLy8gICAgIGlmKCFvcHRpb25zLnRhcmdldHMgfHwgIW9wdGlvbnMuZGF0YXMpIHJldHVyblxcbi8vICAgICBpbml0KG9wdGlvbnMpXFxuLy8gICB9XFxuLy8gICBmdW5jdGlvbiBpbml0KG9wdGlvbnMpe1xcbi8vICAgICBvcHRpb25zLnRhcmdldHMuZm9yRWFjaCggdCA9PiB7XFxuLy8gICAgICAgY29uc3QgYmxvY2tMaXN0ID0gY3JlYXRlRG9tX2VsKCd1bCcsJ2F1dG9jb21wbGV0ZS1pdGVtcycpXFxuLy8gICAgICAgdC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGJsb2NrTGlzdClcXG4vLyAgICAgICB0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZSA9PiBkaXNwbGF5TWF0Y2hlcyh0LCBvcHRpb25zLCBibG9ja0xpc3QpKTtcXG4vLyAgICAgfSlcXG4vLyAgIH1cXG4vLyAgIGZ1bmN0aW9uIGZpbmRNYXRjaGVzKHRvTWF0Y2gsIG9wdGlvbnMpIHtcXG4vLyAgICAgcmV0dXJuIG9wdGlvbnMuZGF0YXMuZmlsdGVyKGQgPT4ge1xcbi8vICAgICAgIGNvbnN0IGF0dHIgPSBpbkFycmF5KGQsIG9wdGlvbnMudG9fc2hvdylcXG4vLyAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAodG9NYXRjaCwgJ2dpJyk7XFxuLy8gICAgICAgcmV0dXJuIFN0cmluZyhhdHRyKS5tYXRjaChyZWdleClcXG4vLyAgICAgfSk7XFxuLy8gICB9XFxuLy8gICBmdW5jdGlvbiBkaXNwbGF5TWF0Y2hlcyh0LCBvcHRpb25zLCBibG9ja0xpc3QpIHtcXG4vLyAgICAgY29uc3QgdG9NYXRjaCA9IHQudmFsdWU7XFxuLy8gICAgIGlmICh0b01hdGNoICYmIHRvTWF0Y2gubGVuZ3RoID4gMCApIHQucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdpc0FjdGl2ZScpXFxuLy8gICAgIGVsc2UgdC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2lzQWN0aXZlJylcXG4vLyAgICAgY29uc3QgbWF0Y2hBcnJheSA9IGZpbmRNYXRjaGVzKHRvTWF0Y2gsIG9wdGlvbnMpO1xcbi8vICAgICBsZXQgaHRtbDtcXG4vLyAgICAgaWYgKG9wdGlvbnMubWF4X3Jlc3VsdHMgJiYgbWF0Y2hBcnJheS5sZW5ndGggPiBvcHRpb25zLm1heF9yZXN1bHRzKSBodG1sID0gZnVsbFJlc3VsdChtYXRjaEFycmF5LCBvcHRpb25zKVxcbi8vICAgICBlbHNlIGlmIChtYXRjaEFycmF5Lmxlbmd0aCA9PT0gMCApIGh0bWwgPSBub1Jlc3VsdChtYXRjaEFycmF5LCBvcHRpb25zKVxcbi8vICAgICBlbHNlIGh0bWwgPSByZXN1bHRzKHRvTWF0Y2gsIG1hdGNoQXJyYXksIG9wdGlvbnMpXFxuLy8gICAgIGJsb2NrTGlzdC5pbm5lckhUTUwgPSBodG1sO1xcbi8vICAgICBibG9ja0xpc3Quc3R5bGUuaGVpZ2h0ID0gWy4uLmJsb2NrTGlzdC5jaGlsZHJlbl0ucmVkdWNlKCh0b3QsIG51bSkgPT4gdG90ICsgTnVtYmVyKCBudW0uY2xpZW50SGVpZ2h0ICkgKyAyOCAsIDAgKSArIFxcXCJweFxcXCJcXG4vLyAgICAgY29uc3QgaXRlbXMgPSBibG9ja0xpc3QucXVlcnlTZWxlY3RvckFsbCgnLmF1dG9jb21wbGV0ZS1pdGVtJyk7XFxuLy8gICAgIGl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XFxuLy8gICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xcbi8vICAgICAgICAgdC52YWx1ZSA9IGl0ZW0uaW5uZXJUZXh0XFxuLy8gICAgICAgICB0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCBpdGVtLmlubmVyVGV4dCk7XFxuLy8gICAgICAgICB0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaXNBY3RpdmUnKVxcbi8vICAgICAgIH0pXFxuLy8gICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcXG4vLyAgICAgICAgIGUudGFyZ2V0ICE9IHQgJiYgZS50YXJnZXQgIT0gYmxvY2tMaXN0ICYmIGUudGFyZ2V0ICE9IGl0ZW0gJiYgZS50YXJnZXQucGFyZW50Tm9kZSAhPSBibG9ja0xpc3QgPyB0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnaXNBY3RpdmUnKSA6JydcXG4vLyAgICAgICB9KVxcbi8vICAgICB9KVxcbi8vICAgfVxcbi8vICAgZnVuY3Rpb24gcmVzdWx0cyh0b01hdGNoLCBtYXRjaEFycmF5LCBvcHRpb25zKXtcXG4vLyAgICAgcmV0dXJuIG1hdGNoQXJyYXkubWFwKGQgPT4ge1xcbi8vICAgICAgIGNvbnN0IGF0dHIgPSBpbkFycmF5KGQsIG9wdGlvbnMudG9fc2hvdylcXG4vLyAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAodG9NYXRjaCwgJ2dpJyk7XFxuLy8gICAgICAgY29uc3QgbmFtZSA9IGF0dHIucmVwbGFjZShyZWdleCwgYDxzcGFuIGNsYXNzPVxcXCJobFxcXCI+JHt0b01hdGNofTwvc3Bhbj5gKTtcXG4vLyAgICAgICByZXR1cm4gYFxcbi8vICAgICAgICAgPGxpIGNsYXNzPVxcXCJhdXRvY29tcGxldGUtaXRlbVxcXCI+XFxuLy8gICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJuYW1lXFxcIj4ke25hbWV9PC9zcGFuPlxcbi8vICAgICAgICAgPC9saT5cXG4vLyAgICAgICBgO1xcbi8vICAgICB9KS5qb2luKCcnKTtcXG4vLyAgIH1cXG4vLyAgIGZ1bmN0aW9uIG5vUmVzdWx0KG1hdGNoQXJyYXksIG9wdGlvbnMpe1xcbi8vICAgICAgIHJldHVybiBgXFxuLy8gICAgICAgICA8bGkgY2xhc3M9XFxcImF1dG9jb21wbGV0ZS1pdGVtXFxcIj5cXG4vLyAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIm5vLXJlc3VsdFxcXCI+JHtvcHRpb25zLm5vX3Jlc3VsdHMgPyBvcHRpb25zLm5vX3Jlc3VsdHMgOiBcXFwiTm8gcmVzdWx0c1xcXCJ9PC9zcGFuPlxcbi8vICAgICAgICAgPC9saT5cXG4vLyAgICAgICBgO1xcbi8vICAgfVxcbi8vICAgZnVuY3Rpb24gZnVsbFJlc3VsdChtYXRjaEFycmF5LCBvcHRpb25zKXtcXG4vLyAgICAgICByZXR1cm4gYFxcbi8vICAgICAgICAgPGxpIGNsYXNzPVxcXCJhdXRvY29tcGxldGUtaXRlbVxcXCI+XFxuLy8gICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJuYW1lXFxcIj4ke29wdGlvbnMubWF4X3Jlc3VsdHNfdGV4dCA/IG9wdGlvbnMubWF4X3Jlc3VsdHNfdGV4dCA6IFxcXCJQbGVhc2UgdHlwZSBhbm90aGVyIGNoYXJhY3RlciB0byByZWZpbmUgeW91ciBzZWFyY2guXFxcIn08L3NwYW4+XFxuLy8gICAgICAgICA8L2xpPlxcbi8vICAgICAgIGA7XFxuLy8gICB9XFxuLy8gICBmdW5jdGlvbiBjcmVhdGVEb21fZWwodHlwZSwgY2xhc3NOYW1lKXtcXG4vLyAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xcbi8vICAgICBpZihjbGFzc05hbWUpIGVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKVxcbi8vICAgICByZXR1cm4gZWxcXG4vLyAgIH1cXG4vLyAgIGZ1bmN0aW9uIGdldERhdGFzKG9wdGlvbnMpe1xcbi8vICAgICBpZihvcHRpb25zLmRhdGFzKSByZXR1cm4gb3B0aW9ucy5kYXRhcztcXG4vLyAgICAgZWxzZSBpZihvcHRpb25zLnVybCkgZmV0Y2hEYXRhcyhvcHRpb25zLnVybCwgKGVycm9yLCBkYXRhcykgPT4ge1xcbi8vICAgICAgIGlmIChlcnJvcil7XFxuLy8gICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcXG4vLyAgICAgICB9XFxuLy8gICAgICAgZWxzZXtcXG4vLyAgICAgICAgIG9wdGlvbnMuZGF0YXMgPSBkYXRhc1xcbi8vICAgICAgICAgaW5pdChvcHRpb25zKVxcbi8vICAgICAgIH1cXG4vLyAgICAgfSk7XFxuLy8gICB9XFxuLy8gICBmdW5jdGlvbiBmZXRjaERhdGFzKHVybCwgY2FsbGJhY2spe1xcbi8vICAgICBmZXRjaCh1cmwpXFxuLy8gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcXG4vLyAgICAgICAgLnRoZW4oanNvbiA9PiBjYWxsYmFjayhudWxsLCBqc29uKSlcXG4vLyAgICAgICAgLmNhdGNoKGVycm9yID0+IGNhbGxiYWNrKGVycm9yLCBudWxsKSlcXG4vLyAgIH1cXG4vLyAgIGZ1bmN0aW9uIGluQXJyYXkoZGF0YSwgY29tcGFyZSwgdmFsKXtcXG4vLyAgICAgY29uc3QgdG9Db21wYXJlID0gY29tcGFyZS5zcGxpdCgnLicpXFxuLy8gICAgIHZhbCA9IGRhdGE7XFxuLy8gICAgIHRvQ29tcGFyZS5mb3JFYWNoKCAodCwgaSkgPT4ge1xcbi8vICAgICAgIHZhbCA9IHR5cGVvZiB2YWxbdF0gIT0gXFxcInVuZGVmaW5lZFxcXCIgPyB2YWxbdF0gOiB2YWxcXG4vLyAgICAgICByZXR1cm4gdmFsXFxuLy8gICAgIH0pXFxuLy8gICAgIHJldHVybiB2YWxcXG4vLyAgIH0vLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdlFYVjBiME52YlhCc1pYUmxMME52Y21VdlNXNXdkWFF1YW5NdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5QlFrTXZMaTl6Y21NdlFYVjBiME52YlhCc1pYUmxMME52Y21VdlNXNXdkWFF1YW5NL1pESXpOaUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdSblZ6WlNBOUlISmxjWFZwY21VZ0tDZG1kWE5sTG1wekp5QXBPMXh1ZG1GeUlIc2djMlYwUVhKeVlYa3NJR2x1UVhKeVlYa2dmU0FnUFNCeVpYRjFhWEpsSUNnbkxpNHZMaTR2U0dWc2NHVnljeTlCY25KaGVTY2dLVHRjYmx4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlDZ3BJRDArSUhzZ2NtVjBkWEp1SUc1bGR5QkJkWFJ2UTI5dGNHeGxkR1VvS1NCOVhHNWNibVoxYm1OMGFXOXVJRUYxZEc5RGIyMXdiR1YwWlNncGUxeHVJQ0FnSUhSb2FYTXVkWEpzSUQwZ1ptRnNjMlZjYmlBZ0lDQjBhR2x6TG1SaGRHRnpJRDBnWm1Gc2MyVmNiaUFnSUNCMGFHbHpMbkpsYzNWc2RITWdQU0I3WEc0Z0lDQWdJQ0FnSUhCaGRHZ2dPaUFuSjF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG14aFltVnNJRDBnZTF4dUlDQWdJQ0FnSUNCMFlYSm5aWFE2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdjMmx1WjNWc1lYSTZabUZzYzJVc1hHNGdJQ0FnSUNBZ0lIQnNkWEpoYkRwbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnZW1WeWJ6cG1ZV3h6WlZ4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG0xaGVDQTlJREV3TUZ4dUlDQWdJSFJvYVhNdWRHRnlaMlYwSUQwZ1ptRnNjMlZjYmlBZ0lDQjBhR2x6TG5SbGJYQnNZWFJsSUQwZ2UzMWNibjFjYmtGMWRHOURiMjF3YkdWMFpTNXdjbTkwYjNSNWNHVXVZMjl1YzNSeWRXTjBJRDBnWm5WdVkzUnBiMjRvY0dGeVlXMXpLWHRjYmlBZ0lDQnNaWFFnWjJWMFJHRjBZWE03WEc0Z0lDQWdhV1lnS0hCaGNtRnRjeWtnYzJWMFFYSnlZWGtvZEdocGN5d2djR0Z5WVcxektUdGNiaUFnSUNCcFppaDBhR2x6TG5WeWJDa2dlMXh1SUNBZ0lDQWdJQ0JuWlhSRVlYUmhjeUE5SUhSb2FYTXVabWx1WkZ4dUlDQWdJQ0FnSUNCblpYUkVZWFJoY3lncFhHNWNiaUFnSUNBZ0lDQWdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1VISnZiV2x6WlM1aGJHd29XMmRsZEVSaGRHRnpYU2t1ZEdobGJpZ2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQjJZWElnYjNCMGFXOXVjeUE5SUhzZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKbGMyaHZiR1E2SURBdU5DeGNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVYTTZJR052YlhCaGNtVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYTjBZVzVqWlRvZ01UQXdNREFzWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCbWRYTmxJRDBnYm1WM0lFWjFjMlVvWkdGMFlYTXNJRzl3ZEdsdmJuTXBYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbElEOGdablZ6WlM1elpXRnlZMmdvZG1Gc2RXVXBJRG9nWkdGMFlYTmNiaUFnSUNCOUtWeHVJQ0FnSUZ4dWZWeHVRWFYwYjBOdmJYQnNaWFJsTG5CeWIzUnZkSGx3WlM1bWFXNWtJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNWNiaUFnSUNCcFppaDBhR2x6TG5WeWJDbDdYRzRnSUNBZ0lDQm1aWFJqYUNoMGFHbHpMblZ5YkN3Z2RHaHBjeWtnSUZ4dUlDQWdJQ0FnTG5Sb1pXNG9JSEpsYzNCdmJuTmxJRDArSUhKbGMzQnZibk5sTG1wemIyNG9LU0FwWEc0Z0lDQWdJQ0F1ZEdobGJpZ2dhbk52YmlBOVBpQjdJSFJvYVhNdVJtVjBZMmdvYm5Wc2JDd2dhbk52Yml3Z2RHaHBjeWtnSUgwcFhHNGdJQ0FnSUNBdVkyRjBZMmdvWlhKeWIzSWdQVDRnZEdocGN5NUdaWFJqYUNobGNuSnZjaXdnYm5Wc2JDa3BYRzRnSUNBZ2ZWeHVJQ0JjYm4xY2JrRjFkRzlEYjIxd2JHVjBaUzV3Y205MGIzUjVjR1V1Um1WMFkyZ2dQU0JtZFc1amRHbHZiaWhsY25KdmNpd2djM1ZqWTJWemN5bDdYRzRnSUNBZ2FXWW9aWEp5YjNJcElHTnZibk52YkdVdWJHOW5LR1Z5Y205eUtUdGNiaUFnSUNCbGJITmxJSHRjYmlBZ1hHNGdJQ0FnSUNCMGFHbHpMbVJoZEdGeklEMGdjM1ZqWTJWemN6dGNiaUFnSUNBZ0lHbG1LSFJvYVhNdWNtVnpkV3gwY3k1d1lYUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaGN5QTlJR2x1UVhKeVlYa29kR2hwY3k1a1lYUmhjeXdnZEdocGN5NXlaWE4xYkhSekxuQmhkR2dwWEc0Z0lDQWdJQ0I5WEc0Z1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUZ4dUlDQmNiaTh2SUNBZ1puVnVZM1JwYjI0Z1lYVjBiMk52YlhCc1pYUmxLRzl3ZEdsdmJuTXBlMXh1SUNCY2JpOHZJQ0FnSUNCdmNIUnBiMjV6SUQwZ2UxeHVMeThnSUNBZ0lDQWdKM1Z5YkNjZ0lDQTZJRzl3ZEdsdmJuTXVkWEpzSUQ4Z2IzQjBhVzl1Y3k1MWNtd2dPaUFuSnl4Y2JpOHZJQ0FnSUNBZ0lDZGtZWFJoY3ljZ09pQnZjSFJwYjI1ekxtUmhkR0Z6SUQ4Z2IzQjBhVzl1Y3k1a1lYUmhjeUE2SUNjbkxGeHVMeThnSUNBZ0lDQWdKMjV2WDNKbGMzVnNkSE1uSURvZ2IzQjBhVzl1Y3k1dWIxOXlaWE4xYkhSeklEOGdiM0IwYVc5dWN5NXViMTl5WlhOMWJIUnpJRG9nSnljc1hHNHZMeUFnSUNBZ0lDQW5iV0Y0WDNKbGMzVnNkSE5mZEdWNGRDY2dPaUJ2Y0hScGIyNXpMbTFoZUY5eVpYTjFiSFJ6WDNSbGVIUWdQeUJ2Y0hScGIyNXpMbTFoZUY5eVpYTjFiSFJ6WDNSbGVIUWdPaUFuSnl4Y2JpOHZJQ0FnSUNBZ0lDZHRZWGhmY21WemRXeDBjeWM2SUc5d2RHbHZibk11YldGNFgzSmxjM1ZzZEhNZ1B5QnZjSFJwYjI1ekxtMWhlRjl5WlhOMWJIUnpJRG9nSnljc1hHNHZMeUFnSUNBZ0lDQW5kR0Z5WjJWMGN5Y2dPaUJ2Y0hScGIyNXpMblJoY21kbGRITWdQeUJ2Y0hScGIyNXpMblJoY21kbGRITWdPaUFuSnl4Y2JpOHZJQ0FnSUNBZ0lDZDBiMTl6YUc5M0p5QTZJRzl3ZEdsdmJuTXVkRzlmYzJodmR5QS9JRzl3ZEdsdmJuTXVkRzlmYzJodmR5QTZJQ2NuTEZ4dUx5OGdJQ0FnSUgxY2JpQWdYRzR2THlBZ0lDQWdiM0IwYVc5dWN5NTBZWEpuWlhSeklEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaGdKSHR2Y0hScGIyNXpMblJoY21kbGRITjlZQ2s3WEc0dkx5QWdJQ0FnYjNCMGFXOXVjeTVrWVhSaGN5QTlJR2RsZEVSaGRHRnpLRzl3ZEdsdmJuTXBPMXh1SUNCY2JpOHZJQ0FnSUNCcFppZ2hiM0IwYVc5dWN5NTBZWEpuWlhSeklIeDhJQ0Z2Y0hScGIyNXpMbVJoZEdGektTQnlaWFIxY201Y2JpOHZJQ0FnSUNCcGJtbDBLRzl3ZEdsdmJuTXBYRzRnSUZ4dUx5OGdJQ0I5WEc0Z0lGeHVMeThnSUNCbWRXNWpkR2x2YmlCcGJtbDBLRzl3ZEdsdmJuTXBlMXh1SUNCY2JpOHZJQ0FnSUNCdmNIUnBiMjV6TG5SaGNtZGxkSE11Wm05eVJXRmphQ2dnZENBOVBpQjdYRzR2THlBZ0lDQWdJQ0JqYjI1emRDQmliRzlqYTB4cGMzUWdQU0JqY21WaGRHVkViMjFmWld3b0ozVnNKeXduWVhWMGIyTnZiWEJzWlhSbExXbDBaVzF6SnlsY2JpOHZJQ0FnSUNBZ0lIUXVjR0Z5Wlc1MFRtOWtaUzVoY0hCbGJtUkRhR2xzWkNoaWJHOWphMHhwYzNRcFhHNGdJRnh1THk4Z0lDQWdJQ0FnZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkclpYbDFjQ2NzSUdVZ1BUNGdaR2x6Y0d4aGVVMWhkR05vWlhNb2RDd2diM0IwYVc5dWN5d2dZbXh2WTJ0TWFYTjBLU2s3WEc0dkx5QWdJQ0FnZlNsY2JpOHZJQ0FnZlZ4dUlDQmNiaTh2SUNBZ1puVnVZM1JwYjI0Z1ptbHVaRTFoZEdOb1pYTW9kRzlOWVhSamFDd2diM0IwYVc5dWN5a2dlMXh1THk4Z0lDQWdJSEpsZEhWeWJpQnZjSFJwYjI1ekxtUmhkR0Z6TG1acGJIUmxjaWhrSUQwK0lIdGNiaTh2SUNBZ0lDQWdJR052Ym5OMElHRjBkSElnUFNCcGJrRnljbUY1S0dRc0lHOXdkR2x2Ym5NdWRHOWZjMmh2ZHlsY2JpOHZJQ0FnSUNBZ0lHTnZibk4wSUhKbFoyVjRJRDBnYm1WM0lGSmxaMFY0Y0NoMGIwMWhkR05vTENBbloya25LVHRjYmk4dklDQWdJQ0FnSUhKbGRIVnliaUJUZEhKcGJtY29ZWFIwY2lrdWJXRjBZMmdvY21WblpYZ3BYRzR2THlBZ0lDQWdmU2s3WEc0dkx5QWdJSDFjYmk4dklDQWdablZ1WTNScGIyNGdaR2x6Y0d4aGVVMWhkR05vWlhNb2RDd2diM0IwYVc5dWN5d2dZbXh2WTJ0TWFYTjBLU0I3WEc0dkx5QWdJQ0FnWTI5dWMzUWdkRzlOWVhSamFDQTlJSFF1ZG1Gc2RXVTdYRzR2THlBZ0lDQWdhV1lnS0hSdlRXRjBZMmdnSmlZZ2RHOU5ZWFJqYUM1c1pXNW5kR2dnUGlBd0lDa2dkQzV3WVhKbGJuUk9iMlJsTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMmx6UVdOMGFYWmxKeWxjYmk4dklDQWdJQ0JsYkhObElIUXVjR0Z5Wlc1MFRtOWtaUzVqYkdGemMweHBjM1F1Y21WdGIzWmxLQ2RwYzBGamRHbDJaU2NwWEc0Z0lGeHVMeThnSUNBZ0lHTnZibk4wSUcxaGRHTm9RWEp5WVhrZ1BTQm1hVzVrVFdGMFkyaGxjeWgwYjAxaGRHTm9MQ0J2Y0hScGIyNXpLVHRjYmlBZ1hHNHZMeUFnSUNBZ2JHVjBJR2gwYld3N1hHNHZMeUFnSUNBZ2FXWWdLRzl3ZEdsdmJuTXViV0Y0WDNKbGMzVnNkSE1nSmlZZ2JXRjBZMmhCY25KaGVTNXNaVzVuZEdnZ1BpQnZjSFJwYjI1ekxtMWhlRjl5WlhOMWJIUnpLU0JvZEcxc0lEMGdablZzYkZKbGMzVnNkQ2h0WVhSamFFRnljbUY1TENCdmNIUnBiMjV6S1Z4dUx5OGdJQ0FnSUdWc2MyVWdhV1lnS0cxaGRHTm9RWEp5WVhrdWJHVnVaM1JvSUQwOVBTQXdJQ2tnYUhSdGJDQTlJRzV2VW1WemRXeDBLRzFoZEdOb1FYSnlZWGtzSUc5d2RHbHZibk1wWEc0dkx5QWdJQ0FnWld4elpTQm9kRzFzSUQwZ2NtVnpkV3gwY3loMGIwMWhkR05vTENCdFlYUmphRUZ5Y21GNUxDQnZjSFJwYjI1ektWeHVJQ0JjYmk4dklDQWdJQ0JpYkc5amEweHBjM1F1YVc1dVpYSklWRTFNSUQwZ2FIUnRiRHRjYmk4dklDQWdJQ0JpYkc5amEweHBjM1F1YzNSNWJHVXVhR1ZwWjJoMElEMGdXeTR1TG1Kc2IyTnJUR2x6ZEM1amFHbHNaSEpsYmwwdWNtVmtkV05sS0NoMGIzUXNJRzUxYlNrZ1BUNGdkRzkwSUNzZ1RuVnRZbVZ5S0NCdWRXMHVZMnhwWlc1MFNHVnBaMmgwSUNrZ0t5QXlPQ0FzSURBZ0tTQXJJRndpY0hoY0lseHVJQ0JjYmk4dklDQWdJQ0JqYjI1emRDQnBkR1Z0Y3lBOUlHSnNiMk5yVEdsemRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDY3VZWFYwYjJOdmJYQnNaWFJsTFdsMFpXMG5LVHRjYmk4dklDQWdJQ0JwZEdWdGN5NW1iM0pGWVdOb0tHbDBaVzBnUFQ0Z2UxeHVMeThnSUNBZ0lDQWdhWFJsYlM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUdVZ1BUNGdlMXh1THk4Z0lDQWdJQ0FnSUNCMExuWmhiSFZsSUQwZ2FYUmxiUzVwYm01bGNsUmxlSFJjYmk4dklDQWdJQ0FnSUNBZ2RDNXpaWFJCZEhSeWFXSjFkR1VvSjNaaGJIVmxKeXdnYVhSbGJTNXBibTVsY2xSbGVIUXBPMXh1THk4Z0lDQWdJQ0FnSUNCMExuQmhjbVZ1ZEU1dlpHVXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25hWE5CWTNScGRtVW5LVnh1THk4Z0lDQWdJQ0FnZlNsY2JpOHZJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z1pTQTlQaUI3WEc0dkx5QWdJQ0FnSUNBZ0lHVXVkR0Z5WjJWMElDRTlJSFFnSmlZZ1pTNTBZWEpuWlhRZ0lUMGdZbXh2WTJ0TWFYTjBJQ1ltSUdVdWRHRnlaMlYwSUNFOUlHbDBaVzBnSmlZZ1pTNTBZWEpuWlhRdWNHRnlaVzUwVG05a1pTQWhQU0JpYkc5amEweHBjM1FnUHlCMExuQmhjbVZ1ZEU1dlpHVXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25hWE5CWTNScGRtVW5LU0E2SnlkY2JpOHZJQ0FnSUNBZ0lIMHBYRzR2THlBZ0lDQWdmU2xjYmlBZ1hHNGdJRnh1THk4Z0lDQjlYRzRnSUZ4dUx5OGdJQ0JtZFc1amRHbHZiaUJ5WlhOMWJIUnpLSFJ2VFdGMFkyZ3NJRzFoZEdOb1FYSnlZWGtzSUc5d2RHbHZibk1wZTF4dUx5OGdJQ0FnSUhKbGRIVnliaUJ0WVhSamFFRnljbUY1TG0xaGNDaGtJRDArSUh0Y2JpOHZJQ0FnSUNBZ0lHTnZibk4wSUdGMGRISWdQU0JwYmtGeWNtRjVLR1FzSUc5d2RHbHZibk11ZEc5ZmMyaHZkeWxjYmk4dklDQWdJQ0FnSUdOdmJuTjBJSEpsWjJWNElEMGdibVYzSUZKbFowVjRjQ2gwYjAxaGRHTm9MQ0FuWjJrbktUdGNiaTh2SUNBZ0lDQWdJR052Ym5OMElHNWhiV1VnUFNCaGRIUnlMbkpsY0d4aFkyVW9jbVZuWlhnc0lHQThjM0JoYmlCamJHRnpjejFjSW1oc1hDSStKSHQwYjAxaGRHTm9mVHd2YzNCaGJqNWdLVHRjYmk4dklDQWdJQ0FnSUhKbGRIVnliaUJnWEc0dkx5QWdJQ0FnSUNBZ0lEeHNhU0JqYkdGemN6MWNJbUYxZEc5amIyMXdiR1YwWlMxcGRHVnRYQ0krWEc0dkx5QWdJQ0FnSUNBZ0lDQWdQSE53WVc0Z1kyeGhjM005WENKdVlXMWxYQ0krSkh0dVlXMWxmVHd2YzNCaGJqNWNiaTh2SUNBZ0lDQWdJQ0FnUEM5c2FUNWNiaTh2SUNBZ0lDQWdJR0E3WEc0dkx5QWdJQ0FnZlNrdWFtOXBiaWduSnlrN1hHNHZMeUFnSUgxY2JpOHZJQ0FnWm5WdVkzUnBiMjRnYm05U1pYTjFiSFFvYldGMFkyaEJjbkpoZVN3Z2IzQjBhVzl1Y3lsN1hHNHZMeUFnSUNBZ0lDQnlaWFIxY200Z1lGeHVMeThnSUNBZ0lDQWdJQ0E4YkdrZ1kyeGhjM005WENKaGRYUnZZMjl0Y0d4bGRHVXRhWFJsYlZ3aVBseHVMeThnSUNBZ0lDQWdJQ0FnSUR4emNHRnVJR05zWVhOelBWd2libTh0Y21WemRXeDBYQ0krSkh0dmNIUnBiMjV6TG01dlgzSmxjM1ZzZEhNZ1B5QnZjSFJwYjI1ekxtNXZYM0psYzNWc2RITWdPaUJjSWs1dklISmxjM1ZzZEhOY0luMDhMM053WVc0K1hHNHZMeUFnSUNBZ0lDQWdJRHd2YkdrK1hHNHZMeUFnSUNBZ0lDQmdPMXh1THk4Z0lDQjlYRzR2THlBZ0lHWjFibU4wYVc5dUlHWjFiR3hTWlhOMWJIUW9iV0YwWTJoQmNuSmhlU3dnYjNCMGFXOXVjeWw3WEc0dkx5QWdJQ0FnSUNCeVpYUjFjbTRnWUZ4dUx5OGdJQ0FnSUNBZ0lDQThiR2tnWTJ4aGMzTTlYQ0poZFhSdlkyOXRjR3hsZEdVdGFYUmxiVndpUGx4dUx5OGdJQ0FnSUNBZ0lDQWdJRHh6Y0dGdUlHTnNZWE56UFZ3aWJtRnRaVndpUGlSN2IzQjBhVzl1Y3k1dFlYaGZjbVZ6ZFd4MGMxOTBaWGgwSUQ4Z2IzQjBhVzl1Y3k1dFlYaGZjbVZ6ZFd4MGMxOTBaWGgwSURvZ1hDSlFiR1ZoYzJVZ2RIbHdaU0JoYm05MGFHVnlJR05vWVhKaFkzUmxjaUIwYnlCeVpXWnBibVVnZVc5MWNpQnpaV0Z5WTJndVhDSjlQQzl6Y0dGdVBseHVMeThnSUNBZ0lDQWdJQ0E4TDJ4cFBseHVMeThnSUNBZ0lDQWdZRHRjYmk4dklDQWdmVnh1THk4Z0lDQm1kVzVqZEdsdmJpQmpjbVZoZEdWRWIyMWZaV3dvZEhsd1pTd2dZMnhoYzNOT1lXMWxLWHRjYmk4dklDQWdJQ0JqYjI1emRDQmxiQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9kSGx3WlNrN1hHNHZMeUFnSUNBZ2FXWW9ZMnhoYzNOT1lXMWxLU0JsYkM1amJHRnpjMHhwYzNRdVlXUmtLR05zWVhOelRtRnRaU2xjYmk4dklDQWdJQ0J5WlhSMWNtNGdaV3hjYmk4dklDQWdmVnh1SUNCY2JpQWdYRzR2THlBZ0lHWjFibU4wYVc5dUlHZGxkRVJoZEdGektHOXdkR2x2Ym5NcGUxeHVMeThnSUNBZ0lHbG1LRzl3ZEdsdmJuTXVaR0YwWVhNcElISmxkSFZ5YmlCdmNIUnBiMjV6TG1SaGRHRnpPMXh1THk4Z0lDQWdJR1ZzYzJVZ2FXWW9iM0IwYVc5dWN5NTFjbXdwSUdabGRHTm9SR0YwWVhNb2IzQjBhVzl1Y3k1MWNtd3NJQ2hsY25KdmNpd2daR0YwWVhNcElEMCtJSHRjYmk4dklDQWdJQ0FnSUdsbUlDaGxjbkp2Y2lsN1hHNHZMeUFnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0dWeWNtOXlLVnh1THk4Z0lDQWdJQ0FnZlZ4dUx5OGdJQ0FnSUNBZ1pXeHpaWHRjYmk4dklDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1a1lYUmhjeUE5SUdSaGRHRnpYRzR2THlBZ0lDQWdJQ0FnSUdsdWFYUW9iM0IwYVc5dWN5bGNiaTh2SUNBZ0lDQWdJSDFjYmk4dklDQWdJQ0I5S1R0Y2JpOHZJQ0FnZlZ4dUlDQmNiaTh2SUNBZ1puVnVZM1JwYjI0Z1ptVjBZMmhFWVhSaGN5aDFjbXdzSUdOaGJHeGlZV05yS1h0Y2JpOHZJQ0FnSUNCbVpYUmphQ2gxY213cFhHNHZMeUFnSUNBZ0lDQWdMblJvWlc0b2NtVnpjRzl1YzJVZ1BUNGdjbVZ6Y0c5dWMyVXVhbk52YmlncEtWeHVMeThnSUNBZ0lDQWdJQzUwYUdWdUtHcHpiMjRnUFQ0Z1kyRnNiR0poWTJzb2JuVnNiQ3dnYW5OdmJpa3BYRzR2THlBZ0lDQWdJQ0FnTG1OaGRHTm9LR1Z5Y205eUlEMCtJR05oYkd4aVlXTnJLR1Z5Y205eUxDQnVkV3hzS1NsY2JpOHZJQ0FnZlZ4dUlDQmNiaTh2SUNBZ1puVnVZM1JwYjI0Z2FXNUJjbkpoZVNoa1lYUmhMQ0JqYjIxd1lYSmxMQ0IyWVd3cGUxeHVMeThnSUNBZ0lHTnZibk4wSUhSdlEyOXRjR0Z5WlNBOUlHTnZiWEJoY21VdWMzQnNhWFFvSnk0bktWeHVMeThnSUNBZ0lIWmhiQ0E5SUdSaGRHRTdYRzRnSUZ4dUx5OGdJQ0FnSUhSdlEyOXRjR0Z5WlM1bWIzSkZZV05vS0NBb2RDd2dhU2tnUFQ0Z2UxeHVMeThnSUNBZ0lDQWdkbUZzSUQwZ2RIbHdaVzltSUhaaGJGdDBYU0FoUFNCY0luVnVaR1ZtYVc1bFpGd2lJRDhnZG1Gc1czUmRJRG9nZG1Gc1hHNHZMeUFnSUNBZ0lDQnlaWFIxY200Z2RtRnNYRzR2THlBZ0lDQWdmU2xjYmk4dklDQWdJQ0J5WlhSMWNtNGdkbUZzWEc0dkx5QWdJSDFjYmlBZ0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkZRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkVRVHRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVeEJPMEZCVDBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlIwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGSVFUdEJRVXRCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkhRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVdEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJSVUU3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGSFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUjBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9zcmMvQXV0b0NvbXBsZXRlL0NvcmUvSW5wdXQuanNcXG5cIil9LFwiLi9zcmMvQXV0b0NvbXBsZXRlL2luaXQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvQXV0b0NvbXBsZXRlL2luaXQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtldmFsKCd2YXIgSW5wdXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0NvcmUvSW5wdXQgKi8gXCIuL3NyYy9BdXRvQ29tcGxldGUvQ29yZS9JbnB1dC5qc1wiKTtcXG5cXG52YXIgQXV0b0NvbXBsZXRlID0gbW9kdWxlLmV4cG9ydHMgPSB7XFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHBhcmFtcykge1xcbiAgICByZXR1cm4gbmV3IElucHV0KCkuY29uc3RydWN0KHBhcmFtcyk7XFxuICB9XFxufTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdlFYVjBiME52YlhCc1pYUmxMMmx1YVhRdWFuTXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OUJRa012TGk5emNtTXZRWFYwYjBOdmJYQnNaWFJsTDJsdWFYUXVhbk0vWkdNMVlTSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1NXNXdkWFFnUFNCeVpYRjFhWEpsS0NjdUwwTnZjbVV2U1c1d2RYUW5LVnh1ZG1GeUlFRjFkRzlEYjIxd2JHVjBaU0E5SUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4dUlDQWdJR2x1YVhRNklHWjFibU4wYVc5dUlDaHdZWEpoYlhNcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJKYm5CMWRDZ3BMbU52Ym5OMGNuVmpkQ2h3WVhKaGJYTXBJRnh1SUNBZ0lIMWNibjBpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVoQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9BdXRvQ29tcGxldGUvaW5pdC5qc1xcbicpfSxcIi4vc3JjL0ZpbHRlci9BY3Rpb25zL0FjdGlvbi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvRmlsdGVyL0FjdGlvbnMvQWN0aW9uLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2V2YWwoJ2Z1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxcblxcbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XFxuXFxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgeyByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfSB9XFxuXFxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfVxcblxcbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uL0hlbHBlcnMvVXRpbHMgKi8gXCIuL3NyYy9IZWxwZXJzL1V0aWxzLmpzXCIpLFxcbiAgICBlcnJvciA9IF9yZXF1aXJlLmVycm9yLFxcbiAgICBpc1RhcmdldCA9IF9yZXF1aXJlLmlzVGFyZ2V0LFxcbiAgICBpc1RhcmdldFNlbGVjdGVkID0gX3JlcXVpcmUuaXNUYXJnZXRTZWxlY3RlZDtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlbCkge1xcbiAgcmV0dXJuIG5ldyBBY3Rpb24oZWwpO1xcbn07XFxuXFxuZnVuY3Rpb24gQWN0aW9uKGVsKSB7XFxuICB0aGlzLmVsID0gZWw7XFxufVxcblxcbjtcXG5cXG5BY3Rpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChlKSB7XFxuICB2YXIgX3RoaXMgPSB0aGlzO1xcblxcbiAgZm9yICh2YXIga2V5IGluIHRoaXMuZWwuaW5wdXRzKSB7XFxuICAgIHN3aXRjaCAoa2V5KSB7XFxuICAgICAgY2FzZSBcImNoZWNrYm94XCI6XFxuICAgICAgICB7XFxuICAgICAgICAgIGlmICghdGhpcy5lbC5pbnB1dHMuY2hlY2tib3gpIHtcXG4gICAgICAgICAgICBlcnJvcihcXCcgTm8gY2hlY2tib3ggc2V0dGVkIFxcJyk7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgdmFyIF9hID0gdGhpcy5lbC5pbnB1dHMuY2hlY2tib3g7XFxuXFxuICAgICAgICAgIHZhciBfZiA9IGZ1bmN0aW9uIF9mKGNoZWNrYm94KSB7XFxuICAgICAgICAgICAgaWYgKGlzVGFyZ2V0KGUsIGNoZWNrYm94KSkge1xcbiAgICAgICAgICAgICAgY2hlY2tib3gudXBkYXRlKF90aGlzKTtcXG5cXG4gICAgICAgICAgICAgIGlmIChfdGhpcy5lbC51cmwpIHtcXG4gICAgICAgICAgICAgICAgX3RoaXMuZWwudXJsLmNvbnN0cnVjdChjaGVja2JveCk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9O1xcblxcbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XFxuICAgICAgICAgICAgX2YoX2FbX2ldLCBfaSwgX2EpO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIHVuZGVmaW5lZDtcXG4gICAgICAgIH1cXG4gICAgICAgIGJyZWFrO1xcblxcbiAgICAgIGNhc2UgXCJyYWRpb1wiOlxcbiAgICAgICAge1xcbiAgICAgICAgICBpZiAoIXRoaXMuZWwuaW5wdXRzLnJhZGlvKSB7XFxuICAgICAgICAgICAgZXJyb3IoXFwnIE5vIHJhZGlvIHNldHRlZCBcXCcpO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIHZhciBfYTIgPSB0aGlzLmVsLmlucHV0cy5yYWRpbztcXG5cXG4gICAgICAgICAgdmFyIF9mMiA9IGZ1bmN0aW9uIF9mMihyYWRpbykge1xcbiAgICAgICAgICAgIGlmIChpc1RhcmdldChlLCByYWRpbykpIHtcXG4gICAgICAgICAgICAgIHJhZGlvLnVwZGF0ZShfdGhpcyk7XFxuXFxuICAgICAgICAgICAgICBpZiAoX3RoaXMuZWwudXJsKSB7XFxuICAgICAgICAgICAgICAgIF90aGlzLmVsLnVybC5jb25zdHJ1Y3QocmFkaW8pO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfTtcXG5cXG4gICAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgX2EyLmxlbmd0aDsgX2kyKyspIHtcXG4gICAgICAgICAgICBfZjIoX2EyW19pMl0sIF9pMiwgX2EyKTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICB1bmRlZmluZWQ7XFxuICAgICAgICB9XFxuICAgICAgICBicmVhaztcXG5cXG4gICAgICBjYXNlIFwic2VsZWN0XCI6XFxuICAgICAgICB7XFxuICAgICAgICAgIGlmICghdGhpcy5lbC5pbnB1dHMuc2VsZWN0KSB7XFxuICAgICAgICAgICAgZXJyb3IoXFwnIE5vIHNlbGVjdCBzZXR0ZWQgXFwnKTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICB2YXIgX2EzID0gdGhpcy5lbC5pbnB1dHMuc2VsZWN0O1xcblxcbiAgICAgICAgICB2YXIgX2YzID0gZnVuY3Rpb24gX2YzKHNlbGVjdCkge1xcbiAgICAgICAgICAgIGlmIChpc1RhcmdldFNlbGVjdGVkKGUsIHNlbGVjdCwgX3RoaXMuZWwuZm9ybU9iaikpIHtcXG4gICAgICAgICAgICAgIHNlbGVjdC51cGRhdGUoX3RoaXMpO1xcblxcbiAgICAgICAgICAgICAgaWYgKF90aGlzLmVsLnVybCkge1xcbiAgICAgICAgICAgICAgICBfdGhpcy5lbC51cmwuY29uc3RydWN0KHNlbGVjdCk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9O1xcblxcbiAgICAgICAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCBfYTMubGVuZ3RoOyBfaTMrKykge1xcbiAgICAgICAgICAgIF9mMyhfYTNbX2kzXSwgX2kzLCBfYTMpO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIHVuZGVmaW5lZDtcXG4gICAgICAgIH1cXG4gICAgICAgIGJyZWFrO1xcblxcbiAgICAgIGNhc2UgXCJzZWFyY2hcIjpcXG4gICAgICAgIHtcXG4gICAgICAgICAgaWYgKCF0aGlzLmVsLmlucHV0cy5zZWFyY2gpIHtcXG4gICAgICAgICAgICBlcnJvcihcXCcgTm8gc2VhcmNoIHNldHRlZCBcXCcpO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIHZhciBfYTQgPSB0aGlzLmVsLmlucHV0cy5zZWFyY2g7XFxuXFxuICAgICAgICAgIHZhciBfZjQgPSBmdW5jdGlvbiBfZjQoc2VhcmNoKSB7XFxuICAgICAgICAgICAgaWYgKGlzVGFyZ2V0KGUsIHNlYXJjaCkpIHtcXG4gICAgICAgICAgICAgIHNlYXJjaC51cGRhdGUoX3RoaXMpO1xcblxcbiAgICAgICAgICAgICAgaWYgKF90aGlzLmVsLnVybCkge1xcbiAgICAgICAgICAgICAgICBfdGhpcy5lbC51cmwuY29uc3RydWN0KHNlYXJjaCk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9O1xcblxcbiAgICAgICAgICBmb3IgKHZhciBfaTQgPSAwOyBfaTQgPCBfYTQubGVuZ3RoOyBfaTQrKykge1xcbiAgICAgICAgICAgIF9mNChfYTRbX2k0XSwgX2k0LCBfYTQpO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIHVuZGVmaW5lZDtcXG4gICAgICAgIH1cXG4gICAgICAgIGJyZWFrO1xcblxcbiAgICAgIGNhc2UgXCJyYW5nZVwiOlxcbiAgICAgICAge1xcbiAgICAgICAgICBpZiAoIXRoaXMuZWwuaW5wdXRzLnJhbmdlKSB7XFxuICAgICAgICAgICAgZXJyb3IoXFwnIE5vIHJhbmdlIHNldHRlZCBcXCcpO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIHZhciBfYTUgPSB0aGlzLmVsLmlucHV0cy5yYW5nZTtcXG5cXG4gICAgICAgICAgdmFyIF9mNSA9IGZ1bmN0aW9uIF9mNShyYW5nZSkge1xcbiAgICAgICAgICAgIGlmICghcmFuZ2UubXVsdGlwbGUgJiYgaXNUYXJnZXQoZSwgcmFuZ2UpIHx8ICFyYW5nZS5tdWx0aXBsZSAmJiBpc1RhcmdldChlLCByYW5nZS5taW4pIHx8IHJhbmdlLm11bHRpcGxlICYmIGlzVGFyZ2V0KGUsIHJhbmdlLm1pbikgfHwgcmFuZ2UubXVsdGlwbGUgJiYgaXNUYXJnZXQoZSwgcmFuZ2UubWF4KSkge1xcbiAgICAgICAgICAgICAgcmFuZ2UudXBkYXRlKF90aGlzKTtcXG5cXG4gICAgICAgICAgICAgIGlmIChfdGhpcy5lbC51cmwpIHtcXG4gICAgICAgICAgICAgICAgX3RoaXMuZWwudXJsLmNvbnN0cnVjdFJhbmdlKHJhbmdlKTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH07XFxuXFxuICAgICAgICAgIGZvciAodmFyIF9pNSA9IDA7IF9pNSA8IF9hNS5sZW5ndGg7IF9pNSsrKSB7XFxuICAgICAgICAgICAgX2Y1KF9hNVtfaTVdLCBfaTUsIF9hNSk7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgdW5kZWZpbmVkO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICB9XFxufTtcXG5cXG5BY3Rpb24ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChhcnJheSwgZGF0YSkge1xcbiAgdmFyIHZhbGlkYXRpb24gPSBbXTtcXG4gIHZhciBfYTYgPSBhcnJheTtcXG5cXG4gIHZhciBfZjYgPSBmdW5jdGlvbiBfZjYoZWwpIHtcXG4gICAgdmFsaWRhdGlvbi5wdXNoKGVsLnZhbGlkYXRlKGRhdGEpKTtcXG4gIH07XFxuXFxuICBmb3IgKHZhciBfaTYgPSAwOyBfaTYgPCBfYTYubGVuZ3RoOyBfaTYrKykge1xcbiAgICBfZjYoX2E2W19pNl0sIF9pNiwgX2E2KTtcXG4gIH1cXG5cXG4gIHVuZGVmaW5lZDtcXG4gIHJldHVybiB2YWxpZGF0aW9uO1xcbn07XFxuXFxuQWN0aW9uLnByb3RvdHlwZS5kbyA9IGZ1bmN0aW9uIChlbCkge1xcbiAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICB2YXIgaW5wdXRzID0gdGhpcy5maWx0ZXJCeUtleShcInNlYXJjaFwiKTtcXG4gIHZhciBkYXRhcyA9IHRoaXMuZWwuZGF0YXM7XFxuXFxuICBpZiAodGhpcy5lbC5pbnB1dHMuc2VhcmNoKSB7XFxuICAgIHZhciBfYTcgPSB0aGlzLmVsLmlucHV0cy5zZWFyY2g7XFxuXFxuICAgIHZhciBfZjcgPSBmdW5jdGlvbiBfZjcocykge1xcbiAgICAgIGRhdGFzID0gcy52YWxpZGF0ZShfdGhpczIuZWwuZGF0YXMpO1xcbiAgICB9O1xcblxcbiAgICBmb3IgKHZhciBfaTcgPSAwOyBfaTcgPCBfYTcubGVuZ3RoOyBfaTcrKykge1xcbiAgICAgIF9mNyhfYTdbX2k3XSwgX2k3LCBfYTcpO1xcbiAgICB9XFxuXFxuICAgIHVuZGVmaW5lZDtcXG4gIH1cXG5cXG4gIHZhciBuYnMgPSB0aGlzLmVsLmRhdGFzLmZpbHRlcihmdW5jdGlvbiAoZGF0YSkge1xcbiAgICB2YXIgY29tcGFyZSA9IFtdO1xcblxcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5wdXRzKSB7XFxuICAgICAgY29tcGFyZSA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY29tcGFyZSksIF90b0NvbnN1bWFibGVBcnJheShfdGhpczIuZ2V0KGlucHV0c1trZXldLCBkYXRhKSkpO1xcbiAgICB9XFxuXFxuICAgIHZhciByZXN1bHQgPSBjb21wYXJlLmZpbHRlcihmdW5jdGlvbiAodCkge1xcbiAgICAgIHJldHVybiB0O1xcbiAgICB9KTtcXG4gICAgZGF0YS5oaWRlID0gZGF0YXMgJiYgZGF0YXMuaW5kZXhPZihkYXRhKSA9PT0gLTEgPyB0cnVlIDogZmFsc2U7XFxuXFxuICAgIGlmICghZGF0YS5oaWRlKSB7XFxuICAgICAgZGF0YS5oaWRlID0gY29tcGFyZS5sZW5ndGggPT09IHJlc3VsdC5sZW5ndGggPyBmYWxzZSA6IHRydWU7XFxuICAgIH1cXG5cXG4gICAgZGF0YS5oaWRlID8gZGF0YS5hYmNfc2VsZWN0b3IuY2xhc3NMaXN0LmFkZChcImFiYy1oaWRlXCIpIDogZGF0YS5hYmNfc2VsZWN0b3IuY2xhc3NMaXN0LnJlbW92ZShcImFiYy1oaWRlXCIpO1xcbiAgICBkYXRhLmhpZGUgPyBkYXRhLmFiY19zZWxlY3Rvci5jbGFzc0xpc3QucmVtb3ZlKFwiYWJjLXNob3dcIikgOiBkYXRhLmFiY19zZWxlY3Rvci5jbGFzc0xpc3QuYWRkKFwiYWJjLXNob3dcIik7XFxuXFxuICAgIGlmICghZGF0YS5oaWRlKSB7XFxuICAgICAgcmV0dXJuIGRhdGE7XFxuICAgIH1cXG4gIH0pO1xcblxcbiAgaWYgKHRoaXMuZWwuZ2V0X25iUmVzdWx0KSB7XFxuICAgIHRoaXMuZWwuZ2V0X25iUmVzdWx0LnVwZGF0ZShuYnMubGVuZ3RoKTtcXG4gIH1cXG59O1xcblxcbkFjdGlvbi5wcm90b3R5cGUuZmlsdGVyQnlLZXkgPSBmdW5jdGlvbiAodmFsdWUpIHtcXG4gIHZhciBhcnJheSA9IHt9O1xcblxcbiAgaWYgKCF0aGlzLmVsLmlucHV0cykge1xcbiAgICByZXR1cm47XFxuICB9XFxuXFxuICBmb3IgKHZhciBrZXkgaW4gdGhpcy5lbC5pbnB1dHMpIHtcXG4gICAgaWYgKGtleSAhPSB2YWx1ZSkge1xcbiAgICAgIGFycmF5W2tleV0gPSB0aGlzLmVsLmlucHV0c1trZXldO1xcbiAgICB9XFxuICB9XFxuXFxuICByZXR1cm4gYXJyYXk7XFxufTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdlJtbHNkR1Z5TDBGamRHbHZibk12UVdOMGFXOXVMbXB6TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2UVVKREx5NHZjM0pqTDBacGJIUmxjaTlCWTNScGIyNXpMMEZqZEdsdmJpNXFjejh4Wm1Ga0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCN1pYSnliM0lzSUdselZHRnlaMlYwTENCcGMxUmhjbWRsZEZObGJHVmpkR1ZrSUgwZ0lEMGdjbVZ4ZFdseVpTQW9KeTR1THk0dUwwaGxiSEJsY25NdlZYUnBiSE1uS1R0Y2JseHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJQ2dnWld3Z0tTQTlQaUI3SUhKbGRIVnliaUJ1WlhjZ1FXTjBhVzl1S0NCbGJDQXBJSDFjYmx4dVpuVnVZM1JwYjI0Z1FXTjBhVzl1S0dWc0tYdGNiaUFnZEdocGN5NWxiQ0E5SUdWc1hHNTlPMXh1WEc1QlkzUnBiMjR1Y0hKdmRHOTBlWEJsTG5Wd1pHRjBaU0E5SUdaMWJtTjBhVzl1S0dVcGUxeHVYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUhSb2FYTXVaV3d1YVc1d2RYUnpLU0I3WEc0Z0lDQWdJQ0J6ZDJsMFkyZ2dLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSmphR1ZqYTJKdmVGd2lJRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvSVhSb2FYTXVaV3d1YVc1d2RYUnpMbU5vWldOclltOTRLU0JsY25KdmNpZ2dKeUJPYnlCamFHVmphMkp2ZUNCelpYUjBaV1FnSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnNMbWx1Y0hWMGN5NWphR1ZqYTJKdmVDNW1iM0pGWVdOb0tDQmphR1ZqYTJKdmVDQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtS0NCcGMxUmhjbWRsZENobExDQmphR1ZqYTJKdmVDa2dLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydGliM2d1ZFhCa1lYUmxLSFJvYVhNcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWW9kR2hwY3k1bGJDNTFjbXdwSUhSb2FYTXVaV3d1ZFhKc0xtTnZibk4wY25WamRDZ2dZMmhsWTJ0aWIzZ2dLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNCallYTmxJRndpY21Ga2FXOWNJaUE2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0NGMGFHbHpMbVZzTG1sdWNIVjBjeTV5WVdScGJ5a2daWEp5YjNJb0lDY2dUbThnY21Ga2FXOGdjMlYwZEdWa0lDY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYkM1cGJuQjFkSE11Y21Ga2FXOHVabTl5UldGamFDZ2djbUZrYVc4Z1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaWdnYVhOVVlYSm5aWFFvWlN3Z2NtRmthVzhwSUNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtRmthVzh1ZFhCa1lYUmxLSFJvYVhNcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWW9kR2hwY3k1bGJDNTFjbXdwSUhSb2FYTXVaV3d1ZFhKc0xtTnZibk4wY25WamRDZ2djbUZrYVc4Z0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0JqWVhObElGd2ljMlZzWldOMFhDSWdPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWdoZEdocGN5NWxiQzVwYm5CMWRITXVjMlZzWldOMEtTQmxjbkp2Y2lnZ0p5Qk9ieUJ6Wld4bFkzUWdjMlYwZEdWa0lDY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYkM1cGJuQjFkSE11YzJWc1pXTjBMbVp2Y2tWaFkyZ29JSE5sYkdWamRDQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtS0NCcGMxUmhjbWRsZEZObGJHVmpkR1ZrS0dVc0lITmxiR1ZqZEN3Z2RHaHBjeTVsYkM1bWIzSnRUMkpxS1NBcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxiR1ZqZEM1MWNHUmhkR1VvZEdocGN5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaWgwYUdsekxtVnNMblZ5YkNrZ2RHaHBjeTVsYkM1MWNtd3VZMjl1YzNSeWRXTjBLQ0J6Wld4bFkzUWdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNCallYTmxJRndpYzJWaGNtTm9YQ0lnT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlnaGRHaHBjeTVsYkM1cGJuQjFkSE11YzJWaGNtTm9LU0JsY25KdmNpZ2dKeUJPYnlCelpXRnlZMmdnYzJWMGRHVmtJQ2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJDNXBibkIxZEhNdWMyVmhjbU5vTG1admNrVmhZMmdvSUhObFlYSmphQ0E5UGlCN1hHNGdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaWdnYVhOVVlYSm5aWFFvWlN3Z2MyVmhjbU5vS1NBcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxZWEpqYUM1MWNHUmhkR1VvZEdocGN5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaWgwYUdsekxtVnNMblZ5YkNrZ2RHaHBjeTVsYkM1MWNtd3VZMjl1YzNSeWRXTjBLQ0J6WldGeVkyZ2dLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtTQmNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSW5KaGJtZGxYQ0lnT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlnaGRHaHBjeTVsYkM1cGJuQjFkSE11Y21GdVoyVXBJR1Z5Y205eUtDQW5JRTV2SUhKaGJtZGxJSE5sZEhSbFpDQW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Wld3dWFXNXdkWFJ6TG5KaGJtZGxMbVp2Y2tWaFkyZ29JSEpoYm1kbElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lvSUNGeVlXNW5aUzV0ZFd4MGFYQnNaU0FtSmlCcGMxUmhjbWRsZENobExDQnlZVzVuWlNrZ2ZId2dJQ0Z5WVc1blpTNXRkV3gwYVhCc1pTQW1KaUJwYzFSaGNtZGxkQ2hsTENCeVlXNW5aUzV0YVc0cGZId2djbUZ1WjJVdWJYVnNkR2x3YkdVZ0ppWWdhWE5VWVhKblpYUW9aU3dnY21GdVoyVXViV2x1S1NCOGZDQnlZVzVuWlM1dGRXeDBhWEJzWlNBbUppQnBjMVJoY21kbGRDaGxMQ0J5WVc1blpTNXRZWGdwSUNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtRnVaMlV1ZFhCa1lYUmxLSFJvYVhNcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWW9kR2hwY3k1bGJDNTFjbXdwSUhSb2FYTXVaV3d1ZFhKc0xtTnZibk4wY25WamRGSmhibWRsS0NCeVlXNW5aU0FwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JjYmlBZ1hHNGdJRUZqZEdsdmJpNXdjbTkwYjNSNWNHVXVaMlYwSUQwZ1puVnVZM1JwYjI0b1lYSnlZWGtzSUdSaGRHRXBJSHRjYmlBZ0lDQnNaWFFnZG1Gc2FXUmhkR2x2YmlBOUlGdGRPMXh1SUNBZ0lHRnljbUY1TG1admNrVmhZMmdvSUdWc0lEMCtJSHRjYmlBZ0lDQWdJSFpoYkdsa1lYUnBiMjR1Y0hWemFDaGxiQzUyWVd4cFpHRjBaU2hrWVhSaEtTazdYRzRnSUNBZ2ZTbGNiaUFnWEc0Z0lDQWdjbVYwZFhKdUlIWmhiR2xrWVhScGIyNDdYRzRnSUgxY2JpQWdYRzRnSUZ4dUlDQkJZM1JwYjI0dWNISnZkRzkwZVhCbExtUnZJRDBnWm5WdVkzUnBiMjRvWld3cGUxeHVJQ0FnSUd4bGRDQnBibkIxZEhNZ1BTQjBhR2x6TG1acGJIUmxja0o1UzJWNUtGd2ljMlZoY21Ob1hDSXBPMXh1SUNBZ0lHeGxkQ0JrWVhSaGN5QWdQU0IwYUdsekxtVnNMbVJoZEdGelhHNWNiaUFnSUNCcFppZ2dkR2hwY3k1bGJDNXBibkIxZEhNdWMyVmhjbU5vSUNrZ2RHaHBjeTVsYkM1cGJuQjFkSE11YzJWaGNtTm9MbVp2Y2tWaFkyZ29JSE1nUFQ0Z2V5QmtZWFJoY3lBOUlITXVkbUZzYVdSaGRHVW9JQ0IwYUdsekxtVnNMbVJoZEdGeklDa2dmU0FwTzF4dUlDQmNiaUFnSUNCc1pYUWdibUp6SUQwZ2RHaHBjeTVsYkM1a1lYUmhjeTVtYVd4MFpYSW9JR1JoZEdFZ1BUNGdlMXh1SUNBZ0lDQWdiR1YwSUdOdmJYQmhjbVVnUFNCYlhUdGNiaUFnSUNBZ0lHWnZjaUFvWTI5dWMzUWdhMlY1SUdsdUlHbHVjSFYwY3lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjF3WVhKbElEMGdXeTR1TG1OdmJYQmhjbVVzSUM0dUxuUm9hWE11WjJWMEtHbHVjSFYwYzF0clpYbGRMQ0JrWVhSaEtWMDdYRzRnSUNBZ0lDQjlYRzRnSUZ4dUlDQmNiaUFnSUNBZ0lHeGxkQ0J5WlhOMWJIUWdQU0JqYjIxd1lYSmxMbVpwYkhSbGNpZ2dkQ0E5UGlCMElDazdYRzRnSUNBZ1hHNGdJQ0FnSUNCY2JpQWdJQ0FnSUdSaGRHRXVhR2xrWlNBOUlHUmhkR0Z6SUNZbUlHUmhkR0Z6TG1sdVpHVjRUMllvWkdGMFlTa2dQVDA5SUMweElEOGdkSEoxWlNBNklHWmhiSE5sTzF4dUlDQmNiaUFnSUNBZ0lGeHVJQ0FnSUNBZ2FXWWdLQ0ZrWVhSaExtaHBaR1VwSUdSaGRHRXVhR2xrWlNBOUlHTnZiWEJoY21VdWJHVnVaM1JvSUQwOVBTQnlaWE4xYkhRdWJHVnVaM1JvSUNBL0lHWmhiSE5sSURvZ2RISjFaVHRjYmlBZ1hHNGdJQ0FnSUNCa1lYUmhMbWhwWkdVZ1B5QmtZWFJoTG1GaVkxOXpaV3hsWTNSdmNpNWpiR0Z6YzB4cGMzUXVZV1JrS0NCY0ltRmlZeTFvYVdSbFhDSWdLU0E2SUdSaGRHRXVZV0pqWDNObGJHVmpkRzl5TG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvSUZ3aVlXSmpMV2hwWkdWY0lpQXBYRzRnSUNBZ0lDQmtZWFJoTG1ocFpHVWdQeUJrWVhSaExtRmlZMTl6Wld4bFkzUnZjaTVqYkdGemMweHBjM1F1Y21WdGIzWmxLQ0JjSW1GaVl5MXphRzkzWENJZ0tTQTZJR1JoZEdFdVlXSmpYM05sYkdWamRHOXlMbU5zWVhOelRHbHpkQzVoWkdRb0lGd2lZV0pqTFhOb2IzZGNJaUFwWEc0Z0lGeHVJQ0FnSUNBZ2FXWW9JV1JoZEdFdWFHbGtaU2tnY21WMGRYSnVJR1JoZEdGY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUdsbUtIUm9hWE11Wld3dVoyVjBYMjVpVW1WemRXeDBLU0IwYUdsekxtVnNMbWRsZEY5dVlsSmxjM1ZzZEM1MWNHUmhkR1VvSUc1aWN5NXNaVzVuZEdnZ0tUdGNiaUFnZlZ4dUlDQmNiaUFnUVdOMGFXOXVMbkJ5YjNSdmRIbHdaUzVtYVd4MFpYSkNlVXRsZVNBOUlHWjFibU4wYVc5dUtIWmhiSFZsS1NCN1hHNGdJQ0JqYjI1emRDQmhjbkpoZVNBOUlIdDlPMXh1SUNBZ2FXWW9JQ0YwYUdsekxtVnNMbWx1Y0hWMGN5QXBJSEpsZEhWeWJqdGNiaUFnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUIwYUdsekxtVnNMbWx1Y0hWMGN5a2dleUJwWmlBb2EyVjVJQ0U5SUhaaGJIVmxLU0JoY25KaGVWdHJaWGxkSUQwZ2RHaHBjeTVsYkM1cGJuQjFkSE5iYTJWNVhTQjlYRzRnSUNCeVpYUjFjbTRnWVhKeVlYazdYRzRnSUgxY2JpQWdYRzRnSUNKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJSVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVSQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlJrRTdRVUZEUVR0QlFVUkJPMEZCUjBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCVWtFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVTFCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVVpCTzBGQlEwRTdRVUZFUVR0QlFVZEJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFWSkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGTlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGR1FUdEJRVU5CTzBGQlJFRTdRVUZIUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZTUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJUVUU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJSa0U3UVVGRFFUdEJRVVJCTzBGQlNVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlZFRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVU5Qk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVaQk8wRkJRMEU3UVVGRVFUdEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVkpCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRk5RVHRCUVd4RVFUdEJRVzlFUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJSRUU3UVVGRFFUdEJRVVJCTzBGQlIwRTdRVUZEUVR0QlFVTkJPMEZCVEVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVWxCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVUkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJSRUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZFUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUVVFN1FVRkJRVHRCUVVkQk8wRkJRMEU3UVVGRlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9zcmMvRmlsdGVyL0FjdGlvbnMvQWN0aW9uLmpzXFxuJyl9LFwiLi9zcmMvRmlsdGVyL0FjdGlvbnMvQ2hhbmdlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9GaWx0ZXIvQWN0aW9ucy9DaGFuZ2UuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbChcInZhciBBY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0FjdGlvbiAqLyBcXFwiLi9zcmMvRmlsdGVyL0FjdGlvbnMvQWN0aW9uLmpzXFxcIik7XFxuXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZWwpIHtcXG4gIHJldHVybiBuZXcgb25DaGFuZ2UoZWwpO1xcbn07XFxuXFxuZnVuY3Rpb24gb25DaGFuZ2UoZWwpIHtcXG4gIHRoaXMuZWwgPSBlbDtcXG4gIHRoaXMuYWN0aW9uID0gbmV3IEFjdGlvbihlbCk7XFxuICB0aGlzLmJpbmRFdmVudCgpO1xcbn1cXG5cXG47XFxuXFxub25DaGFuZ2UucHJvdG90eXBlLmJpbmRFdmVudCA9IGZ1bmN0aW9uICgpIHtcXG4gIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICB0aGlzLmVsLmZvcm1PYmouYWRkRXZlbnRMaXN0ZW5lcihcXFwia2V5ZG93blxcXCIsIGZ1bmN0aW9uIChlKSB7XFxuICAgIGlmIChlLmtleUNvZGUgPT09IDEzKSB7XFxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xcbiAgICB9XFxuICB9KTtcXG4gIHZhciBldmVudHMgPSBbJ2NsaWNrJywgJ2NoYW5nZScsICdrZXl1cCcsICdpbnB1dCddO1xcbiAgdmFyIF9hID0gZXZlbnRzO1xcblxcbiAgdmFyIF9mID0gZnVuY3Rpb24gX2YoZXZlbnQpIHtcXG4gICAgX3RoaXMuZWwuZm9ybU9iai5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmdW5jdGlvbiAoZSkge1xcbiAgICAgIGlmIChlLmtleUNvZGUgPT09IDEzKSB7XFxuICAgICAgICByZXR1cm47XFxuICAgICAgfVxcblxcbiAgICAgIF90aGlzLmFjdGlvbi51cGRhdGUoZSk7XFxuXFxuICAgICAgaWYgKF90aGlzLmVsLnVybCkge1xcbiAgICAgICAgbG9jYXRpb24uaGFzaCA9IF90aGlzLmVsLnVybC5zZWFyY2gudG9TdHJpbmcoKTtcXG4gICAgICB9XFxuXFxuICAgICAgX3RoaXMuYWN0aW9uLmRvKCk7IC8vIHRoaXMuZWwuZmFjZXR0ZS51cGRhdGUodGhpcy5lbClcXG5cXG4gICAgfSk7XFxuICB9O1xcblxcbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xcbiAgICBfZihfYVtfaV0sIF9pLCBfYSk7XFxuICB9XFxuXFxuICB1bmRlZmluZWQ7XFxuXFxuICBpZiAodGhpcy5lbC51cmwpIHtcXG4gICAgdGhpcy5hY3Rpb24uZG8oKTtcXG4gIH1cXG59Oy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXpjbU12Um1sc2RHVnlMMEZqZEdsdmJuTXZRMmhoYm1kbExtcHpMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZRVUpETHk0dmMzSmpMMFpwYkhSbGNpOUJZM1JwYjI1ekwwTm9ZVzVuWlM1cWN6OWpZVGhsSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJCWTNScGIyNGdQU0J5WlhGMWFYSmxLQ0FuTGk5QlkzUnBiMjRuSUNrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlDZ2daV3dnS1NBOVBpQjdJSEpsZEhWeWJpQnVaWGNnYjI1RGFHRnVaMlVvSUdWc0lDa2dmVnh1WEc1bWRXNWpkR2x2YmlCdmJrTm9ZVzVuWlNobGJDbDdYRzRnSUhSb2FYTXVaV3dnUFNCbGJGeHVJQ0IwYUdsekxtRmpkR2x2YmlBOUlHNWxkeUJCWTNScGIyNG9aV3dwWEc1Y2JpQWdkR2hwY3k1aWFXNWtSWFpsYm5Rb0tUdGNibjA3WEc1Y2JseHViMjVEYUdGdVoyVXVjSEp2ZEc5MGVYQmxMbUpwYm1SRmRtVnVkQ0E5SUdaMWJtTjBhVzl1S0NsN1hHNWNiaUFnZEdocGN5NWxiQzVtYjNKdFQySnFMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0pyWlhsa2IzZHVYQ0lzSUdVZ1BUNGdlMXh1SUNBZ0lHbG1JQ2hsTG10bGVVTnZaR1VnUFQwOUlERXpLU0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lIMHBYRzRnSUdOdmJuTjBJR1YyWlc1MGN5QTlJRnNuWTJ4cFkyc25MQ0FuWTJoaGJtZGxKeXdnSjJ0bGVYVndKeXdnSjJsdWNIVjBKMTFjYmlBZ1pYWmxiblJ6TG1admNrVmhZMmdvSUdWMlpXNTBJRDArSUh0Y2JpQWdJQ0IwYUdsekxtVnNMbVp2Y20xUFltb3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpaGxkbVZ1ZEN3Z1pTQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb1pTNXJaWGxEYjJSbElEMDlQU0F4TXlrZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnWEc0Z0lDQWdJQ0IwYUdsekxtRmpkR2x2Ymk1MWNHUmhkR1VvWlNrN1hHNGdJQ0FnSUNCcFppaDBhR2x6TG1Wc0xuVnliQ2tnYkc5allYUnBiMjR1YUdGemFDQTlJSFJvYVhNdVpXd3VkWEpzTG5ObFlYSmphQzUwYjFOMGNtbHVaeWdwWEc0Z0lDQWdJQ0IwYUdsekxtRmpkR2x2Ymk1a2J5Z2dLVnh1SUNBZ0lDQWdMeThnZEdocGN5NWxiQzVtWVdObGRIUmxMblZ3WkdGMFpTaDBhR2x6TG1Wc0tWeHVJQ0FnSUgwcFhHNGdJSDBwWEc0Z0lHbG1JQ2gwYUdsekxtVnNMblZ5YkNrZ2RHaHBjeTVoWTNScGIyNHVaRzhvS1Z4dVhHNTlYRzRpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVUkJPMEZCUTBFN1FVRkZRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRk1RVHRCUVVOQk8wRkJSRUU3UVVGUFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVdoQ1FUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVdEJPMEZCUTBFN1FVRlRRVHRCUVVGQk8wRkJRVUU3UVVGRlFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9zcmMvRmlsdGVyL0FjdGlvbnMvQ2hhbmdlLmpzXFxuXCIpfSxcIi4vc3JjL0ZpbHRlci9BY3Rpb25zL1JlZGlyZWN0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0ZpbHRlci9BY3Rpb25zL1JlZGlyZWN0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbChcInZhciBBY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0FjdGlvbiAqLyBcXFwiLi9zcmMvRmlsdGVyL0FjdGlvbnMvQWN0aW9uLmpzXFxcIik7XFxuXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZWwpIHtcXG4gIHJldHVybiBuZXcgb25SZWRpcmVjdChlbCk7XFxufTtcXG5cXG5mdW5jdGlvbiBvblJlZGlyZWN0KGVsKSB7XFxuICB0aGlzLmVsID0gZWw7XFxuICB0aGlzLmFjdGlvbiA9IG5ldyBBY3Rpb24oZWwpO1xcbiAgdGhpcy50YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsLmZvcm0udGFyZ2V0KTtcXG4gIHRoaXMubGluayA9IHRoaXMudGFyZ2V0LmhyZWY7XFxuICB0aGlzLmJpbmRFdmVudCgpO1xcbn1cXG5cXG47XFxuXFxub25SZWRpcmVjdC5wcm90b3R5cGUuYmluZEV2ZW50ID0gZnVuY3Rpb24gKCkge1xcbiAgdmFyIF90aGlzID0gdGhpcztcXG5cXG4gIHRoaXMuZWwuZm9ybU9iai5hZGRFdmVudExpc3RlbmVyKFxcXCJrZXlkb3duXFxcIiwgZnVuY3Rpb24gKGUpIHtcXG4gICAgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHtcXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XFxuICAgIH1cXG4gIH0pO1xcbiAgdmFyIGV2ZW50cyA9IFsnY2xpY2snLCAnY2hhbmdlJywgJ2tleXVwJywgJ2lucHV0J107XFxuICB2YXIgX2EgPSBldmVudHM7XFxuXFxuICB2YXIgX2YgPSBmdW5jdGlvbiBfZihldmVudCkge1xcbiAgICBfdGhpcy5lbC5mb3JtT2JqLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZ1bmN0aW9uIChlKSB7XFxuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHtcXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9XFxuXFxuICAgICAgX3RoaXMuYWN0aW9uLnVwZGF0ZShlKTtcXG5cXG4gICAgICBpZiAoX3RoaXMuZWwudXJsICYmIF90aGlzLmVsLmZvcm0uYWN0aW9uICE9ICdyZWRpcmVjdCcpIHtcXG4gICAgICAgIGxvY2F0aW9uLmhhc2ggPSBfdGhpcy5lbC51cmwuc2VhcmNoLnRvU3RyaW5nKCk7XFxuICAgICAgfVxcblxcbiAgICAgIF90aGlzLnRhcmdldC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBcXFwiXFxcIi5jb25jYXQoX3RoaXMubGluaywgXFxcIiNcXFwiKS5jb25jYXQoX3RoaXMuZWwudXJsLnNlYXJjaC50b1N0cmluZygpKSk7XFxuXFxuICAgICAgX3RoaXMuYWN0aW9uLmRvKCk7IC8vIHRoaXMuZWwuZmFjZXR0ZS51cGRhdGUodGhpcy5lbClcXG5cXG4gICAgfSk7XFxuICB9O1xcblxcbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xcbiAgICBfZihfYVtfaV0sIF9pLCBfYSk7XFxuICB9XFxuXFxuICB1bmRlZmluZWQ7XFxuXFxuICBpZiAodGhpcy5lbC51cmwpIHtcXG4gICAgdGhpcy5hY3Rpb24uZG8oKTtcXG4gIH1cXG59Oy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXpjbU12Um1sc2RHVnlMMEZqZEdsdmJuTXZVbVZrYVhKbFkzUXVhbk11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlCUWtNdkxpOXpjbU12Um1sc2RHVnlMMEZqZEdsdmJuTXZVbVZrYVhKbFkzUXVhbk0vWmpJellpSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1FXTjBhVzl1SUQwZ2NtVnhkV2x5WlNnZ0p5NHZRV04wYVc5dUp5QXBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FvSUdWc0lDa2dQVDRnZXlCeVpYUjFjbTRnYm1WM0lHOXVVbVZrYVhKbFkzUW9JR1ZzSUNrZ2ZWeHVYRzVtZFc1amRHbHZiaUJ2YmxKbFpHbHlaV04wS0dWc0tYdGNiaUFnSUNCMGFHbHpMbVZzSUQwZ1pXeGNiaUFnSUNCMGFHbHpMbUZqZEdsdmJpQTlJRzVsZHlCQlkzUnBiMjRvWld3cFhHNGdJQ0FnZEdocGN5NTBZWEpuWlhRZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0dWc0xtWnZjbTB1ZEdGeVoyVjBLVnh1SUNBZ0lIUm9hWE11YkdsdWF5QTlJSFJvYVhNdWRHRnlaMlYwTG1oeVpXWmNiaUFnSUNCMGFHbHpMbUpwYm1SRmRtVnVkQ2dwTzF4dWZUdGNibHh1WEc1dmJsSmxaR2x5WldOMExuQnliM1J2ZEhsd1pTNWlhVzVrUlhabGJuUWdQU0JtZFc1amRHbHZiaWdwZTF4dVhHNGdJSFJvYVhNdVpXd3VabTl5YlU5aWFpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2lhMlY1Wkc5M2Jsd2lMQ0JsSUQwK0lIdGNiaUFnSUNCcFppQW9aUzVyWlhsRGIyUmxJRDA5UFNBeE15a2daUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNCOUtWeHVJQ0JqYjI1emRDQmxkbVZ1ZEhNZ1BTQmJKMk5zYVdOckp5d2dKMk5vWVc1blpTY3NJQ2RyWlhsMWNDY3NJQ2RwYm5CMWRDZGRYRzRnSUdWMlpXNTBjeTVtYjNKRllXTm9LQ0JsZG1WdWRDQTlQaUI3WEc0Z0lDQWdkR2hwY3k1bGJDNW1iM0p0VDJKcUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1pYWmxiblFzSUdVZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0dVdWEyVjVRMjlrWlNBOVBUMGdNVE1wSUhKbGRIVnlianRjYmlBZ0lDQWdJRnh1SUNBZ0lDQWdkR2hwY3k1aFkzUnBiMjR1ZFhCa1lYUmxLR1VwTzF4dUlDQWdJQ0FnYVdZb2RHaHBjeTVsYkM1MWNtd2dKaVlnZEdocGN5NWxiQzVtYjNKdExtRmpkR2x2YmlBaFBTQW5jbVZrYVhKbFkzUW5LU0JzYjJOaGRHbHZiaTVvWVhOb0lEMGdkR2hwY3k1bGJDNTFjbXd1YzJWaGNtTm9MblJ2VTNSeWFXNW5LQ2xjYmlBZ0lDQmNiaUFnSUNBZ0lIUm9hWE11ZEdGeVoyVjBMbk5sZEVGMGRISnBZblYwWlNnbmFISmxaaWNzSUdBa2UzUm9hWE11YkdsdWEzMGpKSHQwYUdsekxtVnNMblZ5YkM1elpXRnlZMmd1ZEc5VGRISnBibWNvS1gxZ0tWeHVYRzRnSUNBZ0lDQjBhR2x6TG1GamRHbHZiaTVrYnlnZ0tWeHVJQ0FnSUNBZ0x5OGdkR2hwY3k1bGJDNW1ZV05sZEhSbExuVndaR0YwWlNoMGFHbHpMbVZzS1Z4dUlDQWdJSDBwWEc0Z0lIMHBYRzRnSUdsbUlDaDBhR2x6TG1Wc0xuVnliQ2tnZEdocGN5NWhZM1JwYjI0dVpHOG9LVnh1WEc1OVhHNGlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRVFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlRFRTdRVUZEUVR0QlFVUkJPMEZCVDBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCYmtKQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlMwRTdRVUZEUVR0QlFWbEJPMEZCUVVFN1FVRkJRVHRCUVVWQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9GaWx0ZXIvQWN0aW9ucy9SZWRpcmVjdC5qc1xcblwiKX0sXCIuL3NyYy9GaWx0ZXIvQWN0aW9ucy9TdWJtaXQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0ZpbHRlci9BY3Rpb25zL1N1Ym1pdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtldmFsKFwidmFyIEFjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQWN0aW9uICovIFxcXCIuL3NyYy9GaWx0ZXIvQWN0aW9ucy9BY3Rpb24uanNcXFwiKTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlbCkge1xcbiAgcmV0dXJuIG5ldyBvblN1Ym1pdChlbCk7XFxufTtcXG5cXG5mdW5jdGlvbiBvblN1Ym1pdChlbCkge1xcbiAgdGhpcy5lbCA9IGVsO1xcbiAgdGhpcy5hY3Rpb24gPSBuZXcgQWN0aW9uKGVsKTtcXG4gIHRoaXMudGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbC5mb3JtLnRhcmdldCk7XFxuICB0aGlzLmJpbmRFdmVudCgpO1xcbn1cXG5cXG47XFxuXFxub25TdWJtaXQucHJvdG90eXBlLmJpbmRFdmVudCA9IGZ1bmN0aW9uICgpIHtcXG4gIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICB2YXIgZXZlbnRzID0gWydjbGljaycsICdjaGFuZ2UnLCAna2V5dXAnLCAnaW5wdXQnXTtcXG4gIHZhciBfYSA9IGV2ZW50cztcXG5cXG4gIHZhciBfZiA9IGZ1bmN0aW9uIF9mKGV2ZW50KSB7XFxuICAgIF90aGlzLmVsLmZvcm1PYmouYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZnVuY3Rpb24gKGUpIHtcXG4gICAgICBpZiAoZS5rZXlDb2RlID09PSAxMykge1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH1cXG5cXG4gICAgICBfdGhpcy5hY3Rpb24udXBkYXRlKGUpO1xcbiAgICB9KTtcXG4gIH07XFxuXFxuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XFxuICAgIF9mKF9hW19pXSwgX2ksIF9hKTtcXG4gIH1cXG5cXG4gIHVuZGVmaW5lZDtcXG4gIHRoaXMudGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoXFxcImtleWRvd25cXFwiLCBmdW5jdGlvbiAoZSkge1xcbiAgICBpZiAoZS5rZXlDb2RlID09PSAxMykge1xcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcXG4gICAgfVxcblxcbiAgICBpZiAoX3RoaXMuZWwudXJsKSB7XFxuICAgICAgbG9jYXRpb24uaGFzaCA9IF90aGlzLmVsLnVybC5zZWFyY2gudG9TdHJpbmcoKTtcXG4gICAgfVxcblxcbiAgICBfdGhpcy5hY3Rpb24uZG8oKTtcXG4gIH0pO1xcbiAgdGhpcy50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XFxuXFxuICAgIGlmIChfdGhpcy5lbC51cmwpIHtcXG4gICAgICBsb2NhdGlvbi5oYXNoID0gX3RoaXMuZWwudXJsLnNlYXJjaC50b1N0cmluZygpO1xcbiAgICB9XFxuXFxuICAgIF90aGlzLmFjdGlvbi5kbygpOyAvLyB0aGlzLmVsLmZhY2V0dGUudXBkYXRlKHRoaXMuZWwpXFxuXFxuICB9KTtcXG5cXG4gIGlmICh0aGlzLmVsLnVybCkge1xcbiAgICB0aGlzLmFjdGlvbi5kbygpO1xcbiAgfVxcbn07XFxuXFxub25TdWJtaXQucHJvdG90eXBlLmRvID0gZnVuY3Rpb24gKCkge1xcbiAgdGhpcy5hY3Rpb24uZG8oKTtcXG59Oy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXpjbU12Um1sc2RHVnlMMEZqZEdsdmJuTXZVM1ZpYldsMExtcHpMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZRVUpETHk0dmMzSmpMMFpwYkhSbGNpOUJZM1JwYjI1ekwxTjFZbTFwZEM1cWN6ODJOall6SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJCWTNScGIyNGdQU0J5WlhGMWFYSmxLQ0FuTGk5QlkzUnBiMjRuSUNrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlDZ2daV3dnS1NBOVBpQjdJSEpsZEhWeWJpQnVaWGNnYjI1VGRXSnRhWFFvSUdWc0lDa2dmVnh1WEc1bWRXNWpkR2x2YmlCdmJsTjFZbTFwZENobGJDbDdJQ0JjYmlBZ2RHaHBjeTVsYkNBOUlHVnNYRzRnSUhSb2FYTXVZV04wYVc5dUlEMGdibVYzSUVGamRHbHZiaWhsYkNsY2JpQWdkR2hwY3k1MFlYSm5aWFFnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLR1ZzTG1admNtMHVkR0Z5WjJWMEtUdGNibHh1SUNCMGFHbHpMbUpwYm1SRmRtVnVkQ2dwTzF4dWZUdGNibHh1WEc1dmJsTjFZbTFwZEM1d2NtOTBiM1I1Y0dVdVltbHVaRVYyWlc1MElEMGdablZ1WTNScGIyNG9LWHRjYmx4dUlDQmpiMjV6ZENCbGRtVnVkSE1nUFNCYkoyTnNhV05ySnl3Z0oyTm9ZVzVuWlNjc0lDZHJaWGwxY0Njc0lDZHBibkIxZENkZFhHNGdJR1YyWlc1MGN5NW1iM0pGWVdOb0tDQmxkbVZ1ZENBOVBpQjdYRzRnSUNBZ2RHaHBjeTVsYkM1bWIzSnRUMkpxTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWlhabGJuUXNJR1VnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLR1V1YTJWNVEyOWtaU0E5UFQwZ01UTXBJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIUm9hWE11WVdOMGFXOXVMblZ3WkdGMFpTaGxLVHRjYmlBZ0lDQjlLVnh1SUNCOUtWeHVYRzRnSUhSb2FYTXVkR0Z5WjJWMExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSnJaWGxrYjNkdVhDSXNJR1VnUFQ0Z2UxeHVJQ0FnSUdsbUlDaGxMbXRsZVVOdlpHVWdQVDA5SURFektWeHVJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JpQWdJQ0JwWmloMGFHbHpMbVZzTG5WeWJDa2diRzlqWVhScGIyNHVhR0Z6YUNBOUlIUm9hWE11Wld3dWRYSnNMbk5sWVhKamFDNTBiMU4wY21sdVp5Z3BYRzRnSUNBZ2RHaHBjeTVoWTNScGIyNHVaRzhvS1Z4dUlDQjlLVnh1WEc0Z0lIUm9hWE11ZEdGeVoyVjBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk5zYVdOckp5d2daU0E5UGlCN1hHNGdJQ0FnSUNCbExuQnlaWFpsYm5SRVpXWmhkV3gwS0NsY2JpQWdJQ0FnSUdsbUtIUm9hWE11Wld3dWRYSnNLU0JzYjJOaGRHbHZiaTVvWVhOb0lEMGdkR2hwY3k1bGJDNTFjbXd1YzJWaGNtTm9MblJ2VTNSeWFXNW5LQ2xjYmlBZ0lDQWdJSFJvYVhNdVlXTjBhVzl1TG1SdktDbGNiaUFnSUNBZ0lDOHZJSFJvYVhNdVpXd3VabUZqWlhSMFpTNTFjR1JoZEdVb2RHaHBjeTVsYkNsY2JpQWdmU2xjYmx4dUlDQnBaaUFvZEdocGN5NWxiQzUxY213cElIUm9hWE11WVdOMGFXOXVMbVJ2S0NsY2JseHVmVnh1YjI1VGRXSnRhWFF1Y0hKdmRHOTBlWEJsTG1SdklEMGdablZ1WTNScGIyNG9LWHRjYmlBZ2RHaHBjeTVoWTNScGIyNHVaRzhvS1Z4dWZTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkVRVHRCUVVOQk8wRkJSVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZHUVR0QlFVTkJPMEZCUkVFN1FVRkpRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRlVRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVVZCTzBGQlQwRTdRVUZEUVR0QlFVTkJPMEZCUkVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9zcmMvRmlsdGVyL0FjdGlvbnMvU3VibWl0LmpzXFxuXCIpfSxcIi4vc3JjL0ZpbHRlci9Db3JlL0RhdGFzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0ZpbHRlci9Db3JlL0RhdGFzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbCgndmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vSGVscGVycy9BcnJheSAqLyBcIi4vc3JjL0hlbHBlcnMvQXJyYXkuanNcIiksXFxuICAgIGluQXJyYXkgPSBfcmVxdWlyZS5pbkFycmF5O1xcblxcbnZhciBvbkNoYW5nZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0FjdGlvbnMvQ2hhbmdlICovIFwiLi9zcmMvRmlsdGVyL0FjdGlvbnMvQ2hhbmdlLmpzXCIpO1xcblxcbnZhciBvblN1Ym1pdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0FjdGlvbnMvU3VibWl0ICovIFwiLi9zcmMvRmlsdGVyL0FjdGlvbnMvU3VibWl0LmpzXCIpO1xcblxcbnZhciBvblJlZGlyZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vQWN0aW9ucy9SZWRpcmVjdCAqLyBcIi4vc3JjL0ZpbHRlci9BY3Rpb25zL1JlZGlyZWN0LmpzXCIpO1xcblxcbnZhciBUZW1wbGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL09wdGlvbnMvVGVtcGxhdGUgKi8gXCIuL3NyYy9GaWx0ZXIvT3B0aW9ucy9UZW1wbGF0ZS5qc1wiKTtcXG5cXG52YXIgTnVtYmVyUmVzdWx0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL09wdGlvbnMvTnVtYmVyUmVzdWx0cyAqLyBcIi4vc3JjL0ZpbHRlci9PcHRpb25zL051bWJlclJlc3VsdHMuanNcIik7XFxuXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XFxuICByZXR1cm4gbmV3IERhdGFzKCk7XFxufTtcXG5cXG5mdW5jdGlvbiBEYXRhcygpIHtcXG4gIHRoaXMuZXh0cmFjdCA9IFxcJ1xcJztcXG4gIHRoaXMuY29udGFpbmVyID0gXFwnXFwnO1xcbiAgdGhpcy5kYXRhcyA9IFtdO1xcbn1cXG5cXG47XFxuXFxuRGF0YXMucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoZWwpIHtcXG4gIGVsLmRhdGFzID0gdGhpcy5maWx0ZXJlZCh0aGlzLmRhdGFzLCBlbCk7XFxuXFxuICBpZiAoZWwubmJfcmVzdWx0cyAmJiBlbC5uYl9yZXN1bHRzLnRhcmdldCkge1xcbiAgICBlbC5nZXRfbmJSZXN1bHQgPSBuZXcgTnVtYmVyUmVzdWx0cyhlbC5uYl9yZXN1bHRzLCBlbC5kYXRhcy5sZW5ndGgpO1xcbiAgfVxcblxcbiAgY29uc29sZS5pbmZvKFwiQUJDIFJlYWR5XCIpO1xcblxcbiAgaWYgKGVsLmRlYnVnKSB7XFxuICAgIGNvbnNvbGUuaW5mbyhcInVybDogXCIgKyBlbC5vcHRpb25zLnVybCk7XFxuICAgIGNvbnNvbGUuaW5mbyhlbC5kYXRhcy5sZW5ndGggKyBcIiBkYXRhcyBmb3VuZHNcIik7XFxuICB9XFxuXFxuICB0aGlzLmFjdGlvbnMoZWwpO1xcbn07XFxuXFxuRGF0YXMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChlbCkge1xcbiAgdmFyIHN0YXJ0ID0gZWwucmVzdWx0cy5vblN0YXJ0O1xcbiAgdmFyIGRhdGFzID0gdGhpcy5maW5kKGVsKTtcXG4gIHZhciBjb21wbGV0ZSA9IGVsLnJlc3VsdHMub25Db21wbGV0ZTtcXG5cXG4gIGlmIChzdGFydCkge1xcbiAgICBzdGFydCgpO1xcbiAgfVxcblxcbiAgUHJvbWlzZS5hbGwoW3N0YXJ0XSkudGhlbihmdW5jdGlvbiAoZGF0YXMpIHtcXG4gICAgcmV0dXJuIGRhdGFzO1xcbiAgfSk7XFxuXFxuICBpZiAoY29tcGxldGUpIHtcXG4gICAgUHJvbWlzZS5hbGwoW3N0YXJ0LCBkYXRhc10pLnRoZW4oZnVuY3Rpb24gKCkge1xcbiAgICAgIHJldHVybiBjb21wbGV0ZSgpO1xcbiAgICB9KTtcXG4gIH1cXG59O1xcblxcbkRhdGFzLnByb3RvdHlwZS5maWx0ZXJlZCA9IGZ1bmN0aW9uIChkYXRhcywgZWwpIHtcXG4gIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICByZXR1cm4gZGF0YXMuZmlsdGVyKGZ1bmN0aW9uIChkLCBpKSB7XFxuICAgIC8vU3RhdHVzXFxuICAgIGlmIChlbC5kYXRhc1tpXSkge1xcbiAgICAgIHJldHVybjtcXG4gICAgfVxcblxcbiAgICBkLmhpZGUgPSBmYWxzZTsgLy9zdG9jayBET00gZWxlbWVudFxcblxcbiAgICB2YXIgaWQgPSBpbkFycmF5KGQsIF90aGlzLnJlc3VsdHMuaWQpO1xcbiAgICBkLmlkID0gXCJcIi5jb25jYXQoX3RoaXMucmVzdWx0cy5wcmVmaXgpLmNvbmNhdChpZCk7XFxuICAgIGQuYWJjX3NlbGVjdG9yID0gZC5hYmNfc2VsZWN0b3IgPyBkLmFiY19zZWxlY3RvciA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjXCIuY29uY2F0KGQuaWQpKTtcXG5cXG4gICAgaWYgKF90aGlzLmNvbnRhaW5lciAmJiAhZC5hYmNfc2VsZWN0b3IpIHtcXG4gICAgICBkLnRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKF90aGlzLnJlc3VsdHMsIGQsIF90aGlzLmNvbnRhaW5lcik7XFxuICAgIH1cXG5cXG4gICAgZC5hYmNfc2VsZWN0b3IgPSBkLmFiY19zZWxlY3RvciA/IGQuYWJjX3NlbGVjdG9yIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIi5jb25jYXQoZC5pZCkpO1xcblxcbiAgICBpZiAoZC5hYmNfc2VsZWN0b3IpIHtcXG4gICAgICByZXR1cm4gZDtcXG4gICAgfVxcbiAgfSk7XFxufTtcXG5cXG5EYXRhcy5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uIChlbCkge1xcbiAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICB2YXIgZGF0YXM7XFxuXFxuICBpZiAoZWwub3B0aW9ucy51cmwpIHtcXG4gICAgZGF0YXMgPSBmZXRjaChlbC5vcHRpb25zLnVybCwgZWwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XFxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcXG4gICAgfSkudGhlbihmdW5jdGlvbiAoanNvbikge1xcbiAgICAgIF90aGlzMi5GZXRjaChudWxsLCBqc29uLCBlbCk7XFxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xcbiAgICAgIHJldHVybiBfdGhpczIuRmV0Y2goZXJyb3IsIG51bGwpO1xcbiAgICB9KTtcXG4gIH0gZWxzZSBkYXRhcyA9IHRoaXMuSFRNTChlbCk7XFxuXFxuICByZXR1cm4gZGF0YXM7XFxufTtcXG5cXG5EYXRhcy5wcm90b3R5cGUuSFRNTCA9IGZ1bmN0aW9uIChlbCkge1xcbiAgdmFyIGRhdGFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbC5yZXN1bHRzLnRhcmdldCk7XFxuICB0aGlzLnJlc3VsdHMgPSBlbC5yZXN1bHRzO1xcbiAgdmFyIF9hID0gZGF0YXM7XFxuXFxuICB2YXIgX2YgPSBmdW5jdGlvbiBfZihkKSB7XFxuICAgIHZhciBhcnIgPSB7XFxuICAgICAgYWJjX3NlbGVjdG9yOiBkXFxuICAgIH07XFxuICAgIHZhciBfYTIgPSBkLmF0dHJpYnV0ZXM7XFxuXFxuICAgIHZhciBfZjIgPSBmdW5jdGlvbiBfZjIoYXR0cikge1xcbiAgICAgIHJldHVybiBhcnJbYXR0ci5uYW1lXSA9IGF0dHIudmFsdWU7XFxuICAgIH07XFxuXFxuICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IF9hMi5sZW5ndGg7IF9pMisrKSB7XFxuICAgICAgX2YyKF9hMltfaTJdLCBfaTIsIF9hMik7XFxuICAgIH1cXG5cXG4gICAgdW5kZWZpbmVkO1xcbiAgICByZXR1cm4gYXJyO1xcbiAgfTtcXG5cXG4gIHZhciBfciA9IFtdO1xcblxcbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xcbiAgICBfci5wdXNoKF9mKF9hW19pXSwgX2ksIF9hKSk7XFxuICB9XFxuXFxuICB0aGlzLmRhdGFzID0gX3I7XFxuICB0aGlzLmluaXQoZWwpO1xcbn07XFxuXFxuRGF0YXMucHJvdG90eXBlLkZldGNoID0gZnVuY3Rpb24gKGVycm9yLCBzdWNjZXNzLCBlbCkge1xcbiAgaWYgKGVycm9yKSB7XFxuICAgIGNvbnNvbGUubG9nKGVycm9yKTtcXG4gIH0gZWxzZSB7XFxuICAgIHRoaXMuZGF0YXMgPSBzdWNjZXNzO1xcbiAgICB0aGlzLnJlc3VsdHMgPSBlbC5yZXN1bHRzO1xcblxcbiAgICBpZiAoZWwucmVzdWx0cy5wYXRoKSB7XFxuICAgICAgdGhpcy5kYXRhcyA9IGluQXJyYXkodGhpcy5kYXRhcywgZWwucmVzdWx0cy5wYXRoKTtcXG4gICAgfVxcblxcbiAgICBpZiAoZWwucmVzdWx0cy50ZW1wbGF0ZSkge1xcbiAgICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbC5yZXN1bHRzLmNvbnRhaW5lcik7XFxuICAgIH1cXG5cXG4gICAgdGhpcy5pbml0KGVsKTtcXG4gIH1cXG59O1xcblxcbkRhdGFzLnByb3RvdHlwZS5hY3Rpb25zID0gZnVuY3Rpb24gKGVsKSB7XFxuICBzd2l0Y2ggKGVsLmZvcm0uYWN0aW9uKSB7XFxuICAgIGNhc2UgXFwnY2hhbmdlXFwnOlxcbiAgICAgIGVsLmZvcm0uZm4gPSBuZXcgb25DaGFuZ2UoZWwpO1xcbiAgICAgIGJyZWFrO1xcblxcbiAgICBjYXNlIFxcJ3N1Ym1pdFxcJzpcXG4gICAgICBlbC5mb3JtLmZuID0gbmV3IG9uU3VibWl0KGVsKTtcXG4gICAgICBicmVhaztcXG5cXG4gICAgY2FzZSBcXCdyZWRpcmVjdFxcJzpcXG4gICAgICBlbC5mb3JtLmZuID0gbmV3IG9uUmVkaXJlY3QoZWwpO1xcbiAgICAgIGJyZWFrO1xcbiAgfVxcbn07Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5emNtTXZSbWxzZEdWeUwwTnZjbVV2UkdGMFlYTXVhbk11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlCUWtNdkxpOXpjbU12Um1sc2RHVnlMME52Y21VdlJHRjBZWE11YW5NL1lUQmhNU0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdleUJwYmtGeWNtRjVJSDBnSUQwZ2NtVnhkV2x5WlNBb0p5NHVMeTR1TDBobGJIQmxjbk12UVhKeVlYa25JQ2s3WEc1Y2JuWmhjaUJ2YmtOb1lXNW5aU0E5SUhKbGNYVnBjbVVnS0NBbkxpNHZRV04wYVc5dWN5OURhR0Z1WjJVbklDbGNiblpoY2lCdmJsTjFZbTFwZENBOUlISmxjWFZwY21VZ0tDQW5MaTR2UVdOMGFXOXVjeTlUZFdKdGFYUW5JQ2xjYm5aaGNpQnZibEpsWkdseVpXTjBJRDBnY21WeGRXbHlaU0FvSUNjdUxpOUJZM1JwYjI1ekwxSmxaR2x5WldOMEp5QXBYRzVjYm5aaGNpQlVaVzF3YkdGMFpTQTlJSEpsY1hWcGNtVWdLQ0FuTGk0dlQzQjBhVzl1Y3k5VVpXMXdiR0YwWlNjZ0tUdGNiblpoY2lCT2RXMWlaWEpTWlhOMWJIUnpJRDBnY21WeGRXbHlaU0FvSUNjdUxpOVBjSFJwYjI1ekwwNTFiV0psY2xKbGMzVnNkSE1uSUNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdLQ2tnUFQ0Z2V5QnlaWFIxY200Z2JtVjNJRVJoZEdGektDa2dmVnh1WEc1bWRXNWpkR2x2YmlCRVlYUmhjeWdwZTF4dUlDQjBhR2x6TG1WNGRISmhZM1FnUFNBbkp6dGNiaUFnZEdocGN5NWpiMjUwWVdsdVpYSWdQU0FuSnp0Y2JpQWdkR2hwY3k1a1lYUmhjeUE5SUZ0ZFhHNTlPMXh1WEc1Y2JrUmhkR0Z6TG5CeWIzUnZkSGx3WlM1cGJtbDBJRDBnWm5WdVkzUnBiMjRvWld3cElIdGNiaUFnWld3dVpHRjBZWE1nUFNCMGFHbHpMbVpwYkhSbGNtVmtLSFJvYVhNdVpHRjBZWE1zSUdWc0tWeHVJQ0JjYmlBZ2FXWW9JR1ZzTG01aVgzSmxjM1ZzZEhNZ0ppWWdaV3d1Ym1KZmNtVnpkV3gwY3k1MFlYSm5aWFFwSUdWc0xtZGxkRjl1WWxKbGMzVnNkQ0E5SUc1bGR5Qk9kVzFpWlhKU1pYTjFiSFJ6S0dWc0xtNWlYM0psYzNWc2RITXNJR1ZzTG1SaGRHRnpMbXhsYm1kMGFDbGNiaUFnWEc0Z0lHTnZibk52YkdVdWFXNW1ieWhjSWtGQ1F5QlNaV0ZrZVZ3aUtWeHVJQ0JwWmlobGJDNWtaV0oxWnlrZ2UxeHVJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z2dYQ0oxY213NklGd2lJQ3NnWld3dWIzQjBhVzl1Y3k1MWNtd3BYRzRnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ0JsYkM1a1lYUmhjeTVzWlc1bmRHZ2dLeUJjSWlCa1lYUmhjeUJtYjNWdVpITmNJaWxjYmlBZ2ZWeHVJQ0JjYmlBZ2RHaHBjeTVoWTNScGIyNXpLR1ZzS1Z4dWZWeHVYRzVjYmtSaGRHRnpMbkJ5YjNSdmRIbHdaUzVuWlhRZ1BTQm1kVzVqZEdsdmJpaGxiQ2tnZTF4dUlDQmpiMjV6ZENCemRHRnlkQ0E5SUdWc0xuSmxjM1ZzZEhNdWIyNVRkR0Z5ZER0Y2JpQWdZMjl1YzNRZ1pHRjBZWE1nUFNCMGFHbHpMbVpwYm1Rb1pXd3BYRzRnSUdOdmJuTjBJR052YlhCc1pYUmxJRDBnWld3dWNtVnpkV3gwY3k1dmJrTnZiWEJzWlhSbE8xeHVJQ0JjYmlBZ2FXWW9jM1JoY25RcElITjBZWEowS0NrN1hHNGdJRkJ5YjIxcGMyVXVZV3hzS0Z0emRHRnlkRjBwTG5Sb1pXNG9JQ2hrWVhSaGN5a2dQVDRnWkdGMFlYTXBPMXh1SUNCcFppaGpiMjF3YkdWMFpTa2dVSEp2YldselpTNWhiR3dvVzNOMFlYSjBMQ0JrWVhSaGMxMHBMblJvWlc0b0lDZ3BJRDArSUdOdmJYQnNaWFJsS0NrZ0tUdGNibHh1ZlZ4dVhHNWNibHh1UkdGMFlYTXVjSEp2ZEc5MGVYQmxMbVpwYkhSbGNtVmtJRDBnWm5WdVkzUnBiMjRvWkdGMFlYTXNJR1ZzS1NCN1hHNGdJSEpsZEhWeWJpQmtZWFJoY3k1bWFXeDBaWElvSUNoa0xDQnBLU0E5UGlCN1hHNWNiaUFnSUNBdkwxTjBZWFIxYzF4dUlDQWdJRnh1SUNBZ0lHbG1LR1ZzTG1SaGRHRnpXMmxkS1NCeVpYUjFjbTVjYmx4dUlDQWdJR1F1YUdsa1pTQTlJR1poYkhObE8xeHVJQ0FnSUZ4dUlDQWdJQzh2YzNSdlkyc2dSRTlOSUdWc1pXMWxiblJjYmlBZ0lDQmpiMjV6ZENCcFpDQTlJR2x1UVhKeVlYa29aQ3dnZEdocGN5NXlaWE4xYkhSekxtbGtLVHRjYmlBZ0lDQmNiaUFnSUNCa0xtbGtJRDBnWUNSN2RHaHBjeTV5WlhOMWJIUnpMbkJ5WldacGVIMGtlMmxrZldBN1hHNWNiaUFnSUNCa0xtRmlZMTl6Wld4bFkzUnZjaUE5SUdRdVlXSmpYM05sYkdWamRHOXlJRDhnWkM1aFltTmZjMlZzWldOMGIzSWdPaUJrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtHQWpKSHRrTG1sa2ZXQXBYRzVjYmlBZ0lDQnBaaWdnZEdocGN5NWpiMjUwWVdsdVpYSWdKaVlnSVdRdVlXSmpYM05sYkdWamRHOXlJQ2tnWkM1MFpXMXdiR0YwWlNBOUlHNWxkeUJVWlcxd2JHRjBaU2gwYUdsekxuSmxjM1ZzZEhNc0lHUXNJSFJvYVhNdVkyOXVkR0ZwYm1WeUtWeHVJQ0FnSUZ4dUlDQWdJR1F1WVdKalgzTmxiR1ZqZEc5eUlEMGdaQzVoWW1OZmMyVnNaV04wYjNJZ1B5QmtMbUZpWTE5elpXeGxZM1J2Y2lBNklHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvWUNNa2UyUXVhV1I5WUNsY2JseHVJQ0FnSUZ4dUlDQWdJR2xtS0dRdVlXSmpYM05sYkdWamRHOXlLU0J5WlhSMWNtNGdaRHRjYmlBZ2ZTazdYRzU5WEc1Y2JrUmhkR0Z6TG5CeWIzUnZkSGx3WlM1bWFXNWtJRDBnWm5WdVkzUnBiMjRvWld3cElIdGNibHh1SUNCc1pYUWdaR0YwWVhNN1hHNGdJR2xtS0dWc0xtOXdkR2x2Ym5NdWRYSnNLWHRjYmlBZ0lDQmtZWFJoY3lBOUlHWmxkR05vS0dWc0xtOXdkR2x2Ym5NdWRYSnNMQ0JsYkNrZ0lGeHVJQ0FnSUM1MGFHVnVLQ0J5WlhOd2IyNXpaU0E5UGlCeVpYTndiMjV6WlM1cWMyOXVLQ2tnS1Z4dUlDQWdJQzUwYUdWdUtDQnFjMjl1SUQwK0lIc2dkR2hwY3k1R1pYUmphQ2h1ZFd4c0xDQnFjMjl1TENCbGJDa2dJSDBwWEc0Z0lDQWdMbU5oZEdOb0tHVnljbTl5SUQwK0lIUm9hWE11Um1WMFkyZ29aWEp5YjNJc0lHNTFiR3dwS1Z4dUlDQjlaV3h6WlNCa1lYUmhjeUE5SUhSb2FYTXVTRlJOVENobGJDbGNibHh1SUNCeVpYUjFjbTRnWkdGMFlYTmNibjFjYmx4dVJHRjBZWE11Y0hKdmRHOTBlWEJsTGtoVVRVd2dQU0JtZFc1amRHbHZiaWhsYkNsN1hHNWNiaUFnWTI5dWMzUWdaR0YwWVhNZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tHVnNMbkpsYzNWc2RITXVkR0Z5WjJWMEtUdGNiaUFnZEdocGN5NXlaWE4xYkhSeklEMGdaV3d1Y21WemRXeDBjMXh1WEc0Z0lIUm9hWE11WkdGMFlYTWdQU0JrWVhSaGN5NXRZWEFvSUdRZ1BUNGdlMXh1WEc0Z0lDQWdZMjl1YzNRZ1lYSnlJRDBnZXlCaFltTmZjMlZzWldOMGIzSWdPaUJrSUgxY2JseHVJQ0FnSUdRdVlYUjBjbWxpZFhSbGN5NW1iM0pGWVdOb0tDQmhkSFJ5SUQwK0lHRnljbHRoZEhSeUxtNWhiV1ZkSUQwZ1lYUjBjaTUyWVd4MVpTQXBYRzVjYmlBZ0lDQnlaWFIxY200Z1lYSnlPMXh1SUNCOUtWeHVJQ0FnSUNBZ1hHNGdJSFJvYVhNdWFXNXBkQ2hsYkNsY2JuMWNibHh1UkdGMFlYTXVjSEp2ZEc5MGVYQmxMa1psZEdOb0lEMGdablZ1WTNScGIyNG9aWEp5YjNJc0lITjFZMk5sYzNNc0lHVnNLWHRjYmlBZ2FXWW9aWEp5YjNJcElHTnZibk52YkdVdWJHOW5LR1Z5Y205eUtUdGNiaUFnWld4elpTQjdYRzVjYmlBZ0lDQjBhR2x6TG1SaGRHRnpJRDBnYzNWalkyVnpjenRjYmlBZ0lDQjBhR2x6TG5KbGMzVnNkSE1nUFNCbGJDNXlaWE4xYkhSelhHNGdJQ0FnWEc0Z0lDQWdhV1lvSUdWc0xuSmxjM1ZzZEhNdWNHRjBhQ0FwSUhSb2FYTXVaR0YwWVhNZ1BTQnBia0Z5Y21GNUtIUm9hWE11WkdGMFlYTXNJR1ZzTG5KbGMzVnNkSE11Y0dGMGFDazdYRzRnSUNBZ2FXWW9JR1ZzTG5KbGMzVnNkSE11ZEdWdGNHeGhkR1VnS1NCMGFHbHpMbU52Ym5SaGFXNWxjaUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9aV3d1Y21WemRXeDBjeTVqYjI1MFlXbHVaWElwWEc0Z0lDQWdYRzRnSUNBZ2RHaHBjeTVwYm1sMEtHVnNLU0FnSUNCY2JpQWdmVnh1ZlZ4dVhHNUVZWFJoY3k1d2NtOTBiM1I1Y0dVdVlXTjBhVzl1Y3lBOUlHWjFibU4wYVc5dUtHVnNLU0I3WEc0Z0lITjNhWFJqYUNBb1pXd3VabTl5YlM1aFkzUnBiMjRwSUh0Y2JpQWdJQ0JqWVhObElDZGphR0Z1WjJVbk9seHVJQ0FnSUNBZ1pXd3VabTl5YlM1bWJpQTlJRzVsZHlCdmJrTm9ZVzVuWlNobGJDazdYRzRnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0JqWVhObElDZHpkV0p0YVhRbk9seHVJQ0FnSUNBZ1pXd3VabTl5YlM1bWJpQTlJRzVsZHlCdmJsTjFZbTFwZENobGJDazdYRzRnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0JqWVhObElDZHlaV1JwY21WamRDYzZYRzRnSUNBZ0lDQmxiQzVtYjNKdExtWnVJRDBnYm1WM0lHOXVVbVZrYVhKbFkzUW9aV3dwTzF4dUlDQWdJQ0FnWW5KbFlXczdYRzRnSUgxY2JuMWNibHh1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSRUU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRlFUdEJRVU5CTzBGQlIwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkZRVHRCUVVWQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUlVFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCU0VFN1FVRkRRVHRCUVVSQk8wRkJUMEU3UVVGQlFUdEJRVUZCTzBGQlJrRTdRVUZEUVR0QlFVUkJPMEZCU1VFN1FVRkJRVHRCUVVOQk8wRkJURUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZIUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVdKQk8wRkJRMEU3UVVGRVFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVbEJPMEZCVTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZIUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFWUkJPMEZCVjBFaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9GaWx0ZXIvQ29yZS9EYXRhcy5qc1xcbicpfSxcIi4vc3JjL0ZpbHRlci9Db3JlL0ZpbHRlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvRmlsdGVyL0NvcmUvRmlsdGVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2V2YWwoJ2Z1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XFxuXFxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vSGVscGVycy9BcnJheSAqLyBcIi4vc3JjL0hlbHBlcnMvQXJyYXkuanNcIiksXFxuICAgIHNldEFycmF5ID0gX3JlcXVpcmUuc2V0QXJyYXksXFxuICAgIHNldEFycmF5UmFuZ2UgPSBfcmVxdWlyZS5zZXRBcnJheVJhbmdlO1xcblxcbnZhciBDaGVja2JveCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0lucHV0cy9DaGVja2JveCAqLyBcIi4vc3JjL0ZpbHRlci9JbnB1dHMvQ2hlY2tib3guanNcIik7XFxuXFxudmFyIFJhZGlvID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vSW5wdXRzL1JhZGlvICovIFwiLi9zcmMvRmlsdGVyL0lucHV0cy9SYWRpby5qc1wiKTtcXG5cXG52YXIgUmFuZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9JbnB1dHMvUmFuZ2UgKi8gXCIuL3NyYy9GaWx0ZXIvSW5wdXRzL1JhbmdlLmpzXCIpO1xcblxcbnZhciBTZWxlY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9JbnB1dHMvU2VsZWN0ICovIFwiLi9zcmMvRmlsdGVyL0lucHV0cy9TZWxlY3QuanNcIik7XFxuXFxudmFyIFNlYXJjaCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0lucHV0cy9TZWFyY2ggKi8gXCIuL3NyYy9GaWx0ZXIvSW5wdXRzL1NlYXJjaC5qc1wiKTtcXG5cXG52YXIgVXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9VcmwgKi8gXCIuL3NyYy9GaWx0ZXIvQ29yZS9VcmwuanNcIik7XFxuXFxudmFyIExvYWRNb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vT3B0aW9ucy9Mb2FkTW9yZSAqLyBcIi4vc3JjL0ZpbHRlci9PcHRpb25zL0xvYWRNb3JlLmpzXCIpO1xcblxcbnZhciBGYWNldHRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vT3B0aW9ucy9GYWNldHRlICovIFwiLi9zcmMvRmlsdGVyL09wdGlvbnMvRmFjZXR0ZS5qc1wiKTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcXG4gIHJldHVybiBuZXcgRmlsdGVyKHBhcmFtcyk7XFxufTtcXG5cXG5mdW5jdGlvbiBGaWx0ZXIocGFyYW1zKSB7XFxuICB0aGlzLm9wdGlvbnMgPSB7XFxuICAgIHVybDogcGFyYW1zLnVybCA/IHBhcmFtcy51cmwgOiBmYWxzZSxcXG4gICAgY3JlYXRlX3VybDogcGFyYW1zLmNyZWF0ZV91cmwgPyBwYXJhbXMuY3JlYXRlX3VybCA6IGZhbHNlXFxuICB9O1xcbiAgdGhpcy51cmwgPSBwYXJhbXMuY3JlYXRlX3VybCB8fCBwYXJhbXMuZm9ybS5hY3Rpb24gPT09IFxcJ3JlZGlyZWN0XFwnID8gbmV3IFVybCgpIDogZmFsc2U7XFxuICB0aGlzLmRlYnVnID0gcGFyYW1zLmRlYnVnID8gcGFyYW1zLmRlYnVnIDogZmFsc2U7XFxuICB0aGlzLmRhdGFzID0gW107XFxuICB0aGlzLnJlc3VsdHMgPSB7XFxuICAgIHRhcmdldDogZmFsc2UsXFxuICAgIGFjdGlvbjogZmFsc2UsXFxuICAgIGlkOiBcXCdpZFxcJyxcXG4gICAgcGF0aDogXFwnXFwnLFxcbiAgICBwcmVmaXg6IFxcJ1xcJyxcXG4gICAgdmlzaWJsZV9jbGFzczogZmFsc2UsXFxuICAgIGhpZGRlbl9jbGFzczogZmFsc2UsXFxuICAgIGJlZm9yZV9zaG93OiBmYWxzZSxcXG4gICAgYmVmb3JlX2hpZGU6IGZhbHNlLFxcbiAgICB0ZW1wbGF0ZTogZmFsc2UsXFxuICAgIGNvbnRhaW5lcjogXCJcIixcXG4gICAgb25TdGFydDogZmFsc2UsXFxuICAgIG9uQ29tcGxldGU6IGZhbHNlXFxuICB9O1xcbiAgdGhpcy5uYl9yZXN1bHRzID0ge1xcbiAgICB0YXJnZXQ6IFxcJ1xcJyxcXG4gICAgbm9fcmVzdWx0czogXFwnXFwnLFxcbiAgICBzaW5ndWxhcjogXFwnXFwnLFxcbiAgICBwbHVyYWw6IFxcJ1xcJ1xcbiAgfTtcXG4gIHRoaXMuZm9ybSA9IF9kZWZpbmVQcm9wZXJ0eSh7XFxuICAgIHRhcmdldDogXFwnXFwnLFxcbiAgICBhY3Rpb246IFxcJ1xcJ1xcbiAgfSwgXCJ0YXJnZXRcIiwgXFwnXFwnKTtcXG4gIHRoaXMuZmFjZXR0ZSA9IGZhbHNlO1xcbiAgdGhpcy5sb2FkX21vcmUgPSBmYWxzZTtcXG4gIHJldHVybiB0aGlzO1xcbn1cXG5cXG47XFxuXFxuRmlsdGVyLnByb3RvdHlwZS5jb25zdHJ1Y3QgPSBmdW5jdGlvbiAocGFyYW1zKSB7XFxuICB0aGlzLmlucHV0cyA9IHt9O1xcblxcbiAgaWYgKHBhcmFtcy5yZXN1bHRzKSB7XFxuICAgIHRoaXMucmVzdWx0cyA9IHNldEFycmF5KHRoaXMucmVzdWx0cywgcGFyYW1zLnJlc3VsdHMpO1xcbiAgfVxcblxcbiAgaWYgKHBhcmFtcy5uYl9yZXN1bHRzKSB7XFxuICAgIHRoaXMubmJfcmVzdWx0cyA9IHNldEFycmF5KHRoaXMubmJfcmVzdWx0cywgcGFyYW1zLm5iX3Jlc3VsdHMpO1xcbiAgfVxcblxcbiAgaWYgKHBhcmFtcy5mb3JtKSB7XFxuICAgIHRoaXMuZm9ybSA9IHNldEFycmF5KHRoaXMuZm9ybSwgcGFyYW1zLmZvcm0pO1xcbiAgfVxcblxcbiAgaWYgKHBhcmFtcy5sb2FkX21vcmUpIHtcXG4gICAgdGhpcy5sb2FkX21vcmUgPSBuZXcgTG9hZE1vcmUoKTtcXG4gICAgdGhpcy5sb2FkX21vcmUgPSBzZXRBcnJheSh0aGlzLmxvYWRfbW9yZSwgcGFyYW1zLmxvYWRfbW9yZSk7XFxuICB9XFxuXFxuICA7XFxuXFxuICBpZiAocGFyYW1zLmZhY2V0dGUpIHtcXG4gICAgdGhpcy5mYWNldHRlID0gbmV3IEZhY2V0dGUoKTtcXG4gICAgdGhpcy5mYWNldHRlID0gc2V0QXJyYXkodGhpcy5mYWNldHRlLCBwYXJhbXMuZmFjZXR0ZSk7XFxuICB9XFxuXFxuICByZXR1cm4gdGhpcztcXG59O1xcblxcbkZpbHRlci5wcm90b3R5cGUuc2V0SW5wdXRzID0gZnVuY3Rpb24gKGlucHV0cykge1xcbiAgLy8gLS0tIHNldCBpbnB1dHMgLS0tIC8vXFxuICAvLyBmb3IgKGNvbnN0IGtleSBpbiBpbnB1dHMpIHtcXG4gIC8vICAgICBpZiAoaW5wdXRzW2tleV0pICAgICAgdGhpcy5nZXQoaW5wdXRzLCBrZXksIGNhcGl0YWxpemUoa2V5KSlcXG4gIC8vIH1cXG4gIGlmIChpbnB1dHMuc2VsZWN0KSB7XFxuICAgIHRoaXMuZ2V0KGlucHV0cy5zZWxlY3QsIFwic2VsZWN0XCIsIFNlbGVjdCk7XFxuICB9XFxuXFxuICBpZiAoaW5wdXRzLnNlYXJjaCkge1xcbiAgICB0aGlzLmdldChpbnB1dHMuc2VhcmNoLCBcInNlYXJjaFwiLCBTZWFyY2gpO1xcbiAgfVxcblxcbiAgaWYgKGlucHV0cy5jaGVja2JveCkge1xcbiAgICB0aGlzLmdldChpbnB1dHMuY2hlY2tib3gsIFwiY2hlY2tib3hcIiwgQ2hlY2tib3gpO1xcbiAgfVxcblxcbiAgaWYgKGlucHV0cy5yYWRpbykge1xcbiAgICB0aGlzLmdldChpbnB1dHMucmFkaW8sIFwicmFkaW9cIiwgUmFkaW8pO1xcbiAgfVxcblxcbiAgaWYgKGlucHV0cy5yYW5nZSkge1xcbiAgICB0aGlzLmdldChpbnB1dHMucmFuZ2UsIFwicmFuZ2VcIiwgUmFuZ2UpO1xcbiAgfVxcblxcbiAgcmV0dXJuIHRoaXM7XFxufTtcXG5cXG5GaWx0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChhcnJheSwgdmFsLCBmY3QpIHtcXG4gIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICB0aGlzLmlucHV0c1t2YWxdID0gW107XFxuICB2YXIgX2EgPSBhcnJheTtcXG5cXG4gIHZhciBfZiA9IGZ1bmN0aW9uIF9mKGVsLCBpbmRleCkge1xcbiAgICB2YXIgb2JqID0gbmV3IGZjdCgpO1xcblxcbiAgICBpZiAodmFsID09PSBcInJhbmdlXCIgJiYgZWwubXVsdGlwbGUpIHtcXG4gICAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbbmFtZT1cXFxcXCJcIi5jb25jYXQoZWwubWluLm5hbWUsIFwiXFxcXFwiXVwiKSkgJiYgIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbbmFtZT1cXFxcXCJcIi5jb25jYXQoZWwubWF4Lm5hbWUsIFwiXFxcXFwiXVwiKSkpIHtcXG4gICAgICAgIGRlbGV0ZSBhcnJheVtpbmRleF07XFxuICAgICAgICByZXR1cm47XFxuICAgICAgfSAvLyBlbHNlIHsgdGhpcy5mYWNldHRlLmZhY2V0dGVzW2VsLm1pbi5uYW1lXSA9IHtjb21wYXJlOiBlbC5jb21wYXJlfTsgdGhpcy5mYWNldHRlLmZhY2V0dGVzW2VsLm1heC5uYW1lXSA9IHtjb21wYXJlOiBlbC5jb21wYXJlfSB9XFxuXFxuICAgIH0gZWxzZSBpZiAodmFsID09PSBcInJhbmdlXCIgJiYgIWVsLm11bHRpcGxlICYmICFlbC5uYW1lKSB7XFxuICAgICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiW25hbWU9XFxcXFwiXCIuY29uY2F0KGVsLm1pbi5uYW1lLCBcIlxcXFxcIl1cIikpKSB7XFxuICAgICAgICBkZWxldGUgYXJyYXlbaW5kZXhdO1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH0gLy8gZWxzZSB0aGlzLmZhY2V0dGUuZmFjZXR0ZXNbZWwubWluLm5hbWVdID0ge2NvbXBhcmU6IGVsLmNvbXBhcmV9O1xcblxcbiAgICB9IGVsc2Uge1xcbiAgICAgIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIltuYW1lPVxcXFxcIlwiLmNvbmNhdChlbC5uYW1lLCBcIlxcXFxcIl1cIikpKSB7XFxuICAgICAgICBkZWxldGUgYXJyYXlbaW5kZXhdO1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH0gLy8gZWxzZSB0aGlzLmZhY2V0dGUuZmFjZXR0ZXNbZWwubmFtZV0gPSB7Y29tcGFyZTogZWwuY29tcGFyZX07XFxuXFxuICAgIH1cXG5cXG4gICAgdmFyIGVscyA9IGVsLnVybF9uYW1lID8gZWwudXJsX25hbWUgOiBlbC5uYW1lO1xcblxcbiAgICBpZiAoX3RoaXMudXJsICYmIGxvY2F0aW9uLmhhc2ggJiYgX3RoaXMudXJsLnBhcmFtc1tlbHNdKSB7XFxuICAgICAgaWYgKF90aGlzLnVybC5wYXJhbXNbZWxzXS5pbmRleE9mKFxcJyxcXCcpKSB7XFxuICAgICAgICBfdGhpcy51cmwucGFyYW1zW2Vsc10gPSBfdGhpcy51cmwucGFyYW1zW2Vsc10uc3BsaXQoXFwnLFxcJyk7XFxuICAgICAgfVxcblxcbiAgICAgIGlmIChlbC5pZCA9PT0gdHJ1ZSkge1xcbiAgICAgICAgdmFyIF9hMiA9IF90aGlzLnVybC5wYXJhbXNbZWxzXTtcXG5cXG4gICAgICAgIHZhciBfZjIgPSBmdW5jdGlvbiBfZjIoaW5wdXQpIHtcXG4gICAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjXCIuY29uY2F0KGlucHV0KSkudmFsdWU7XFxuICAgICAgICB9O1xcblxcbiAgICAgICAgdmFyIF9yMiA9IFtdO1xcblxcbiAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgX2EyLmxlbmd0aDsgX2kyKyspIHtcXG4gICAgICAgICAgX3IyLnB1c2goX2YyKF9hMltfaTJdLCBfaTIsIF9hMikpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgZWwudmFsdWUgPSBfcjI7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIGVsLnZhbHVlID0gX3RoaXMudXJsLnBhcmFtc1tlbHNdO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICBpZiAodmFsID09PSBcInJhbmdlXCIpIHtcXG4gICAgICBfdGhpcy5pbnB1dHNbdmFsXS5wdXNoKHNldEFycmF5UmFuZ2Uob2JqLCBlbCwgX3RoaXMuZm9ybU9iaikpO1xcbiAgICB9IGVsc2UgX3RoaXMuaW5wdXRzW3ZhbF0ucHVzaChzZXRBcnJheShvYmosIGVsKSk7XFxuXFxuICAgIGlmIChlbC52YWx1ZSkge1xcbiAgICAgIG9iai5jcmVhdGUoX3RoaXMsIGVsLnZhbHVlKTtcXG4gICAgfVxcbiAgfTtcXG5cXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcXG4gICAgX2YoX2FbX2ldLCBfaSwgX2EpO1xcbiAgfVxcblxcbiAgdW5kZWZpbmVkO1xcbn07Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5emNtTXZSbWxzZEdWeUwwTnZjbVV2Um1sc2RHVnlMbXB6TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2UVVKREx5NHZjM0pqTDBacGJIUmxjaTlEYjNKbEwwWnBiSFJsY2k1cWN6OHhNamMySWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUI3SUhObGRFRnljbUY1TENCelpYUkJjbkpoZVZKaGJtZGxJSDBnSUQwZ2NtVnhkV2x5WlNBb0p5NHVMeTR1TDBobGJIQmxjbk12UVhKeVlYa25JQ2s3WEc1Y2JseHVkbUZ5SUVOb1pXTnJZbTk0SUQwZ2NtVnhkV2x5WlNnZ0p5NHVMMGx1Y0hWMGN5OURhR1ZqYTJKdmVDY2dLVHRjYm5aaGNpQlNZV1JwYnlBOUlISmxjWFZwY21Vb0lDY3VMaTlKYm5CMWRITXZVbUZrYVc4bklDazdYRzUyWVhJZ1VtRnVaMlVnUFNCeVpYRjFhWEpsS0NBbkxpNHZTVzV3ZFhSekwxSmhibWRsSnlBcE8xeHVkbUZ5SUZObGJHVmpkQ0E5SUhKbGNYVnBjbVVvSUNjdUxpOUpibkIxZEhNdlUyVnNaV04wSnlBcE8xeHVkbUZ5SUZObFlYSmphQ0E5SUhKbGNYVnBjbVVvSUNjdUxpOUpibkIxZEhNdlUyVmhjbU5vSnlBcE8xeHVYRzUyWVhJZ1ZYSnNJRDBnY21WeGRXbHlaU0FvSUNjdUwxVnliQ2NnS1R0Y2JseHVkbUZ5SUV4dllXUk5iM0psSUQwZ2NtVnhkV2x5WlNBb0lDY3VMaTlQY0hScGIyNXpMMHh2WVdSTmIzSmxKeUFwTzF4dWRtRnlJRVpoWTJWMGRHVWdQU0J5WlhGMWFYSmxJQ2dnSnk0dUwwOXdkR2x2Ym5NdlJtRmpaWFIwWlNjZ0tUdGNibHh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNnZ2NHRnlZVzF6SUNrZ1BUNGdleUJ5WlhSMWNtNGdibVYzSUVacGJIUmxjaWdnY0dGeVlXMXpJQ2tnZlZ4dVhHNW1kVzVqZEdsdmJpQkdhV3gwWlhJb2NHRnlZVzF6S1h0Y2JseHVJQ0FnSUhSb2FYTXViM0IwYVc5dWN5QTlJSHRjYmlBZ0lDQWdJSFZ5YkNBNklIQmhjbUZ0Y3k1MWNtd2dQeUJ3WVhKaGJYTXVkWEpzSURvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0JqY21WaGRHVmZkWEpzSURvZ2NHRnlZVzF6TG1OeVpXRjBaVjkxY213Z1B5QndZWEpoYlhNdVkzSmxZWFJsWDNWeWJDQTZJR1poYkhObExGeHVJQ0FnSUgwN1hHNWNiaUFnSUNCMGFHbHpMblZ5YkNBOUlIQmhjbUZ0Y3k1amNtVmhkR1ZmZFhKc0lIeDhJSEJoY21GdGN5NW1iM0p0TG1GamRHbHZiaUE5UFQwZ0ozSmxaR2x5WldOMEp5QS9JRzVsZHlCVmNtd29LU0E2SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WkdWaWRXY2dQU0J3WVhKaGJYTXVaR1ZpZFdjZ1B5QndZWEpoYlhNdVpHVmlkV2NnT2lCbVlXeHpaVHRjYmlBZ0lDQjBhR2x6TG1SaGRHRnpJRDBnVzEwN1hHNGdJQ0FnZEdocGN5NXlaWE4xYkhSeklEMGdlMXh1SUNBZ0lDQWdkR0Z5WjJWME9pQWdJQ0FnSUNBZ0lDQWdabUZzYzJVc1hHNGdJQ0FnSUNCaFkzUnBiMjQ2SUNBZ0lDQWdJQ0FnSUNCbVlXeHpaU3hjYmlBZ0lDQWdJR2xrSUNBZ0lEb2dJQ0FnSUNBZ0lDQWdJQ2RwWkNjc1hHNGdJQ0FnSUNCd1lYUm9JQ0FnSURvZ0lDQWdJQ0FnSUNBbkp5eGNiaUFnSUNBZ0lIQnlaV1pwZUNBZ0lDQWdJQ0E2SUNBZ0lDY25MRnh1SUNBZ0lDQWdkbWx6YVdKc1pWOWpiR0Z6Y3pvZ0lDQWdabUZzYzJVc1hHNGdJQ0FnSUNCb2FXUmtaVzVmWTJ4aGMzTWdPaUFnSUNCbVlXeHpaU3hjYmlBZ0lDQWdJR0psWm05eVpWOXphRzkzSUNBNklDQWdJR1poYkhObExGeHVJQ0FnSUNBZ1ltVm1iM0psWDJocFpHVWdJRG9nSUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0IwWlcxd2JHRjBaU0FnSUNBZ09pQWdJQ0JtWVd4elpTeGNiaUFnSUNBZ0lHTnZiblJoYVc1bGNpQWdJQ0E2SUNBZ0lGd2lYQ0lzWEc0Z0lDQWdJQ0J2YmxOMFlYSjBJRG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQnZia052YlhCc1pYUmxJRG9nWm1Gc2MyVmNiaUFnSUNCOU8xeHVYRzRnSUNBZ2RHaHBjeTV1WWw5eVpYTjFiSFJ6SUQwZ2UxeHVJQ0FnSUNBZ0lDQjBZWEpuWlhRNklDY25MRnh1SUNBZ0lDQWdJQ0J1YjE5eVpYTjFiSFJ6T2lBbkp5eGNiaUFnSUNBZ0lDQWdjMmx1WjNWc1lYSTZJQ2NuTEZ4dUlDQWdJQ0FnSUNCd2JIVnlZV3c2SUNjblhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NW1iM0p0SUQwZ2UxeHVJQ0FnSUNBZ0lDQjBZWEpuWlhRNklDY25MRnh1SUNBZ0lDQWdJQ0JoWTNScGIyNDZJQ2NuTEZ4dUlDQWdJQ0FnSUNCMFlYSm5aWFE2SUNjbkxGeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxtWmhZMlYwZEdVZ1BTQm1ZV3h6WlZ4dVhHNGdJQ0FnZEdocGN5NXNiMkZrWDIxdmNtVWdQU0JtWVd4elpUdGNibHh1SUNBZ0lGeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVYRzU5TzF4dVhHNUdhV3gwWlhJdWNISnZkRzkwZVhCbExtTnZibk4wY25WamRDQTlJR1oxYm1OMGFXOXVLSEJoY21GdGN5bDdYRzRnSUNBZ2RHaHBjeTVwYm5CMWRITWdQU0I3ZlR0Y2JseHVJQ0FnSUdsbUlDaHdZWEpoYlhNdWNtVnpkV3gwY3lrZ2RHaHBjeTV5WlhOMWJIUnpJRDBnYzJWMFFYSnlZWGtvZEdocGN5NXlaWE4xYkhSekxDQndZWEpoYlhNdWNtVnpkV3gwY3lrN1hHNGdJQ0FnYVdZZ0tIQmhjbUZ0Y3k1dVlsOXlaWE4xYkhSektTQjBhR2x6TG01aVgzSmxjM1ZzZEhNZ1BTQnpaWFJCY25KaGVTaDBhR2x6TG01aVgzSmxjM1ZzZEhNc0lIQmhjbUZ0Y3k1dVlsOXlaWE4xYkhSektUdGNiaUFnSUNCcFppQW9jR0Z5WVcxekxtWnZjbTBwSUhSb2FYTXVabTl5YlNBOUlITmxkRUZ5Y21GNUtIUm9hWE11Wm05eWJTd2djR0Z5WVcxekxtWnZjbTBwTzF4dUlDQWdJR2xtSUNod1lYSmhiWE11Ykc5aFpGOXRiM0psS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ykc5aFpGOXRiM0psSUQwZ2JtVjNJRXh2WVdSTmIzSmxLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViRzloWkY5dGIzSmxJRDBnYzJWMFFYSnlZWGtvZEdocGN5NXNiMkZrWDIxdmNtVXNJSEJoY21GdGN5NXNiMkZrWDIxdmNtVXBYRzRnSUNBZ2ZUdGNiaUFnSUNCcFppaHdZWEpoYlhNdVptRmpaWFIwWlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1aaFkyVjBkR1VnUFNCdVpYY2dSbUZqWlhSMFpTZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtWmhZMlYwZEdVZ1BTQnpaWFJCY25KaGVTaDBhR2x6TG1aaFkyVjBkR1VzSUhCaGNtRnRjeTVtWVdObGRIUmxLVnh1SUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JseHVmU0JjYmx4dVJtbHNkR1Z5TG5CeWIzUnZkSGx3WlM1elpYUkpibkIxZEhNZ1BTQm1kVzVqZEdsdmJpZ2dhVzV3ZFhSeklDa2dlMXh1WEc0Z0lDQWdMeThnTFMwdElITmxkQ0JwYm5CMWRITWdMUzB0SUM4dlhHNGdJQ0FnTHk4Z1ptOXlJQ2hqYjI1emRDQnJaWGtnYVc0Z2FXNXdkWFJ6S1NCN1hHNGdJQ0FnTHk4Z0lDQWdJR2xtSUNocGJuQjFkSE5iYTJWNVhTa2dJQ0FnSUNCMGFHbHpMbWRsZENocGJuQjFkSE1zSUd0bGVTd2dZMkZ3YVhSaGJHbDZaU2hyWlhrcEtWeHVJQ0FnSUM4dklIMWNiaUFnSUNCY2JpQWdJQ0JwWmlBb2FXNXdkWFJ6TG5ObGJHVmpkQ2tnSUNBZ0lDQjBhR2x6TG1kbGRDaHBibkIxZEhNdWMyVnNaV04wTENCY0luTmxiR1ZqZEZ3aUxDQlRaV3hsWTNRcFhHNGdJQ0FnYVdZZ0tHbHVjSFYwY3k1elpXRnlZMmdwSUNBZ0lDQWdkR2hwY3k1blpYUW9hVzV3ZFhSekxuTmxZWEpqYUN3Z1hDSnpaV0Z5WTJoY0lpd2dVMlZoY21Ob0tWeHVJQ0FnSUdsbUlDaHBibkIxZEhNdVkyaGxZMnRpYjNncElDQWdJSFJvYVhNdVoyVjBLR2x1Y0hWMGN5NWphR1ZqYTJKdmVDd2dYQ0pqYUdWamEySnZlRndpTENCRGFHVmphMkp2ZUNsY2JpQWdJQ0JwWmlBb2FXNXdkWFJ6TG5KaFpHbHZLU0FnSUNBZ0lDQjBhR2x6TG1kbGRDaHBibkIxZEhNdWNtRmthVzhzSUZ3aWNtRmthVzljSWl3Z1VtRmthVzhwWEc0Z0lDQWdhV1lnS0dsdWNIVjBjeTV5WVc1blpTa2dJQ0FnSUNBZ2RHaHBjeTVuWlhRb2FXNXdkWFJ6TG5KaGJtZGxMQ0JjSW5KaGJtZGxYQ0lzSUZKaGJtZGxLVnh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc1OVhHNWNia1pwYkhSbGNpNXdjbTkwYjNSNWNHVXVaMlYwSUQwZ1puVnVZM1JwYjI0b1lYSnlZWGtzSUhaaGJDd2dabU4wSUNrZ2UxeHVJQ0FnSUhSb2FYTXVhVzV3ZFhSelczWmhiRjBnUFNCYlhUdGNibHh1SUNBZ0lHRnljbUY1TG1admNrVmhZMmdvSUNobGJDd2dhVzVrWlhncFBUNGdlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2IySnFJRDBnYm1WM0lHWmpkQ2dwTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2FXWW9kbUZzSUQwOVBTQmNJbkpoYm1kbFhDSWdKaVlnWld3dWJYVnNkR2x3YkdVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb0lXUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvWUZ0dVlXMWxQVndpSkh0bGJDNXRhVzR1Ym1GdFpYMWNJbDFnS1NBbUppQWhaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loZ1cyNWhiV1U5WENJa2UyVnNMbTFoZUM1dVlXMWxmVndpWFdBcEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ1lYSnlZWGxiYVc1a1pYaGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWld4elpTQjdJSFJvYVhNdVptRmpaWFIwWlM1bVlXTmxkSFJsYzF0bGJDNXRhVzR1Ym1GdFpWMGdQU0I3WTI5dGNHRnlaVG9nWld3dVkyOXRjR0Z5WlgwN0lIUm9hWE11Wm1GalpYUjBaUzVtWVdObGRIUmxjMXRsYkM1dFlYZ3VibUZ0WlYwZ1BTQjdZMjl0Y0dGeVpUb2daV3d1WTI5dGNHRnlaWDBnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIWmhiQ0E5UFQwZ1hDSnlZVzVuWlZ3aUlDWW1JQ0ZsYkM1dGRXeDBhWEJzWlNBbUppQWhaV3d1Ym1GdFpTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppZ2haRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2loZ1cyNWhiV1U5WENJa2UyVnNMbTFwYmk1dVlXMWxmVndpWFdBcElDbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElHRnljbUY1VzJsdVpHVjRYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdWc2MyVWdkR2hwY3k1bVlXTmxkSFJsTG1aaFkyVjBkR1Z6VzJWc0xtMXBiaTV1WVcxbFhTQTlJSHRqYjIxd1lYSmxPaUJsYkM1amIyMXdZWEpsZlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvSVdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9ZRnR1WVcxbFBWd2lKSHRsYkM1dVlXMWxmVndpWFdBcEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ1lYSnlZWGxiYVc1a1pYaGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWld4elpTQjBhR2x6TG1aaFkyVjBkR1V1Wm1GalpYUjBaWE5iWld3dWJtRnRaVjBnUFNCN1kyOXRjR0Z5WlRvZ1pXd3VZMjl0Y0dGeVpYMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1ZzY3lBOUlHVnNMblZ5YkY5dVlXMWxJRDhnWld3dWRYSnNYMjVoYldVZ09pQmxiQzV1WVcxbE8xeHVYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0JwWmloMGFHbHpMblZ5YkNBbUppQnNiMk5oZEdsdmJpNW9ZWE5vSUNZbUlIUm9hWE11ZFhKc0xuQmhjbUZ0YzF0bGJITmRJQ2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWdnZEdocGN5NTFjbXd1Y0dGeVlXMXpXMlZzYzEwdWFXNWtaWGhQWmlnbkxDY3BJQ2tnZEdocGN5NTFjbXd1Y0dGeVlXMXpXMlZzYzEwZ1BTQjBhR2x6TG5WeWJDNXdZWEpoYlhOYlpXeHpYUzV6Y0d4cGRDZ25MQ2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWc0xtbGtJRDA5UFNCMGNuVmxLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJDNTJZV3gxWlNBOUlIUm9hWE11ZFhKc0xuQmhjbUZ0YzF0bGJITmRMbTFoY0NnZ2FXNXdkWFFnUFQ0Z1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWhnSXlSN2FXNXdkWFI5WUNrdWRtRnNkV1VnS1Z4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc0xuWmhiSFZsSUQwZ2RHaHBjeTUxY213dWNHRnlZVzF6VzJWc2MxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUtIWmhiQ0E5UFQwZ1hDSnlZVzVuWlZ3aUtTQjBhR2x6TG1sdWNIVjBjMXQyWVd4ZExuQjFjMmdvSUhObGRFRnljbUY1VW1GdVoyVW9JRzlpYWl3Z1pXd3NJSFJvYVhNdVptOXliVTlpYWlBcElDbGNiaUFnSUNBZ0lDQWdaV3h6WlNCMGFHbHpMbWx1Y0hWMGMxdDJZV3hkTG5CMWMyZ29JSE5sZEVGeWNtRjVLQ0J2WW1vc0lHVnNJQ2tnS1Z4dVhHNGdJQ0FnSUNBZ0lHbG1LR1ZzTG5aaGJIVmxLU0J2WW1vdVkzSmxZWFJsS0hSb2FYTXNJR1ZzTG5aaGJIVmxLVHRjYmlBZ0lDQjlLVnh1ZlZ4dUlsMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkZRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUmtFN1FVRkxRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCWWtFN1FVRm5Ra0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVcEJPMEZCVDBFN1FVRkRRVHRCUVVOQk8wRkJSa0U3UVVGTFFUdEJRVVZCTzBGQlIwRTdRVUZGUVR0QlFVTkJPMEZCUkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRVFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkVRVHRCUVVOQk8wRkJSRUU3UVVGSlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUkVFN1FVRkZRVHRCUVVGQk8wRkJRMEU3UVVGSVFUdEJRVU5CTzBGQlJFRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJSVUU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVWQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZzUkVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRlFUdEJRU3REUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9GaWx0ZXIvQ29yZS9GaWx0ZXIuanNcXG4nKX0sXCIuL3NyYy9GaWx0ZXIvQ29yZS9VcmwuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0ZpbHRlci9Db3JlL1VybC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7ZXZhbChcIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xcbiAgcmV0dXJuIG5ldyBVcmwoKTtcXG59O1xcblxcbmZ1bmN0aW9uIFVybCgpIHtcXG4gIHRoaXMuc2VhcmNoID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xcblxcbiAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcXG4gICAgdGhpcy5wYXJhbXMgPSB0aGlzLmRpc2NvbnN0cnVjdCgpO1xcbiAgfVxcbn1cXG5cXG47XFxuXFxuVXJsLnByb3RvdHlwZS5jb25zdHJ1Y3QgPSBmdW5jdGlvbiAobGFiZWwpIHtcXG4gIHZhciBuYW1lID0gbGFiZWwudXJsX25hbWUgPyBsYWJlbC51cmxfbmFtZSA6IGxhYmVsLm5hbWU7XFxuICB2YXIgdmFsdWUgPSBsYWJlbC5uYW1lcyAmJiBsYWJlbC5pZCAmJiBsYWJlbC5uYW1lc1swXSAhPSBcXFwiXFxcIiA/IGxhYmVsLm5hbWVzIDogbGFiZWwudmFsdWU7XFxuICB2YWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XFxuXFxuICBpZiAodmFsdWUubGVuZ3RoICE9PSAwICYmIHRoaXMuc2VhcmNoKSB7XFxuICAgIHRoaXMuc2VhcmNoLnNldChuYW1lLCB2YWx1ZSk7XFxuICB9XFxuXFxuICBpZiAodmFsdWUubGVuZ3RoID09PSAwICYmIHRoaXMuc2VhcmNoIHx8IHZhbHVlLmxlbmd0aCA9PT0gMSAmJiB2YWx1ZVswXSA9PT0gXFxcIlxcXCIgJiYgdGhpcy5zZWFyY2gpIHtcXG4gICAgdGhpcy5zZWFyY2guZGVsZXRlKG5hbWUpO1xcbiAgfVxcbn07XFxuXFxuVXJsLnByb3RvdHlwZS5jb25zdHJ1Y3RSYW5nZSA9IGZ1bmN0aW9uIChsYWJlbCkge1xcbiAgdmFyIG5hbWUgPSBsYWJlbC51cmxfbmFtZSA/IGxhYmVsLnVybF9uYW1lIDogbGFiZWwubmFtZTtcXG4gIHZhciBtaW5WYWx1ZSA9IGxhYmVsLm1pbi52YWx1ZTtcXG4gIHZhciBtYXhWYWx1ZSA9IGxhYmVsLm1heC52YWx1ZTtcXG4gIHZhciB2YWx1ZSA9IG1pblZhbHVlICYmIG1heFZhbHVlID8gXFxcIlxcXCIuY29uY2F0KG1pblZhbHVlLCBcXFwiLVxcXCIpLmNvbmNhdChtYXhWYWx1ZSkgOiBtaW5WYWx1ZTtcXG5cXG4gIGlmIChtaW5WYWx1ZSAhPT0gbGFiZWwubWluLm1pbiB8fCBtYXhWYWx1ZSAhPT0gbGFiZWwubWF4Lm1heCAmJiB0aGlzLnNlYXJjaCkge1xcbiAgICB0aGlzLnNlYXJjaC5zZXQobmFtZSwgdmFsdWUpO1xcbiAgfVxcblxcbiAgaWYgKG1pblZhbHVlID09PSBsYWJlbC5taW4ubWluICYmIHRoaXMuc2VhcmNoICYmICFsYWJlbC5tdWx0aXBsZSB8fCBtaW5WYWx1ZSA9PT0gbGFiZWwubWluLm1pbiAmJiBtYXhWYWx1ZSA9PT0gbGFiZWwubWF4Lm1heCAmJiB0aGlzLnNlYXJjaCAmJiBsYWJlbC5tdWx0aXBsZSkge1xcbiAgICB0aGlzLnNlYXJjaC5kZWxldGUobmFtZSk7XFxuICB9XFxufTtcXG5cXG5VcmwucHJvdG90eXBlLmRpc2NvbnN0cnVjdCA9IGZ1bmN0aW9uICgpIHtcXG4gIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICB2YXIgcGFyYW1zID0gW107XFxuICB2YXIgaGFzaCA9IGxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcXG4gIHZhciBoYXNoQXJyYXkgPSBoYXNoLnNwbGl0KCcmJyk7XFxuICB2YXIgX2EgPSBoYXNoQXJyYXk7XFxuXFxuICB2YXIgX2YgPSBmdW5jdGlvbiBfZihoKSB7XFxuICAgIGggPSBoLnNwbGl0KCc9Jyk7XFxuICAgIHBhcmFtc1toWzBdXSA9IGRlY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQoaFsxXSkpO1xcblxcbiAgICBfdGhpcy5zZWFyY2guc2V0KGhbMF0sIGRlY29kZVVSSUNvbXBvbmVudChoWzFdKSk7XFxuICB9O1xcblxcbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xcbiAgICBfZihfYVtfaV0sIF9pLCBfYSk7XFxuICB9XFxuXFxuICB1bmRlZmluZWQ7XFxuICByZXR1cm4gcGFyYW1zO1xcbn07Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5emNtTXZSbWxzZEdWeUwwTnZjbVV2VlhKc0xtcHpMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZRVUpETHk0dmMzSmpMMFpwYkhSbGNpOURiM0psTDFWeWJDNXFjejgyWlRNMklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdLQ2tnUFQ0Z2V5QnlaWFIxY200Z2JtVjNJRlZ5YkNncElIMWNibVoxYm1OMGFXOXVJRlZ5YkNncGUxeHVJQ0IwYUdsekxuTmxZWEpqYUNBOUlHNWxkeUJWVWt4VFpXRnlZMmhRWVhKaGJYTW9LVHRjYmlBZ2FXWW9iRzlqWVhScGIyNHVhR0Z6YUNrZ2RHaHBjeTV3WVhKaGJYTWdQU0IwYUdsekxtUnBjMk52Ym5OMGNuVmpkQ2dwWEc1OU8xeHVYRzVWY213dWNISnZkRzkwZVhCbExtTnZibk4wY25WamRDQTlJR1oxYm1OMGFXOXVLR3hoWW1Wc0tYdGNiaUFnYkdWMElHNWhiV1VnUFNCc1lXSmxiQzUxY214ZmJtRnRaU0EvSUd4aFltVnNMblZ5YkY5dVlXMWxJRG9nYkdGaVpXd3VibUZ0WlZ4dVhHNGdJR3hsZENCMllXeDFaU0E5SUd4aFltVnNMbTVoYldWeklDWW1JR3hoWW1Wc0xtbGtJQ1ltSUd4aFltVnNMbTVoYldWeld6QmRJQ0U5SUZ3aVhDSWdQeUJzWVdKbGJDNXVZVzFsY3lBNklHeGhZbVZzTG5aaGJIVmxYRzRnSUhaaGJIVmxJRDBnWlc1amIyUmxWVkpKUTI5dGNHOXVaVzUwS0haaGJIVmxLVnh1SUNCY2JpQWdYRzRnSUdsbUlDaDJZV3gxWlM1c1pXNW5kR2dnSVQwOUlEQWdKaVlnZEdocGN5NXpaV0Z5WTJncElIUm9hWE11YzJWaGNtTm9Mbk5sZENodVlXMWxMQ0IyWVd4MVpTazdYRzRnSUdsbUlDaDJZV3gxWlM1c1pXNW5kR2dnUFQwOUlEQWdKaVlnZEdocGN5NXpaV0Z5WTJnZ2ZId2dkbUZzZFdVdWJHVnVaM1JvSUQwOVBTQXhJQ1ltSUhaaGJIVmxXekJkSUQwOVBTQmNJbHdpSUNZbUlIUm9hWE11YzJWaGNtTm9LU0IwYUdsekxuTmxZWEpqYUM1a1pXeGxkR1VvYm1GdFpTazdYRzVjYm4xY2JseHVWWEpzTG5CeWIzUnZkSGx3WlM1amIyNXpkSEoxWTNSU1lXNW5aU0E5SUdaMWJtTjBhVzl1S0d4aFltVnNLWHRjYmlBZ2JHVjBJRzVoYldVZ1BTQnNZV0psYkM1MWNteGZibUZ0WlNBL0lHeGhZbVZzTG5WeWJGOXVZVzFsSURvZ2JHRmlaV3d1Ym1GdFpWeHVJQ0JjYmlBZ2JHVjBJRzFwYmxaaGJIVmxJRDBnYkdGaVpXd3ViV2x1TG5aaGJIVmxYRzRnSUd4bGRDQnRZWGhXWVd4MVpTQTlJR3hoWW1Wc0xtMWhlQzUyWVd4MVpWeHVYRzRnSUd4bGRDQjJZV3gxWlNBOUlHMXBibFpoYkhWbElDWW1JRzFoZUZaaGJIVmxJRDhnWUNSN2JXbHVWbUZzZFdWOUxTUjdiV0Y0Vm1Gc2RXVjlZQ0E2SUcxcGJsWmhiSFZsWEc1Y2JpQWdhV1lnS0cxcGJsWmhiSFZsSUNFOVBTQnNZV0psYkM1dGFXNHViV2x1SUh4OElHMWhlRlpoYkhWbElDRTlQU0JzWVdKbGJDNXRZWGd1YldGNElDWW1JSFJvYVhNdWMyVmhjbU5vS1NCMGFHbHpMbk5sWVhKamFDNXpaWFFvYm1GdFpTd2dkbUZzZFdVcE8xeHVJQ0JwWmlBb2JXbHVWbUZzZFdVZ1BUMDlJR3hoWW1Wc0xtMXBiaTV0YVc0Z0ppWWdkR2hwY3k1elpXRnlZMmdnSmlZZ0lXeGhZbVZzTG0xMWJIUnBjR3hsSUh4OElHMXBibFpoYkhWbElEMDlQU0JzWVdKbGJDNXRhVzR1YldsdUlDWW1JRzFoZUZaaGJIVmxJRDA5UFNCc1lXSmxiQzV0WVhndWJXRjRJQ1ltSUhSb2FYTXVjMlZoY21Ob0lDWW1JR3hoWW1Wc0xtMTFiSFJwY0d4bEtTQjBhR2x6TG5ObFlYSmphQzVrWld4bGRHVW9ibUZ0WlNrN1hHNWNibjFjYmx4dVZYSnNMbkJ5YjNSdmRIbHdaUzVrYVhOamIyNXpkSEoxWTNRZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ1kyOXVjM1FnY0dGeVlXMXpJRDBnVzEwN1hHNGdJR052Ym5OMElHaGhjMmdnUFNCc2IyTmhkR2x2Ymk1b1lYTm9MbkpsY0d4aFkyVW9KeU1uTENBbkp5azdYRzRnSUdOdmJuTjBJR2hoYzJoQmNuSmhlU0E5SUdoaGMyZ3VjM0JzYVhRb0p5WW5LVHRjYmx4dUlDQm9ZWE5vUVhKeVlYa3VabTl5UldGamFDZ2dhQ0E5UGlCN1hHNGdJQ0FnYUNBOUlHZ3VjM0JzYVhRb0p6MG5LVnh1SUNBZ0lIQmhjbUZ0YzFzZ2FGc3dYU0JkSUQwZ1pHVmpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtHUmxZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaG9XekZkS1NrN1hHNGdJQ0FnZEdocGN5NXpaV0Z5WTJndWMyVjBLR2hiTUYwc0lHUmxZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaG9XekZkS1NsY2JpQWdmU2xjYmlBZ2NtVjBkWEp1SUhCaGNtRnRjenRjYm4xY2JseHVJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVWhCTzBGQlEwRTdRVUZFUVR0QlFVMUJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVlpCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCU1VFN1FVRkxRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9GaWx0ZXIvQ29yZS9VcmwuanNcXG5cIil9LFwiLi9zcmMvRmlsdGVyL0lucHV0cy9DaGVja2JveC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0ZpbHRlci9JbnB1dHMvQ2hlY2tib3guanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2V2YWwoJ2Z1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxcblxcbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XFxuXFxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgeyByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfSB9XFxuXFxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfVxcblxcbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XFxuXFxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vSGVscGVycy9BcnJheSAqLyBcIi4vc3JjL0hlbHBlcnMvQXJyYXkuanNcIiksXFxuICAgIGluQXJyYXkgPSBfcmVxdWlyZS5pbkFycmF5O1xcblxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xcbiAgcmV0dXJuIG5ldyBDaGVja2JveCgpO1xcbn07XFxuXFxuZnVuY3Rpb24gQ2hlY2tib3goZCkge1xcbiAgdGhpcy5uYW1lID0gZmFsc2U7XFxuICB0aGlzLmNvbXBhcmUgPSBmYWxzZTtcXG4gIHRoaXMudXJsX25hbWUgPSBmYWxzZTtcXG4gIHRoaXMub3BlcmF0b3IgPSBcIm9yXCI7XFxuICB0aGlzLnZhbHVlID0gW107XFxuICB0aGlzLmlkID0gZmFsc2U7XFxufVxcblxcbkNoZWNrYm94LnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XFxuICB2YXIgX3RoaXMgPSB0aGlzO1xcblxcbiAgdmFyIHRvVmFsaWRhdGU7XFxuICBkYXRhLmlucHV0cyA9IFtdO1xcblxcbiAgaWYgKHRoaXMudmFsdWUubGVuZ3RoID09PSAwKSB7XFxuICAgIHJldHVybiB0cnVlO1xcbiAgfVxcblxcbiAgaWYgKF90eXBlb2YodGhpcy5jb21wYXJlKSA9PT0gXCJvYmplY3RcIikge1xcbiAgICB0b1ZhbGlkYXRlID0gW107XFxuICAgIHZhciBfYSA9IHRoaXMuY29tcGFyZTtcXG5cXG4gICAgdmFyIF9mID0gZnVuY3Rpb24gX2YoY29tcGFyZSkge1xcbiAgICAgIHRvVmFsaWRhdGUucHVzaChpbkFycmF5KGRhdGEsIGNvbXBhcmUsIF90aGlzLnZhbHVlKSk7XFxuICAgIH07XFxuXFxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcXG4gICAgICBfZihfYVtfaV0sIF9pLCBfYSk7XFxuICAgIH1cXG5cXG4gICAgdW5kZWZpbmVkO1xcbiAgICByZXR1cm4gdGhpcy5tdWx0aUNvbXBhcmUoZGF0YSwgdG9WYWxpZGF0ZSwgdGhpcy52YWx1ZSk7XFxuICB9IGVsc2Uge1xcbiAgICByZXR1cm4gdGhpcy5zaW5nbGVDb21wYXJlKGRhdGEsIHRoaXMudmFsdWUsIHRoaXMuY29tcGFyZSk7XFxuICB9XFxufTtcXG5cXG5DaGVja2JveC5wcm90b3R5cGUubXVsdGlDb21wYXJlID0gZnVuY3Rpb24gKGRhdGEsIHRvVmFsaWRhdGUsIHZhbHVlKSB7XFxuICBpZiAodG9WYWxpZGF0ZSkge1xcbiAgICBpZiAodG9WYWxpZGF0ZVswXSAhPT0gXCJcIiAmJiB0b1ZhbGlkYXRlWzFdICE9PSBcIlwiKSB7XFxuICAgICAgaXNWYWxpZGF0ZWQgPSB2YWx1ZSA+PSB0b1ZhbGlkYXRlWzBdICYmIHZhbHVlIDw9IHRvVmFsaWRhdGVbMV07XFxuICAgIH0gZWxzZSBpZiAodG9WYWxpZGF0ZVswXSAhPT0gXCJcIiAmJiB0b1ZhbGlkYXRlWzFdID09PSBcIlwiKSB7XFxuICAgICAgaXNWYWxpZGF0ZWQgPSB2YWx1ZSA+PSB0b1ZhbGlkYXRlWzBdO1xcbiAgICB9IGVsc2UgaWYgKCF0b1ZhbGlkYXRlWzBdICYmIHRvVmFsaWRhdGVbMV0gfHwgdG9WYWxpZGF0ZVswXSA9PT0gXCJcIiAmJiB0b1ZhbGlkYXRlWzFdKSB7XFxuICAgICAgaXNWYWxpZGF0ZWQgPSB2YWx1ZSA8PSB0b1ZhbGlkYXRlWzFdO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIHJldHVybiB0cnVlO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBpc1ZhbGlkYXRlZDtcXG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XFxufTtcXG5cXG5DaGVja2JveC5wcm90b3R5cGUuc2luZ2xlQ29tcGFyZSA9IGZ1bmN0aW9uIChkYXRhLCB2YWx1ZSwgY29tcGFyZSkge1xcbiAgdmFyIGlzVmFsaWRhdGVkID0gaW5BcnJheShkYXRhLCBjb21wYXJlLCB2YWx1ZSk7XFxuXFxuICBpZiAoaXNWYWxpZGF0ZWQpIHtcXG4gICAgaXNWYWxpZGF0ZWQgPSBfdHlwZW9mKGlzVmFsaWRhdGVkKSAhPSBcXCdvYmplY3RcXCcgPyBbaXNWYWxpZGF0ZWRdIDogaXNWYWxpZGF0ZWQ7XFxuXFxuICAgIGlmICh0aGlzLm9wZXJhdG9yID09PSBcImFuZFwiKSB7XFxuICAgICAgaXNWYWxpZGF0ZWQgPSBpc1ZhbGlkYXRlZC5sZW5ndGggPT09IHZhbHVlLmxlbmd0aDtcXG4gICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkLmZpbHRlcihmdW5jdGlvbiAodikge1xcbiAgICAgICAgcmV0dXJuIHZhbHVlLmluZGV4T2YoU3RyaW5nKHYpKSA+IC0xO1xcbiAgICAgIH0pO1xcbiAgICAgIGlzVmFsaWRhdGVkID0gX3RvQ29uc3VtYWJsZUFycmF5KG5ldyBTZXQoaXNWYWxpZGF0ZWQpKTtcXG4gICAgfSBlbHNlIGlmICh0aGlzLm9wZXJhdG9yID09PSBcIm9yXCIpIHtcXG4gICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkLmZpbHRlcihmdW5jdGlvbiAodikge1xcbiAgICAgICAgcmV0dXJuIHZhbHVlLmluZGV4T2YoU3RyaW5nKHYpKSA+IC0xO1xcbiAgICAgIH0pO1xcbiAgICAgIGlzVmFsaWRhdGVkID0gX3RvQ29uc3VtYWJsZUFycmF5KG5ldyBTZXQoaXNWYWxpZGF0ZWQpKTtcXG4gICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkLmxlbmd0aCA+IDA7XFxuICAgIH0gZWxzZSBpZiAodGhpcy5vcGVyYXRvciA9PT0gXCI+XCIpIHtcXG4gICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkID4gdmFsdWVbMF07XFxuICAgIH0gZWxzZSBpZiAodGhpcy5vcGVyYXRvciA9PT0gXCI+PVwiKSB7XFxuICAgICAgaXNWYWxpZGF0ZWQgPSBpc1ZhbGlkYXRlZCA+PSB2YWx1ZVswXTtcXG4gICAgfSBlbHNlIGlmICh0aGlzLm9wZXJhdG9yID09PSBcIjw9XCIpIHtcXG4gICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkIDw9IHZhbHVlWzBdO1xcbiAgICB9IGVsc2UgaWYgKHRoaXMub3BlcmF0b3IgPT09IFwiPFwiKSB7XFxuICAgICAgaXNWYWxpZGF0ZWQgPSBpc1ZhbGlkYXRlZCA8IHZhbHVlWzBdO1xcbiAgICB9IGVsc2UgaWYgKHRoaXMub3BlcmF0b3IgPT09IFwiPVwiKSB7XFxuICAgICAgaXNWYWxpZGF0ZWQgPSBpc1ZhbGlkYXRlZCA9PT0gdmFsdWVbMF07XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIGlzVmFsaWRhdGVkO1xcbiAgfSBlbHNlIHJldHVybiBmYWxzZTtcXG59O1xcblxcbkNoZWNrYm94LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xcbiAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICB2YXIgaW5wdXRzID0gb3B0aW9ucy5lbC5mb3JtT2JqLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1cXFxcXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIlxcXFxcIl1cIikpOyAvLyBSZXR1cm4gdGhlIGNoZWNrZWQgaW5wdXRzXFxuXFxuICB2YXIgY2hlY2tlZCA9IF90b0NvbnN1bWFibGVBcnJheShpbnB1dHMpLmZpbHRlcihmdW5jdGlvbiAoaW5wdXQpIHtcXG4gICAgcmV0dXJuIGlucHV0LmNoZWNrZWQ7XFxuICB9KTsgLy8gSW5zZXJ0IHZhbHVlIGluIGluc3RhbmNlXFxuXFxuXFxuICB2YXIgX2EyID0gX3RvQ29uc3VtYWJsZUFycmF5KGNoZWNrZWQpO1xcblxcbiAgdmFyIF9mMiA9IGZ1bmN0aW9uIF9mMihpbnB1dCkge1xcbiAgICByZXR1cm4gaW5wdXQudmFsdWU7XFxuICB9O1xcblxcbiAgdmFyIF9yMiA9IFtdO1xcblxcbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgX2EyLmxlbmd0aDsgX2kyKyspIHtcXG4gICAgX3IyLnB1c2goX2YyKF9hMltfaTJdLCBfaTIsIF9hMikpO1xcbiAgfVxcblxcbiAgdGhpcy52YWx1ZSA9IF9yMjtcXG5cXG4gIHZhciBfYTMgPSBfdG9Db25zdW1hYmxlQXJyYXkoY2hlY2tlZCk7XFxuXFxuICB2YXIgX2YzID0gZnVuY3Rpb24gX2YzKGlucHV0KSB7XFxuICAgIHJldHVybiBpbnB1dC5nZXRBdHRyaWJ1dGUoXFwnaWRcXCcpICYmIF90aGlzMi5pZCA/IGlucHV0LmdldEF0dHJpYnV0ZShcXCdpZFxcJykgOiBpbnB1dC52YWx1ZTtcXG4gIH07XFxuXFxuICB2YXIgX3IzID0gW107XFxuXFxuICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCBfYTMubGVuZ3RoOyBfaTMrKykge1xcbiAgICBfcjMucHVzaChfZjMoX2EzW19pM10sIF9pMywgX2EzKSk7XFxuICB9XFxuXFxuICB0aGlzLm5hbWVzID0gX3IzO1xcbn07XFxuXFxuQ2hlY2tib3gucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XFxuICB2YXIgX3RoaXMzID0gdGhpcztcXG5cXG4gIHZhciBpbnB1dHMgPSBvcHRpb25zLmZvcm1PYmoucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPVxcXFxcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiXFxcXFwiXVwiKSk7XFxuXFxuICB2YXIgX2E0ID0gX3RvQ29uc3VtYWJsZUFycmF5KGlucHV0cyk7XFxuXFxuICB2YXIgX2Y0ID0gZnVuY3Rpb24gX2Y0KGlucHV0KSB7XFxuICAgIHZhciBhdHRyID0gaW5wdXQuZ2V0QXR0cmlidXRlKFxcJ2lkXFwnKSAmJiBfdGhpczMuaWQgPyBpbnB1dC5nZXRBdHRyaWJ1dGUoXFwnaWRcXCcpIDogaW5wdXQudmFsdWU7XFxuXFxuICAgIGlmIChfdGhpczMudmFsdWUuaW5kZXhPZihpbnB1dC52YWx1ZSkgPiAtMSkge1xcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcXCdjaGVja2VkXFwnLCBcXCdjaGVja2VkXFwnKTtcXG4gICAgICBpbnB1dC5jaGVja2VkID0gdHJ1ZTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICBpbnB1dC5jaGVja2VkID0gZmFsc2U7XFxuICAgICAgaW5wdXQucmVtb3ZlQXR0cmlidXRlKFwiY2hlY2tlZFwiKTtcXG4gICAgfVxcbiAgfTtcXG5cXG4gIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IF9hNC5sZW5ndGg7IF9pNCsrKSB7XFxuICAgIF9mNChfYTRbX2k0XSwgX2k0LCBfYTQpO1xcbiAgfVxcblxcbiAgdmFyIGNoZWNrZWQgPSB1bmRlZmluZWQ7XFxufTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdlJtbHNkR1Z5TDBsdWNIVjBjeTlEYUdWamEySnZlQzVxY3k1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDBGQ1F5OHVMM055WXk5R2FXeDBaWEl2U1c1d2RYUnpMME5vWldOclltOTRMbXB6UHpOa00ySWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlIc2dhVzVCY25KaGVTQjlJQ0E5SUhKbGNYVnBjbVVnS0NjdUxpOHVMaTlJWld4d1pYSnpMMEZ5Y21GNUp5QXBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FvS1NBOVBpQjdJSEpsZEhWeWJpQnVaWGNnUTJobFkydGliM2dvS1NCOVhHNW1kVzVqZEdsdmJpQkRhR1ZqYTJKdmVDaGtLWHRjYmlBZ0lDQjBhR2x6TG01aGJXVWdJQ0FnSUNBZ1BTQm1ZV3h6WlZ4dUlDQWdJSFJvYVhNdVkyOXRjR0Z5WlNBZ0lDQTlJR1poYkhObFhHNGdJQ0FnZEdocGN5NTFjbXhmYm1GdFpTQWdJRDBnWm1Gc2MyVmNiaUFnSUNCMGFHbHpMbTl3WlhKaGRHOXlJQ0FnUFNCY0ltOXlYQ0pjYmlBZ0lDQjBhR2x6TG5aaGJIVmxJQ0FnSUNBZ1BTQmJYVnh1SUNBZ0lIUm9hWE11YVdRZ0lDQWdJQ0FnSUNBOUlHWmhiSE5sWEc1OVhHNWNia05vWldOclltOTRMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaU0E5SUdaMWJtTjBhVzl1S0dSaGRHRXBlMXh1SUNBZ0lHeGxkQ0IwYjFaaGJHbGtZWFJsTzF4dUlDQWdJR1JoZEdFdWFXNXdkWFJ6SUQwZ1cxMDdYRzRnSUNBZ2FXWWdLSFJvYVhNdWRtRnNkV1V1YkdWdVozUm9JRDA5UFNBd0tTQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnZEdocGN5NWpiMjF3WVhKbElEMDlQU0JjSW05aWFtVmpkRndpS1NCN1hHNGdJQ0FnSUNBZ0lIUnZWbUZzYVdSaGRHVWdQU0JiWFR0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJYQmhjbVV1Wm05eVJXRmphQ2dnWTI5dGNHRnlaU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjFaaGJHbGtZWFJsTG5CMWMyZ29hVzVCY25KaGVTaGtZWFJoTENCamIyMXdZWEpsTENCMGFHbHpMblpoYkhWbEtTazdYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtMTFiSFJwUTI5dGNHRnlaU2hrWVhSaExDQjBiMVpoYkdsa1lYUmxMQ0IwYUdsekxuWmhiSFZsS1Z4dUlDQWdJSDFsYkhObGUxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6YVc1bmJHVkRiMjF3WVhKbEtHUmhkR0VzSUhSb2FYTXVkbUZzZFdVc0lIUm9hWE11WTI5dGNHRnlaU2xjYmlBZ0lDQjlYRzVjYm4xY2JseHVRMmhsWTJ0aWIzZ3VjSEp2ZEc5MGVYQmxMbTExYkhScFEyOXRjR0Z5WlNBOUlHWjFibU4wYVc5dUtDQmtZWFJoTENCMGIxWmhiR2xrWVhSbExDQjJZV3gxWlNBcGUxeHVJQ0FnSUZ4dUlDQWdJRnh1SUNBZ0lHbG1JQ2dnZEc5V1lXeHBaR0YwWlNBcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSdlZtRnNhV1JoZEdWYk1GMGdJVDA5SUZ3aVhDSWdKaVlnZEc5V1lXeHBaR0YwWlZzeFhTQWhQVDBnWENKY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTldZV3hwWkdGMFpXUWdQU0IyWVd4MVpTQStQU0IwYjFaaGJHbGtZWFJsV3pCZElDWW1JSFpoYkhWbElEdzlJSFJ2Vm1Gc2FXUmhkR1ZiTVYxY2JpQWdJQ0FnSUNBZ2ZXVnNjMlVnYVdZb2RHOVdZV3hwWkdGMFpWc3dYU0FoUFQwZ1hDSmNJaUFtSmlCMGIxWmhiR2xrWVhSbFd6RmRJRDA5UFNCY0lsd2lLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpWbUZzYVdSaGRHVmtJRDBnZG1Gc2RXVWdQajBnZEc5V1lXeHBaR0YwWlZzd1hWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWW9JWFJ2Vm1Gc2FXUmhkR1ZiTUYwZ0ppWWdkRzlXWVd4cFpHRjBaVnN4WFNCOGZDQjBiMVpoYkdsa1lYUmxXekJkSUQwOVBTQmNJbHdpSUNZbUlIUnZWbUZzYVdSaGRHVmJNVjBnS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6Vm1Gc2FXUmhkR1ZrSUQwZ2RtRnNkV1VnUEQwZ2RHOVdZV3hwWkdGMFpWc3hYVnh1SUNBZ0lDQWdJQ0I5Wld4elpYdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2x6Vm1Gc2FXUmhkR1ZrWEc0Z0lDQWdmVnh1SUNBZ0lDQmxiSE5sSUhKbGRIVnliaUJtWVd4elpUdGNibjFjYmx4dVEyaGxZMnRpYjNndWNISnZkRzkwZVhCbExuTnBibWRzWlVOdmJYQmhjbVVnUFNCbWRXNWpkR2x2YmlnZ1pHRjBZU3dnZG1Gc2RXVXNJR052YlhCaGNtVWdLWHRjYmlBZ0lGeHVJQ0FnSUd4bGRDQnBjMVpoYkdsa1lYUmxaQ0E5SUdsdVFYSnlZWGtvWkdGMFlTd2dZMjl0Y0dGeVpTd2dkbUZzZFdVcE8xeHVYRzRnSUNBZ2FXWW9JR2x6Vm1Gc2FXUmhkR1ZrSUNrZ2UxeHVYRzRnSUNBZ0lDQWdJR2x6Vm1Gc2FXUmhkR1ZrSUQwZ2RIbHdaVzltSUdselZtRnNhV1JoZEdWa0lDRTlJQ2R2WW1wbFkzUW5JRDhnVzJselZtRnNhV1JoZEdWa1hTQTZJR2x6Vm1Gc2FXUmhkR1ZrWEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG05d1pYSmhkRzl5SUQwOVBTQmNJbUZ1WkZ3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGMxWmhiR2xrWVhSbFpDQTlJR2x6Vm1Gc2FXUmhkR1ZrTG14bGJtZDBhQ0E5UFQwZ2RtRnNkV1V1YkdWdVozUm9JRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpWbUZzYVdSaGRHVmtJRDBnYVhOV1lXeHBaR0YwWldRdVptbHNkR1Z5S0NCMklEMCtJSFpoYkhWbExtbHVaR1Y0VDJZb0lGTjBjbWx1WnloMktTQXBJRDRnTFRFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhOV1lXeHBaR0YwWldRZ1BTQmJMaTR1Ym1WM0lGTmxkQ2hwYzFaaGJHbGtZWFJsWkNsZE8xeHVJQ0FnSUNBZ0lDQjlaV3h6WlNCcFppQW9kR2hwY3k1dmNHVnlZWFJ2Y2lBOVBUMGdYQ0p2Y2x3aUtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUdselZtRnNhV1JoZEdWa0lEMGdhWE5XWVd4cFpHRjBaV1F1Wm1sc2RHVnlLQ0IySUQwK0lIWmhiSFZsTG1sdVpHVjRUMllvSUZOMGNtbHVaeWgyS1NBcElENGdMVEVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhWE5XWVd4cFpHRjBaV1FnUFNCYkxpNHVibVYzSUZObGRDaHBjMVpoYkdsa1lYUmxaQ2xkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhWE5XWVd4cFpHRjBaV1FnUFNCcGMxWmhiR2xrWVhSbFpDNXNaVzVuZEdnZ1BpQXdYRzRnSUNBZ0lDQWdJSDFsYkhObElHbG1JQ2gwYUdsekxtOXdaWEpoZEc5eUlEMDlQU0JjSWo1Y0lpbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGMxWmhiR2xrWVhSbFpDQTlJR2x6Vm1Gc2FXUmhkR1ZrSUQ0Z2RtRnNkV1ZiTUYxY2JpQWdJQ0FnSUNBZ2ZXVnNjMlVnYVdZZ0tIUm9hWE11YjNCbGNtRjBiM0lnUFQwOUlGd2lQajFjSWlsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYzFaaGJHbGtZWFJsWkNBOUlHbHpWbUZzYVdSaGRHVmtJRDQ5SUhaaGJIVmxXekJkWEc0Z0lDQWdJQ0FnSUgxbGJITmxJR2xtSUNoMGFHbHpMbTl3WlhKaGRHOXlJRDA5UFNCY0lqdzlYQ0lwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhWE5XWVd4cFpHRjBaV1FnUFNCcGMxWmhiR2xrWVhSbFpDQThQU0IyWVd4MVpWc3dYVnh1SUNBZ0lDQWdJQ0I5Wld4elpTQnBaaUFvZEdocGN5NXZjR1Z5WVhSdmNpQTlQVDBnWENJOFhDSXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTldZV3hwWkdGMFpXUWdQU0JwYzFaaGJHbGtZWFJsWkNBOElIWmhiSFZsV3pCZFhHNGdJQ0FnSUNBZ0lIMWxiSE5sSUdsbUlDaDBhR2x6TG05d1pYSmhkRzl5SUQwOVBTQmNJajFjSWlsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYzFaaGJHbGtZWFJsWkNBOUlHbHpWbUZzYVdSaGRHVmtJRDA5UFNCMllXeDFaVnN3WFZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGMxWmhiR2xrWVhSbFpEdGNibHh1SUNBZ0lIMGdaV3h6WlNCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjYmx4dWZWeHVYRzVEYUdWamEySnZlQzV3Y205MGIzUjVjR1V1ZFhCa1lYUmxJRDBnWm5WdVkzUnBiMjRvYjNCMGFXOXVjeWw3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2x1Y0hWMGN5QTlJRzl3ZEdsdmJuTXVaV3d1Wm05eWJVOWlhaTV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLR0JiYm1GdFpUMWNJaVI3ZEdocGN5NXVZVzFsZlZ3aVhXQXBYRzRnSUNBZ0lDQWdJQzh2SUZKbGRIVnliaUIwYUdVZ1kyaGxZMnRsWkNCcGJuQjFkSE5jYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZMmhsWTJ0bFpDQTlJRnN1TGk1cGJuQjFkSE5kTG1acGJIUmxjaWdnYVc1d2RYUWdQVDRnYVc1d2RYUXVZMmhsWTJ0bFpDQXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFbHVjMlZ5ZENCMllXeDFaU0JwYmlCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FnSUNCMGFHbHpMblpoYkhWbElEMGdXeTR1TG1Ob1pXTnJaV1JkTG0xaGNDZ2dhVzV3ZFhRZ1BUNGdhVzV3ZFhRdWRtRnNkV1VnS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMbTVoYldWeklEMGdXeTR1TG1Ob1pXTnJaV1JkTG0xaGNDZ2dhVzV3ZFhRZ1BUNGdhVzV3ZFhRdVoyVjBRWFIwY21saWRYUmxLQ2RwWkNjcElDWW1JSFJvYVhNdWFXUWdQeUJwYm5CMWRDNW5aWFJCZEhSeWFXSjFkR1VvSjJsa0p5a2dPaUJwYm5CMWRDNTJZV3gxWlNBcE8xeHVmVnh1WEc1RGFHVmphMkp2ZUM1d2NtOTBiM1I1Y0dVdVkzSmxZWFJsSUQwZ1puVnVZM1JwYjI0b2IzQjBhVzl1Y3lsN1hHNWNiaUFnSUNCamIyNXpkQ0JwYm5CMWRITWdQU0J2Y0hScGIyNXpMbVp2Y20xUFltb3VjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaGdXMjVoYldVOVhDSWtlM1JvYVhNdWJtRnRaWDFjSWwxZ0tWeHVYRzRnSUNBZ1kyOXVjM1FnWTJobFkydGxaQ0E5SUZzdUxpNXBibkIxZEhOZExtWnZja1ZoWTJnb0lHbHVjSFYwSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1lYUjBjaUE5SUdsdWNIVjBMbWRsZEVGMGRISnBZblYwWlNnbmFXUW5LU0FtSmlCMGFHbHpMbWxrSUQ4Z2FXNXdkWFF1WjJWMFFYUjBjbWxpZFhSbEtDZHBaQ2NwSURvZ2FXNXdkWFF1ZG1Gc2RXVWdPMXh1WEc0Z0lDQWdJQ0FnSUdsbUtIUm9hWE11ZG1Gc2RXVXVhVzVrWlhoUFppaHBibkIxZEM1MllXeDFaU2tnUGlBdE1TbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkQzV6WlhSQmRIUnlhV0oxZEdVb0oyTm9aV05yWldRbkxDQW5ZMmhsWTJ0bFpDY3BYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkQzVqYUdWamEyVmtJRDBnZEhKMVpWeHVJQ0FnSUNBZ0lDQjlaV3h6Wlh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1Y0hWMExtTm9aV05yWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1Y0hWMExuSmxiVzkyWlVGMGRISnBZblYwWlNoY0ltTm9aV05yWldSY0lpbGNiaUFnSUNBZ0lDQWdmU0JjYmlBZ0lDQjlLVHRjYm4xY2JpSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3p0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUkVFN1FVRkRRVHRCUVVSQk8wRkJTVUU3UVVGRFFUdEJRVU5CTzBGQlRrRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkZRVHRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUjBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkZRVHRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVXhCTzBGQlEwRTdRVUZFUVR0QlFVMUJPMEZCUVVFN1FVRkRRVHRCUVZCQk8wRkJRMEU3UVVGRVFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVdEJPMEZCUTBFN1FVRlFRVHRCUVVOQk8wRkJSRUU3UVVGUFFUdEJRVUZCTzBGQlEwRTdRVUZTUVR0QlFVTkJPMEZCUkVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGTlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJTRUU3UVVGRFFUdEJRVVJCTzBGQlMwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFXWkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJSMEU3UVVGWFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9zcmMvRmlsdGVyL0lucHV0cy9DaGVja2JveC5qc1xcbicpfSxcIi4vc3JjL0ZpbHRlci9JbnB1dHMvUmFkaW8uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9GaWx0ZXIvSW5wdXRzL1JhZGlvLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtldmFsKCdmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cXG5cXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxcblxcbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHsgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH0gfVxcblxcbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cXG5cXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxcblxcbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uL0hlbHBlcnMvQXJyYXkgKi8gXCIuL3NyYy9IZWxwZXJzL0FycmF5LmpzXCIpLFxcbiAgICBpbkFycmF5ID0gX3JlcXVpcmUuaW5BcnJheTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcXG4gIHJldHVybiBuZXcgUmFkaW8oKTtcXG59O1xcblxcbmZ1bmN0aW9uIFJhZGlvKCkge1xcbiAgdGhpcy5uYW1lID0gZmFsc2U7XFxuICB0aGlzLmNvbXBhcmUgPSBmYWxzZTtcXG4gIHRoaXMudXJsX25hbWUgPSBmYWxzZTtcXG4gIHRoaXMub3BlcmF0b3IgPSBcIm9yXCI7XFxuICB0aGlzLnZhbHVlID0gW107XFxuICB0aGlzLmlkID0gZmFsc2U7XFxufSAvLyBSYWRpby5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbihkYXRhKXtcXG4vLyAgICAgbGV0IHRvVmFsaWRhdGU7XFxuLy8gICAgIGRhdGEuaW5wdXRzID0gW107XFxuLy8gICAgIGlmICh0aGlzLnZhbHVlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRydWU7XFxuLy8gICAgICAgbGV0IGNvbXAgPSB0aGlzLmNvbXBhcmUsIG9wZXJhdG9yID0gdGhpcy5vcGVyYXRvcjtcXG4vLyAgICAgICBpZiAodGhpcy50YXJnZXQgJiYgdGhpcy5jb21wYXJlW3RoaXMudGFyZ2V0XSApe1xcbi8vICAgICAgICAgY29tcCA9IHRoaXMuY29tcGFyZVt0aGlzLnRhcmdldF0uY29tcGFyZVxcbi8vICAgICAgICAgb3BlcmF0b3IgID0gdGhpcy5jb21wYXJlW3RoaXMudGFyZ2V0XS5vcGVyYXRvclxcbi8vICAgICAgIH1cXG4vLyAgICAgICAgIGlmICh0eXBlb2YgY29tcCA9PT0gXCJvYmplY3RcIikge1xcbi8vICAgICAgICAgICAgIHRvVmFsaWRhdGUgPSBbXTtcXG4vLyAgICAgICAgICAgICBjb21wLmZvckVhY2goIGNvbXBhcmUgPT4ge1xcbi8vICAgICAgICAgICAgICAgICB0b1ZhbGlkYXRlLnB1c2goaW5BcnJheShkYXRhLCBjb21wYXJlLCB0aGlzLnZhbHVlKSk7XFxuLy8gICAgICAgICAgICAgfSlcXG4vLyAgICAgICAgICAgICByZXR1cm4gdGhpcy5tdWx0aUNvbXBhcmUoZGF0YSwgdG9WYWxpZGF0ZSwgdGhpcy52YWx1ZSlcXG4vLyAgICAgICAgIH1lbHNle1xcbi8vICAgICAgICAgICAgIHJldHVybiB0aGlzLnNpbmdsZUNvbXBhcmUoZGF0YSwgdGhpcy52YWx1ZSwgY29tcCwgb3BlcmF0b3IpXFxuLy8gICAgICAgICB9XFxuLy8gfVxcblxcblxcblJhZGlvLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XFxuICB2YXIgX3RoaXMgPSB0aGlzO1xcblxcbiAgaWYgKHRoaXMudmFsdWUubGVuZ3RoID09PSAwIHx8IHRoaXMudmFsdWUubGVuZ3RoID09PSAxICYmIHRoaXMudmFsdWVbMF0gPT09IFwiXCIpIHtcXG4gICAgcmV0dXJuIHRydWU7XFxuICB9XFxuXFxuICB2YXIgaXNWYWxpZGF0ZWQgPSBpbkFycmF5KGRhdGEsIHRoaXMuY29tcGFyZSwgdGhpcy52YWx1ZSk7XFxuICBpc1ZhbGlkYXRlZCA9IF90eXBlb2YoaXNWYWxpZGF0ZWQpICE9IFxcJ29iamVjdFxcJyA/IFtpc1ZhbGlkYXRlZF0gOiBpc1ZhbGlkYXRlZDtcXG5cXG4gIGlmIChpc1ZhbGlkYXRlZCkge1xcbiAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkLmZpbHRlcihmdW5jdGlvbiAodikge1xcbiAgICAgIHJldHVybiBfdGhpcy52YWx1ZS5pbmRleE9mKFN0cmluZyh2KSkgPiAtMTtcXG4gICAgfSk7XFxuICAgIGlzVmFsaWRhdGVkID0gX3RvQ29uc3VtYWJsZUFycmF5KG5ldyBTZXQoaXNWYWxpZGF0ZWQpKTtcXG4gICAgaXNWYWxpZGF0ZWQgPSB0aGlzLm9wZXJhdG9yICE9PSBcImFuZFwiID8gaXNWYWxpZGF0ZWQubGVuZ3RoID4gMCA6IGlzVmFsaWRhdGVkLmxlbmd0aCA9PT0gdGhpcy52YWx1ZS5sZW5ndGg7XFxuICAgIHJldHVybiBpc1ZhbGlkYXRlZDtcXG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XFxufTtcXG5cXG5SYWRpby5wcm90b3R5cGUubXVsdGlDb21wYXJlID0gZnVuY3Rpb24gKGRhdGEsIHRvVmFsaWRhdGUsIHZhbHVlKSB7XFxuICBpZiAodG9WYWxpZGF0ZSkge1xcbiAgICBpZiAodG9WYWxpZGF0ZVswXSAhPT0gXCJcIiAmJiB0b1ZhbGlkYXRlWzFdICE9PSBcIlwiKSB7XFxuICAgICAgaXNWYWxpZGF0ZWQgPSB2YWx1ZSA+PSB0b1ZhbGlkYXRlWzBdICYmIHZhbHVlIDw9IHRvVmFsaWRhdGVbMV07XFxuICAgIH0gZWxzZSBpZiAodG9WYWxpZGF0ZVswXSAhPT0gXCJcIiAmJiB0b1ZhbGlkYXRlWzFdID09PSBcIlwiKSB7XFxuICAgICAgaXNWYWxpZGF0ZWQgPSB2YWx1ZSA+PSB0b1ZhbGlkYXRlWzBdO1xcbiAgICB9IGVsc2UgaWYgKCF0b1ZhbGlkYXRlWzBdICYmIHRvVmFsaWRhdGVbMV0gfHwgdG9WYWxpZGF0ZVswXSA9PT0gXCJcIiAmJiB0b1ZhbGlkYXRlWzFdKSB7XFxuICAgICAgaXNWYWxpZGF0ZWQgPSB2YWx1ZSA8PSB0b1ZhbGlkYXRlWzFdO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIHJldHVybiB0cnVlO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBpc1ZhbGlkYXRlZDtcXG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XFxufTtcXG5cXG5SYWRpby5wcm90b3R5cGUuc2luZ2xlQ29tcGFyZSA9IGZ1bmN0aW9uIChkYXRhLCB2YWx1ZSwgY29tcGFyZSwgb3BlcmF0b3IpIHtcXG4gIC8vIGlmKCFjb21wYXJlKSByZXR1cm5cXG4gIHZhciBpc1ZhbGlkYXRlZCA9IGluQXJyYXkoZGF0YSwgY29tcGFyZSwgdmFsdWUpO1xcblxcbiAgaWYgKGlzVmFsaWRhdGVkKSB7XFxuICAgIGlzVmFsaWRhdGVkID0gX3R5cGVvZihpc1ZhbGlkYXRlZCkgIT0gXFwnb2JqZWN0XFwnID8gW2lzVmFsaWRhdGVkXSA6IGlzVmFsaWRhdGVkO1xcblxcbiAgICBpZiAob3BlcmF0b3IgPT09IFwiYW5kXCIpIHtcXG4gICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkLmxlbmd0aCA9PT0gdmFsdWUubGVuZ3RoO1xcbiAgICAgIGlzVmFsaWRhdGVkID0gaXNWYWxpZGF0ZWQuZmlsdGVyKGZ1bmN0aW9uICh2KSB7XFxuICAgICAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihTdHJpbmcodikpID4gLTE7XFxuICAgICAgfSk7XFxuICAgICAgaXNWYWxpZGF0ZWQgPSBfdG9Db25zdW1hYmxlQXJyYXkobmV3IFNldChpc1ZhbGlkYXRlZCkpO1xcbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcIm9yXCIpIHtcXG4gICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkLmZpbHRlcihmdW5jdGlvbiAodikge1xcbiAgICAgICAgcmV0dXJuIHZhbHVlLmluZGV4T2YoU3RyaW5nKHYpKSA+IC0xO1xcbiAgICAgIH0pO1xcbiAgICAgIGlzVmFsaWRhdGVkID0gX3RvQ29uc3VtYWJsZUFycmF5KG5ldyBTZXQoaXNWYWxpZGF0ZWQpKTtcXG4gICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkLmxlbmd0aCA+IDA7XFxuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwiPlwiKSB7XFxuICAgICAgaXNWYWxpZGF0ZWQgPSBpc1ZhbGlkYXRlZCA+IHZhbHVlWzBdO1xcbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcIj49XCIpIHtcXG4gICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkID49IHZhbHVlWzBdO1xcbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcIjw9XCIpIHtcXG4gICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkIDw9IHZhbHVlWzBdO1xcbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcIjxcIikge1xcbiAgICAgIGlzVmFsaWRhdGVkID0gaXNWYWxpZGF0ZWQgPCB2YWx1ZVswXTtcXG4gICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCI9XCIpIHtcXG4gICAgICBpc1ZhbGlkYXRlZCA9IGlzVmFsaWRhdGVkID09PSB2YWx1ZVswXTtcXG4gICAgfVxcblxcbiAgICByZXR1cm4gaXNWYWxpZGF0ZWQ7XFxuICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xcbn07XFxuXFxuUmFkaW8ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XFxuICB2YXIgX3RoaXMyID0gdGhpcztcXG5cXG4gIC8vIEdldCBhbGwgaW5wdXRzIGZyb20gdGhpcyBuYW1lXFxuICB2YXIgaW5wdXRzID0gb3B0aW9ucy5lbC5mb3JtT2JqLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1cXFxcXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIlxcXFxcIl1cIikpOyAvLyBSZXR1cm4gdGhlIGNoZWNrZWQgaW5wdXRzXFxuXFxuICB2YXIgY2hlY2tlZCA9IF90b0NvbnN1bWFibGVBcnJheShpbnB1dHMpLmZpbHRlcihmdW5jdGlvbiAoaW5wdXQpIHtcXG4gICAgcmV0dXJuIGlucHV0LmNoZWNrZWQ7XFxuICB9KTsgLy8gSW5zZXJ0IHZhbHVlIGluIGluc3RhbmNlXFxuXFxuXFxuICB2YXIgX2EgPSBfdG9Db25zdW1hYmxlQXJyYXkoY2hlY2tlZCk7XFxuXFxuICB2YXIgX2YgPSBmdW5jdGlvbiBfZihpbnB1dCkge1xcbiAgICByZXR1cm4gaW5wdXQudmFsdWU7XFxuICB9O1xcblxcbiAgdmFyIF9yID0gW107XFxuXFxuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XFxuICAgIF9yLnB1c2goX2YoX2FbX2ldLCBfaSwgX2EpKTtcXG4gIH1cXG5cXG4gIHRoaXMudmFsdWUgPSBfcjtcXG5cXG4gIHZhciBfYTIgPSBfdG9Db25zdW1hYmxlQXJyYXkoY2hlY2tlZCk7XFxuXFxuICB2YXIgX2YyID0gZnVuY3Rpb24gX2YyKGlucHV0KSB7XFxuICAgIHJldHVybiBpbnB1dC5nZXRBdHRyaWJ1dGUoXFwnaWRcXCcpICYmIF90aGlzMi5pZCA/IGlucHV0LmdldEF0dHJpYnV0ZShcXCdpZFxcJykgOiBpbnB1dC52YWx1ZTtcXG4gIH07XFxuXFxuICB2YXIgX3IyID0gW107XFxuXFxuICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBfYTIubGVuZ3RoOyBfaTIrKykge1xcbiAgICBfcjIucHVzaChfZjIoX2EyW19pMl0sIF9pMiwgX2EyKSk7XFxuICB9XFxuXFxuICB0aGlzLm5hbWVzID0gX3IyO1xcbn07XFxuXFxuUmFkaW8ucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XFxuICB2YXIgX3RoaXMzID0gdGhpcztcXG5cXG4gIHZhciBpbnB1dHMgPSBvcHRpb25zLmZvcm1PYmoucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPVxcXFxcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiXFxcXFwiXVwiKSk7XFxuXFxuICB2YXIgX2EzID0gX3RvQ29uc3VtYWJsZUFycmF5KGlucHV0cyk7XFxuXFxuICB2YXIgX2YzID0gZnVuY3Rpb24gX2YzKGlucHV0KSB7XFxuICAgIHZhciBhdHRyID0gaW5wdXQuZ2V0QXR0cmlidXRlKFxcJ2lkXFwnKSAmJiBfdGhpczMuaWQgPyBpbnB1dC5nZXRBdHRyaWJ1dGUoXFwnaWRcXCcpIDogaW5wdXQudmFsdWU7XFxuXFxuICAgIGlmIChfdGhpczMudmFsdWUuaW5kZXhPZihpbnB1dC52YWx1ZSkgPiAtMSkge1xcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcXCdjaGVja2VkXFwnLCBcXCdjaGVja2VkXFwnKTtcXG4gICAgICBpbnB1dC5jaGVja2VkID0gdHJ1ZTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICBpbnB1dC5jaGVja2VkID0gZmFsc2U7XFxuICAgICAgaW5wdXQucmVtb3ZlQXR0cmlidXRlKFwiY2hlY2tlZFwiKTtcXG4gICAgfVxcbiAgfTtcXG5cXG4gIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IF9hMy5sZW5ndGg7IF9pMysrKSB7XFxuICAgIF9mMyhfYTNbX2kzXSwgX2kzLCBfYTMpO1xcbiAgfVxcblxcbiAgdmFyIGNoZWNrZWQgPSB1bmRlZmluZWQ7XFxufTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdlJtbHNkR1Z5TDBsdWNIVjBjeTlTWVdScGJ5NXFjeTVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEZDUXk4dUwzTnlZeTlHYVd4MFpYSXZTVzV3ZFhSekwxSmhaR2x2TG1welB6WXhPV0lpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJSHNnYVc1QmNuSmhlU0I5SUNBOUlISmxjWFZwY21VZ0tDY3VMaTh1TGk5SVpXeHdaWEp6TDBGeWNtRjVKeUFwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBb0tTQTlQaUI3SUhKbGRIVnliaUJ1WlhjZ1VtRmthVzhvS1NCOVhHNW1kVzVqZEdsdmJpQlNZV1JwYnlncGUxeHVJQ0IwYUdsekxtNWhiV1VnSUNBZ1BTQm1ZV3h6WlNCY2JpQWdkR2hwY3k1amIyMXdZWEpsSUQwZ1ptRnNjMlZjYmlBZ2RHaHBjeTUxY214ZmJtRnRaVDBnWm1Gc2MyVmNiaUFnZEdocGN5NXZjR1Z5WVhSdmNqMGdYQ0p2Y2x3aVhHNGdJSFJvYVhNdWRtRnNkV1VnSUNBOUlGdGRYRzRnSUhSb2FYTXVhV1FnSUNBZ0lDQTlJR1poYkhObFhHNTlYRzVjYmx4dUx5OGdVbUZrYVc4dWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbElEMGdablZ1WTNScGIyNG9aR0YwWVNsN1hHNHZMeUFnSUNBZ2JHVjBJSFJ2Vm1Gc2FXUmhkR1U3WEc0dkx5QWdJQ0FnWkdGMFlTNXBibkIxZEhNZ1BTQmJYVHRjYmx4dUx5OGdJQ0FnSUdsbUlDaDBhR2x6TG5aaGJIVmxMbXhsYm1kMGFDQTlQVDBnTUNrZ2NtVjBkWEp1SUhSeWRXVTdYRzR2THlBZ0lDQWdJQ0JzWlhRZ1kyOXRjQ0E5SUhSb2FYTXVZMjl0Y0dGeVpTd2diM0JsY21GMGIzSWdQU0IwYUdsekxtOXdaWEpoZEc5eU8xeHVMeThnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkR0Z5WjJWMElDWW1JSFJvYVhNdVkyOXRjR0Z5WlZ0MGFHbHpMblJoY21kbGRGMGdLWHRjYmk4dklDQWdJQ0FnSUNBZ1kyOXRjQ0E5SUhSb2FYTXVZMjl0Y0dGeVpWdDBhR2x6TG5SaGNtZGxkRjB1WTI5dGNHRnlaVnh1THk4Z0lDQWdJQ0FnSUNCdmNHVnlZWFJ2Y2lBZ1BTQjBhR2x6TG1OdmJYQmhjbVZiZEdocGN5NTBZWEpuWlhSZExtOXdaWEpoZEc5eVhHNHZMeUFnSUNBZ0lDQjlYRzRnSUNBZ0lDQmNiaTh2SUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCamIyMXdJRDA5UFNCY0ltOWlhbVZqZEZ3aUtTQjdYRzRnSUNBZ0lDQWdJQ0JjYmk4dklDQWdJQ0FnSUNBZ0lDQWdJSFJ2Vm1Gc2FXUmhkR1VnUFNCYlhUdGNiaTh2SUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiWEF1Wm05eVJXRmphQ2dnWTI5dGNHRnlaU0E5UGlCN1hHNHZMeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzlXWVd4cFpHRjBaUzV3ZFhOb0tHbHVRWEp5WVhrb1pHRjBZU3dnWTI5dGNHRnlaU3dnZEdocGN5NTJZV3gxWlNrcE8xeHVMeThnSUNBZ0lDQWdJQ0FnSUNBZ2ZTbGNiaTh2SUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTExYkhScFEyOXRjR0Z5WlNoa1lYUmhMQ0IwYjFaaGJHbGtZWFJsTENCMGFHbHpMblpoYkhWbEtWeHVYRzR2THlBZ0lDQWdJQ0FnSUgxbGJITmxlMXh1THk4Z0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJsdVoyeGxRMjl0Y0dGeVpTaGtZWFJoTENCMGFHbHpMblpoYkhWbExDQmpiMjF3TENCdmNHVnlZWFJ2Y2lsY2JpOHZJQ0FnSUNBZ0lDQWdmVnh1WEc0dkx5QjlYRzVTWVdScGJ5NXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVWdQU0JtZFc1amRHbHZiaWhrWVhSaEtYdGNiaUFnSUNCcFppQW9kR2hwY3k1MllXeDFaUzVzWlc1bmRHZ2dQVDA5SURBZ2ZId2dkR2hwY3k1MllXeDFaUzVzWlc1bmRHZ2dQVDA5SURFZ0ppWWdkR2hwY3k1MllXeDFaVnN3WFNBOVBUMGdYQ0pjSWlrZ2NtVjBkWEp1SUhSeWRXVTdYRzVjYmlBZ0lDQnNaWFFnYVhOV1lXeHBaR0YwWldRZ1BTQnBia0Z5Y21GNUtHUmhkR0VzSUhSb2FYTXVZMjl0Y0dGeVpTd2dkR2hwY3k1MllXeDFaU2s3WEc1Y2JpQWdJQ0JjYmlBZ0lDQnBjMVpoYkdsa1lYUmxaQ0E5SUhSNWNHVnZaaUJwYzFaaGJHbGtZWFJsWkNBaFBTQW5iMkpxWldOMEp5QS9JRnRwYzFaaGJHbGtZWFJsWkYwZ09pQnBjMVpoYkdsa1lYUmxaRnh1SUNBZ0lHbG1LQ0JwYzFaaGJHbGtZWFJsWkNBcElIdGNibHh1SUNBZ0lDQWdJQ0JwYzFaaGJHbGtZWFJsWkNBOUlHbHpWbUZzYVdSaGRHVmtMbVpwYkhSbGNpZ2dkaUE5UGlCMGFHbHpMblpoYkhWbExtbHVaR1Y0VDJZb0lGTjBjbWx1WnloMktTQXBJRDRnTFRFcE8xeHVJQ0FnSUNBZ0lDQnBjMVpoYkdsa1lYUmxaQ0E5SUZzdUxpNXVaWGNnVTJWMEtHbHpWbUZzYVdSaGRHVmtLVjA3WEc1Y2JpQWdJQ0FnSUNBZ2FYTldZV3hwWkdGMFpXUWdQU0IwYUdsekxtOXdaWEpoZEc5eUlDRTlQU0JjSW1GdVpGd2lJRDhnSUdselZtRnNhV1JoZEdWa0xteGxibWQwYUNBK0lEQWdPaUJwYzFaaGJHbGtZWFJsWkM1c1pXNW5kR2dnUFQwOUlIUm9hWE11ZG1Gc2RXVXViR1Z1WjNSb0lEdGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhWE5XWVd4cFpHRjBaV1E3WEc1Y2JpQWdJQ0I5SUdWc2MyVWdjbVYwZFhKdUlHWmhiSE5sTzF4dVhHNTlYRzVjYmxKaFpHbHZMbkJ5YjNSdmRIbHdaUzV0ZFd4MGFVTnZiWEJoY21VZ1BTQm1kVzVqZEdsdmJpZ2daR0YwWVN3Z2RHOVdZV3hwWkdGMFpTd2dkbUZzZFdVZ0tYdGNibHh1SUNBZ0lHbG1JQ2dnZEc5V1lXeHBaR0YwWlNBcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSdlZtRnNhV1JoZEdWYk1GMGdJVDA5SUZ3aVhDSWdKaVlnZEc5V1lXeHBaR0YwWlZzeFhTQWhQVDBnWENKY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTldZV3hwWkdGMFpXUWdQU0IyWVd4MVpTQStQU0IwYjFaaGJHbGtZWFJsV3pCZElDWW1JSFpoYkhWbElEdzlJSFJ2Vm1Gc2FXUmhkR1ZiTVYxY2JpQWdJQ0FnSUNBZ2ZXVnNjMlVnYVdZb2RHOVdZV3hwWkdGMFpWc3dYU0FoUFQwZ1hDSmNJaUFtSmlCMGIxWmhiR2xrWVhSbFd6RmRJRDA5UFNCY0lsd2lLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpWbUZzYVdSaGRHVmtJRDBnZG1Gc2RXVWdQajBnZEc5V1lXeHBaR0YwWlZzd1hWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWW9JWFJ2Vm1Gc2FXUmhkR1ZiTUYwZ0ppWWdkRzlXWVd4cFpHRjBaVnN4WFNCOGZDQjBiMVpoYkdsa1lYUmxXekJkSUQwOVBTQmNJbHdpSUNZbUlIUnZWbUZzYVdSaGRHVmJNVjBnS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6Vm1Gc2FXUmhkR1ZrSUQwZ2RtRnNkV1VnUEQwZ2RHOVdZV3hwWkdGMFpWc3hYVnh1SUNBZ0lDQWdJQ0I5Wld4elpYdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2x6Vm1Gc2FXUmhkR1ZrWEc0Z0lDQWdmVnh1SUNBZ0lDQmxiSE5sSUhKbGRIVnliaUJtWVd4elpUdGNibjFjYmx4dVVtRmthVzh1Y0hKdmRHOTBlWEJsTG5OcGJtZHNaVU52YlhCaGNtVWdQU0JtZFc1amRHbHZiaWdnWkdGMFlTd2dkbUZzZFdVc0lHTnZiWEJoY21Vc0lHOXdaWEpoZEc5eUlDbDdYRzRnSUNBZ1hHNGdJQ0FnTHk4Z2FXWW9JV052YlhCaGNtVXBJSEpsZEhWeWJseHVJQ0FnSUd4bGRDQnBjMVpoYkdsa1lYUmxaQ0E5SUdsdVFYSnlZWGtvWkdGMFlTd2dZMjl0Y0dGeVpTd2dkbUZzZFdVcE8xeHVJQ0FnSUZ4dUlDQWdJR2xtS0NCcGMxWmhiR2xrWVhSbFpDQXBJSHRjYmx4dUlDQWdJQ0FnSUNCcGMxWmhiR2xrWVhSbFpDQTlJSFI1Y0dWdlppQnBjMVpoYkdsa1lYUmxaQ0FoUFNBbmIySnFaV04wSnlBL0lGdHBjMVpoYkdsa1lYUmxaRjBnT2lCcGMxWmhiR2xrWVhSbFpGeHVJQ0FnSUNBZ0lDQnBaaUFvYjNCbGNtRjBiM0lnUFQwOUlGd2lZVzVrWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdselZtRnNhV1JoZEdWa0lEMGdhWE5XWVd4cFpHRjBaV1F1YkdWdVozUm9JRDA5UFNCMllXeDFaUzVzWlc1bmRHZ2dPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTldZV3hwWkdGMFpXUWdQU0JwYzFaaGJHbGtZWFJsWkM1bWFXeDBaWElvSUhZZ1BUNGdkbUZzZFdVdWFXNWtaWGhQWmlnZ1UzUnlhVzVuS0hZcElDa2dQaUF0TVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYzFaaGJHbGtZWFJsWkNBOUlGc3VMaTV1WlhjZ1UyVjBLR2x6Vm1Gc2FXUmhkR1ZrS1YwN1hHNGdJQ0FnSUNBZ0lIMWxiSE5sSUdsbUlDaHZjR1Z5WVhSdmNpQTlQVDBnWENKdmNsd2lLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpWbUZzYVdSaGRHVmtJRDBnYVhOV1lXeHBaR0YwWldRdVptbHNkR1Z5S0NCMklEMCtJSFpoYkhWbExtbHVaR1Y0VDJZb0lGTjBjbWx1WnloMktTQXBJRDRnTFRFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhOV1lXeHBaR0YwWldRZ1BTQmJMaTR1Ym1WM0lGTmxkQ2hwYzFaaGJHbGtZWFJsWkNsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhOV1lXeHBaR0YwWldRZ1BTQnBjMVpoYkdsa1lYUmxaQzVzWlc1bmRHZ2dQaUF3WEc0Z0lDQWdJQ0FnSUgxbGJITmxJR2xtSUNodmNHVnlZWFJ2Y2lBOVBUMGdYQ0krWENJcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhOV1lXeHBaR0YwWldRZ1BTQnBjMVpoYkdsa1lYUmxaQ0ErSUhaaGJIVmxXekJkWEc0Z0lDQWdJQ0FnSUgxbGJITmxJR2xtSUNodmNHVnlZWFJ2Y2lBOVBUMGdYQ0krUFZ3aUtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUdselZtRnNhV1JoZEdWa0lEMGdhWE5XWVd4cFpHRjBaV1FnUGowZ2RtRnNkV1ZiTUYxY2JpQWdJQ0FnSUNBZ2ZXVnNjMlVnYVdZZ0tHOXdaWEpoZEc5eUlEMDlQU0JjSWp3OVhDSXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTldZV3hwWkdGMFpXUWdQU0JwYzFaaGJHbGtZWFJsWkNBOFBTQjJZV3gxWlZzd1hWeHVJQ0FnSUNBZ0lDQjlaV3h6WlNCcFppQW9iM0JsY21GMGIzSWdQVDA5SUZ3aVBGd2lLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpWbUZzYVdSaGRHVmtJRDBnYVhOV1lXeHBaR0YwWldRZ1BDQjJZV3gxWlZzd1hWeHVJQ0FnSUNBZ0lDQjlaV3h6WlNCcFppQW9iM0JsY21GMGIzSWdQVDA5SUZ3aVBWd2lLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpWbUZzYVdSaGRHVmtJRDBnYVhOV1lXeHBaR0YwWldRZ1BUMDlJSFpoYkhWbFd6QmRYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2x6Vm1Gc2FXUmhkR1ZrTzF4dVhHNGdJQ0FnZlNCbGJITmxJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVYRzU5WEc1Y2JsSmhaR2x2TG5CeWIzUnZkSGx3WlM1MWNHUmhkR1VnUFNCbWRXNWpkR2x2YmlodmNIUnBiMjV6S1h0Y2JpQWdJQ0F2THlCSFpYUWdZV3hzSUdsdWNIVjBjeUJtY205dElIUm9hWE1nYm1GdFpWeHVJQ0FnSUdOdmJuTjBJR2x1Y0hWMGN5QTlJRzl3ZEdsdmJuTXVaV3d1Wm05eWJVOWlhaTV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLR0JiYm1GdFpUMWNJaVI3ZEdocGN5NXVZVzFsZlZ3aVhXQXBYRzRnSUNBZ0x5OGdVbVYwZFhKdUlIUm9aU0JqYUdWamEyVmtJR2x1Y0hWMGMxeHVJQ0FnSUdOdmJuTjBJR05vWldOclpXUWdQU0JiTGk0dWFXNXdkWFJ6WFM1bWFXeDBaWElvSUdsdWNIVjBJRDArSUdsdWNIVjBMbU5vWldOclpXUWdLVHRjYmx4dUlDQWdJQzh2SUVsdWMyVnlkQ0IyWVd4MVpTQnBiaUJwYm5OMFlXNWpaVnh1SUNBZ0lIUm9hWE11ZG1Gc2RXVWdQU0JiTGk0dVkyaGxZMnRsWkYwdWJXRndLQ0JwYm5CMWRDQTlQaUJwYm5CMWRDNTJZV3gxWlNBcFhHNGdJQ0FnZEdocGN5NXVZVzFsY3lBOUlGc3VMaTVqYUdWamEyVmtYUzV0WVhBb0lHbHVjSFYwSUQwK0lHbHVjSFYwTG1kbGRFRjBkSEpwWW5WMFpTZ25hV1FuS1NBbUppQjBhR2x6TG1sa0lEOGdhVzV3ZFhRdVoyVjBRWFIwY21saWRYUmxLQ2RwWkNjcElEb2dhVzV3ZFhRdWRtRnNkV1VnS1R0Y2JuMWNibEpoWkdsdkxuQnliM1J2ZEhsd1pTNWpjbVZoZEdVZ1BTQm1kVzVqZEdsdmJpaHZjSFJwYjI1ektYdGNibHh1SUNBZ0lHTnZibk4wSUdsdWNIVjBjeUE5SUc5d2RHbHZibk11Wm05eWJVOWlhaTV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLR0JiYm1GdFpUMWNJaVI3ZEdocGN5NXVZVzFsZlZ3aVhXQXBYRzVjYmlBZ0lDQmpiMjV6ZENCamFHVmphMlZrSUQwZ1d5NHVMbWx1Y0hWMGMxMHVabTl5UldGamFDZ2dhVzV3ZFhRZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmhkSFJ5SUQwZ2FXNXdkWFF1WjJWMFFYUjBjbWxpZFhSbEtDZHBaQ2NwSUNZbUlIUm9hWE11YVdRZ1B5QnBibkIxZEM1blpYUkJkSFJ5YVdKMWRHVW9KMmxrSnlrZ09pQnBibkIxZEM1MllXeDFaU0E3WEc1Y2JpQWdJQ0FnSUNBZ2FXWW9kR2hwY3k1MllXeDFaUzVwYm1SbGVFOW1LR2x1Y0hWMExuWmhiSFZsS1NBK0lDMHhLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVjSFYwTG5ObGRFRjBkSEpwWW5WMFpTZ25ZMmhsWTJ0bFpDY3NJQ2RqYUdWamEyVmtKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVjSFYwTG1Ob1pXTnJaV1FnUFNCMGNuVmxYRzRnSUNBZ0lDQWdJSDFsYkhObGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1d2RYUXVZMmhsWTJ0bFpDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1d2RYUXVjbVZ0YjNabFFYUjBjbWxpZFhSbEtGd2lZMmhsWTJ0bFpGd2lLVnh1SUNBZ0lDQWdJQ0I5SUZ4dUlDQWdJSDBwTzF4dWZWeHVJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN08wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU1VFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVSQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkhRVHRCUVVOQk8wRkJRVUU3UVVGRlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVVkJPMEZCUlVFN1FVRkZRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZGUVR0QlFVZEJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJUa0U3UVVGRFFUdEJRVVJCTzBGQlQwRTdRVUZCUVR0QlFVTkJPMEZCVWtFN1FVRkRRVHRCUVVSQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlRVRTdRVUZEUVR0QlFWSkJPMEZCUTBFN1FVRkVRVHRCUVZGQk8wRkJRVUU3UVVGRFFUdEJRVlJCTzBGQlEwRTdRVUZFUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVU5Qk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRklRVHRCUVVOQk8wRkJSRUU3UVVGTFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlprRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkhRVHRCUVZkQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9GaWx0ZXIvSW5wdXRzL1JhZGlvLmpzXFxuJyl9LFwiLi9zcmMvRmlsdGVyL0lucHV0cy9SYW5nZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0ZpbHRlci9JbnB1dHMvUmFuZ2UuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2V2YWwoJ3ZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uL0hlbHBlcnMvQXJyYXkgKi8gXCIuL3NyYy9IZWxwZXJzL0FycmF5LmpzXCIpLFxcbiAgICBpbkFycmF5ID0gX3JlcXVpcmUuaW5BcnJheTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcXG4gIHJldHVybiBuZXcgUmFuZ2UoKTtcXG59O1xcblxcbmZ1bmN0aW9uIFJhbmdlKCkge1xcbiAgdGhpcy5uYW1lID0gZmFsc2U7XFxuICB0aGlzLmNvbXBhcmUgPSBmYWxzZTtcXG4gIHRoaXMudXJsX25hbWUgPSBmYWxzZTtcXG4gIHRoaXMubWluID0ge1xcbiAgICBkZWZhdWx0OiBmYWxzZSxcXG4gICAgdmFsdWU6IGZhbHNlLFxcbiAgICBuYW1lOiBmYWxzZSxcXG4gICAgbWluOiBmYWxzZVxcbiAgfTtcXG4gIHRoaXMubWF4ID0ge1xcbiAgICBkZWZhdWx0OiBmYWxzZSxcXG4gICAgdmFsdWU6IGZhbHNlLFxcbiAgICBuYW1lOiBmYWxzZSxcXG4gICAgbWF4OiBmYWxzZVxcbiAgfTtcXG4gIHRoaXMubXVsdGlwbGUgPSBmYWxzZTtcXG4gIHRoaXMub3BlcmF0b3IgPSBcIm9yXCI7XFxuICB0aGlzLnJlbGF0aW9uID0gXCJhbmRcIjtcXG59XFxuXFxuUmFuZ2UucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcXG4gIGRhdGEuaW5wdXRzID0gW107XFxuXFxuICBpZiAoIXRoaXMubXVsdGlwbGUpIHtcXG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVNaW4oZGF0YSk7XFxuICB9XFxuXFxuICBpZiAodGhpcy5tdWx0aXBsZSkge1xcbiAgICB2YXIgaXNNaW4gPSB0aGlzLnZhbGlkYXRlTWluKGRhdGEpO1xcbiAgICB2YXIgaXNNYXggPSB0aGlzLnZhbGlkYXRlTWF4KGRhdGEpO1xcbiAgICByZXR1cm4gaXNNaW4gJiYgaXNNYXg7XFxuICB9XFxufTtcXG5cXG5SYW5nZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcXG4gIHZhciBpc1ZhbGlkYXRlZDtcXG5cXG4gIGlmICghdGhpcy5tdWx0aXBsZSkge1xcbiAgICB2YXIgaW5wdXQgPSB0aGlzLm5hbWUgPyBvcHRpb25zLmVsLmZvcm1PYmoucXVlcnlTZWxlY3RvcihcIltuYW1lPVxcXFxcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiXFxcXFwiXVwiKSkgOiBvcHRpb25zLmVsLmZvcm1PYmoucXVlcnlTZWxlY3RvcihcIltuYW1lPVxcXFxcIlwiLmNvbmNhdCh0aGlzLm1pbi5uYW1lLCBcIlxcXFxcIl1cIikpO1xcbiAgICBpc1ZhbGlkYXRlZCA9IHRoaXMudXBkYXRlTWluKGlucHV0KTtcXG4gIH1cXG5cXG4gIGlmICh0aGlzLm11bHRpcGxlKSB7XFxuICAgIHZhciBpbnB1dE1pbiA9IG9wdGlvbnMuZWwuZm9ybU9iai5xdWVyeVNlbGVjdG9yKFwiW25hbWU9XFxcXFwiXCIuY29uY2F0KHRoaXMubWluLm5hbWUsIFwiXFxcXFwiXVwiKSk7XFxuICAgIHZhciBpbnB1dE1heCA9IG9wdGlvbnMuZWwuZm9ybU9iai5xdWVyeVNlbGVjdG9yKFwiW25hbWU9XFxcXFwiXCIuY29uY2F0KHRoaXMubWF4Lm5hbWUsIFwiXFxcXFwiXVwiKSk7XFxuICAgIHRoaXMudXBkYXRlTWluKGlucHV0TWluKTtcXG4gICAgdGhpcy51cGRhdGVNYXgoaW5wdXRNYXgpO1xcbiAgfVxcbn07XFxuXFxuUmFuZ2UucHJvdG90eXBlLnVwZGF0ZU1pbiA9IGZ1bmN0aW9uIChpbnB1dCkge1xcbiAgdGhpcy5taW4udmFsdWUgPSBpbnB1dC52YWx1ZTtcXG59O1xcblxcblJhbmdlLnByb3RvdHlwZS51cGRhdGVNYXggPSBmdW5jdGlvbiAoaW5wdXQpIHtcXG4gIHRoaXMubWF4LnZhbHVlID0gaW5wdXQudmFsdWU7XFxufTtcXG5cXG5SYW5nZS5wcm90b3R5cGUudmFsaWRhdGVNaW4gPSBmdW5jdGlvbiAoZGF0YSkge1xcbiAgdmFyIGlzVmFsaWRhdGVkID0gaW5BcnJheShkYXRhLCB0aGlzLmNvbXBhcmUsIHRoaXMubWluLnZhbHVlKTtcXG4gIHJldHVybiBOdW1iZXIoaXNWYWxpZGF0ZWQpID49IE51bWJlcih0aGlzLm1pbi52YWx1ZSk7XFxufTtcXG5cXG5SYW5nZS5wcm90b3R5cGUudmFsaWRhdGVNYXggPSBmdW5jdGlvbiAoZGF0YSkge1xcbiAgdmFyIGlzVmFsaWRhdGVkID0gaW5BcnJheShkYXRhLCB0aGlzLmNvbXBhcmUsIHRoaXMubWF4LnZhbHVlKTtcXG4gIHJldHVybiBOdW1iZXIoaXNWYWxpZGF0ZWQpIDw9IE51bWJlcih0aGlzLm1heC52YWx1ZSk7XFxufTtcXG5cXG5SYW5nZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMsIHZhbHVlcykge1xcbiAgdmFsdWVzID0gdmFsdWVzWzBdLnNwbGl0KFxcJy1cXCcpO1xcbiAgdmFyIGlucHV0TWluID0gdGhpcy5uYW1lID8gb3B0aW9ucy5mb3JtT2JqLnF1ZXJ5U2VsZWN0b3IoXCJbbmFtZT1cXFxcXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIlxcXFxcIl1cIikpIDogb3B0aW9ucy5mb3JtT2JqLnF1ZXJ5U2VsZWN0b3IoXCJbbmFtZT1cXFxcXCJcIi5jb25jYXQodGhpcy5taW4ubmFtZSwgXCJcXFxcXCJdXCIpKTtcXG4gIGlucHV0TWluLnNldEF0dHJpYnV0ZShcXCd2YWx1ZVxcJywgdmFsdWVzWzBdKTtcXG4gIHRoaXMubWluLnZhbHVlID0gdmFsdWVzWzBdO1xcbiAgdGhpcy5taW4ubWluID0gaW5wdXRNaW4uZ2V0QXR0cmlidXRlKFxcJ21pblxcJyk7XFxuICBpbnB1dE1pbi52YWx1ZSA9IHZhbHVlc1swXTtcXG5cXG4gIGlmICh2YWx1ZXNbMV0pIHtcXG4gICAgdmFyIGlucHV0TWF4ID0gb3B0aW9ucy5mb3JtT2JqLnF1ZXJ5U2VsZWN0b3IoXCJbbmFtZT1cXFxcXCJcIi5jb25jYXQodGhpcy5tYXgubmFtZSwgXCJcXFxcXCJdXCIpKTtcXG4gICAgaW5wdXRNYXguc2V0QXR0cmlidXRlKFxcJ3ZhbHVlXFwnLCB2YWx1ZXNbMV0pO1xcbiAgICB0aGlzLm1heC5tYXggPSBpbnB1dE1pbi5nZXRBdHRyaWJ1dGUoXFwnbWF4XFwnKTtcXG4gICAgdGhpcy5tYXgudmFsdWUgPSB2YWx1ZXNbMV07XFxuICAgIGlucHV0TWF4LnZhbHVlID0gdmFsdWVzWzFdO1xcbiAgfVxcbn07Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5emNtTXZSbWxzZEdWeUwwbHVjSFYwY3k5U1lXNW5aUzVxY3k1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDBGQ1F5OHVMM055WXk5R2FXeDBaWEl2U1c1d2RYUnpMMUpoYm1kbExtcHpQMkZoWXpjaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUhzZ2FXNUJjbkpoZVNCOUlDQTlJSEpsY1hWcGNtVWdLQ2N1TGk4dUxpOUlaV3h3WlhKekwwRnljbUY1SnlBcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJQ2dwSUQwK0lIc2djbVYwZFhKdUlHNWxkeUJTWVc1blpTZ3BJSDFjYmx4dVpuVnVZM1JwYjI0Z1VtRnVaMlVvS1h0Y2JpQWdJQ0IwYUdsekxtNWhiV1VnSUNBZ1BTQm1ZV3h6WlZ4dUlDQWdJSFJvYVhNdVkyOXRjR0Z5WlNBOUlHWmhiSE5sWEc0Z0lDQWdkR2hwY3k1MWNteGZibUZ0WlQwZ1ptRnNjMlZjYmlBZ0lDQjBhR2x6TG0xcGJpQTlJSHRjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ2JtRnRaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJRzFwYmpvZ1ptRnNjMlZjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTV0WVhnZ1BTQjdYRzRnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUc1aGJXVTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQnRZWGc2SUdaaGJITmxYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXViWFZzZEdsd2JHVTlJR1poYkhObFhHNGdJQ0FnZEdocGN5NXZjR1Z5WVhSdmNqMGdYQ0p2Y2x3aVhHNGdJQ0FnZEdocGN5NXlaV3hoZEdsdmJqMGdYQ0poYm1SY0lseHVYRzU5WEc1Y2JsSmhibWRsTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlNBOUlHWjFibU4wYVc5dUlDaGtZWFJoS1h0Y2JpQWdJQ0JrWVhSaExtbHVjSFYwY3lBOUlGdGRYRzRnSUNBZ2FXWW9JWFJvYVhNdWJYVnNkR2x3YkdVcElISmxkSFZ5YmlCMGFHbHpMblpoYkdsa1lYUmxUV2x1S0NCa1lYUmhJQ2s3WEc1Y2JpQWdJQ0JwWmloMGFHbHpMbTExYkhScGNHeGxLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2x6VFdsdUlEMGdkR2hwY3k1MllXeHBaR0YwWlUxcGJpZ2daR0YwWVNBcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCcGMwMWhlQ0E5SUhSb2FYTXVkbUZzYVdSaGRHVk5ZWGdvSUdSaGRHRWdLVHRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJwYzAxcGJpQW1KaUJwYzAxaGVGeHVJQ0FnSUgxY2JuMWNibHh1WEc1Y2JsSmhibWRsTG5CeWIzUnZkSGx3WlM1MWNHUmhkR1VnUFNCbWRXNWpkR2x2YmlodmNIUnBiMjV6S1h0Y2JpQWdJQ0JzWlhRZ2FYTldZV3hwWkdGMFpXUTdYRzVjYmlBZ0lDQnBaaWdoZEdocGN5NXRkV3gwYVhCc1pTbDdYRzRnSUNBZ0lDQWdJR052Ym5OMElHbHVjSFYwSUQwZ2RHaHBjeTV1WVcxbElEOGdiM0IwYVc5dWN5NWxiQzVtYjNKdFQySnFMbkYxWlhKNVUyVnNaV04wYjNJb1lGdHVZVzFsUFZ3aUpIdDBhR2x6TG01aGJXVjlYQ0pkWUNrZ09pQnZjSFJwYjI1ekxtVnNMbVp2Y20xUFltb3VjWFZsY25sVFpXeGxZM1J2Y2loZ1cyNWhiV1U5WENJa2UzUm9hWE11YldsdUxtNWhiV1Y5WENKZFlDbGNiaUFnSUNBZ0lDQWdhWE5XWVd4cFpHRjBaV1FnUFNCMGFHbHpMblZ3WkdGMFpVMXBiaWdnYVc1d2RYUWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaWgwYUdsekxtMTFiSFJwY0d4bEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHbHVjSFYwVFdsdUlEMGdiM0IwYVc5dWN5NWxiQzVtYjNKdFQySnFMbkYxWlhKNVUyVnNaV04wYjNJb1lGdHVZVzFsUFZ3aUpIdDBhR2x6TG0xcGJpNXVZVzFsZlZ3aVhXQXBYRzRnSUNBZ0lDQWdJR052Ym5OMElHbHVjSFYwVFdGNElEMGdiM0IwYVc5dWN5NWxiQzVtYjNKdFQySnFMbkYxWlhKNVUyVnNaV04wYjNJb1lGdHVZVzFsUFZ3aUpIdDBhR2x6TG0xaGVDNXVZVzFsZlZ3aVhXQXBYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWTmFXNG9JR2x1Y0hWMFRXbHVJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFRXRjRLQ0JwYm5CMWRFMWhlQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRnh1ZlZ4dVhHNVNZVzVuWlM1d2NtOTBiM1I1Y0dVdWRYQmtZWFJsVFdsdUlEMGdablZ1WTNScGIyNGdLQ0JwYm5CMWRDQXBlMXh1SUNBZ0lIUm9hWE11YldsdUxuWmhiSFZsSUQwZ2FXNXdkWFF1ZG1Gc2RXVmNibjFjYmxKaGJtZGxMbkJ5YjNSdmRIbHdaUzUxY0dSaGRHVk5ZWGdnUFNCbWRXNWpkR2x2YmlBb0lHbHVjSFYwSUNsN1hHNGdJQ0FnZEdocGN5NXRZWGd1ZG1Gc2RXVWdQU0JwYm5CMWRDNTJZV3gxWlZ4dWZWeHVYRzVTWVc1blpTNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVk5hVzRnUFNCbWRXNWpkR2x2YmlBb0lHUmhkR0VnS1h0Y2JpQWdJQ0JzWlhRZ2FYTldZV3hwWkdGMFpXUWdQU0JwYmtGeWNtRjVLR1JoZEdFc0lIUm9hWE11WTI5dGNHRnlaU3dnZEdocGN5NXRhVzR1ZG1Gc2RXVXBPMXh1SUNBZ0lISmxkSFZ5YmlCT2RXMWlaWElvYVhOV1lXeHBaR0YwWldRcElENDlJRTUxYldKbGNpaDBhR2x6TG0xcGJpNTJZV3gxWlNrN1hHNTlYRzVTWVc1blpTNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVk5ZWGdnUFNCbWRXNWpkR2x2YmlBb0lHUmhkR0VnS1h0Y2JpQWdJQ0JzWlhRZ2FYTldZV3hwWkdGMFpXUWdQU0JwYmtGeWNtRjVLR1JoZEdFc0lIUm9hWE11WTI5dGNHRnlaU3dnZEdocGN5NXRZWGd1ZG1Gc2RXVXBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlFNTFiV0psY2locGMxWmhiR2xrWVhSbFpDa2dQRDBnVG5WdFltVnlLSFJvYVhNdWJXRjRMblpoYkhWbEtUdGNibjFjYmx4dVVtRnVaMlV1Y0hKdmRHOTBlWEJsTG1OeVpXRjBaU0E5SUdaMWJtTjBhVzl1S0c5d2RHbHZibk1zSUhaaGJIVmxjeWw3WEc0Z0lDQWdYRzRnSUNBZ2RtRnNkV1Z6SUQwZ2RtRnNkV1Z6V3pCZExuTndiR2wwS0NjdEp5azdYRzRnSUNBZ1hHNGdJQ0FnWTI5dWMzUWdhVzV3ZFhSTmFXNGdQU0IwYUdsekxtNWhiV1VnUHlCdmNIUnBiMjV6TG1admNtMVBZbW91Y1hWbGNubFRaV3hsWTNSdmNpaGdXMjVoYldVOVhDSWtlM1JvYVhNdWJtRnRaWDFjSWwxZ0tTQTZJRzl3ZEdsdmJuTXVabTl5YlU5aWFpNXhkV1Z5ZVZObGJHVmpkRzl5S0dCYmJtRnRaVDFjSWlSN2RHaHBjeTV0YVc0dWJtRnRaWDFjSWwxZ0tWeHVJQ0FnSUNBZ0lGeHVJQ0FnSUdsdWNIVjBUV2x1TG5ObGRFRjBkSEpwWW5WMFpTZ25kbUZzZFdVbkxDQjJZV3gxWlhOYk1GMHBYRzRnSUNBZ2RHaHBjeTV0YVc0dWRtRnNkV1VnUFNCMllXeDFaWE5iTUYxY2JpQWdJQ0IwYUdsekxtMXBiaTV0YVc0Z1BTQnBibkIxZEUxcGJpNW5aWFJCZEhSeWFXSjFkR1VvSjIxcGJpY3BYRzRnSUNBZ2FXNXdkWFJOYVc0dWRtRnNkV1VnUFNCMllXeDFaWE5iTUYxY2JseHVJQ0FnSUdsbUtIWmhiSFZsYzFzeFhTbDdYRzRnSUNBZ0lDQWdJR052Ym5OMElHbHVjSFYwVFdGNElEMGdiM0IwYVc5dWN5NW1iM0p0VDJKcUxuRjFaWEo1VTJWc1pXTjBiM0lvWUZ0dVlXMWxQVndpSkh0MGFHbHpMbTFoZUM1dVlXMWxmVndpWFdBcFhHNGdJQ0FnSUNBZ0lHbHVjSFYwVFdGNExuTmxkRUYwZEhKcFluVjBaU2duZG1Gc2RXVW5MQ0IyWVd4MVpYTmJNVjBwWEc0Z0lDQWdJQ0FnSUhSb2FYTXViV0Y0TG0xaGVDQTlJR2x1Y0hWMFRXbHVMbWRsZEVGMGRISnBZblYwWlNnbmJXRjRKeWxjYmlBZ0lDQWdJQ0FnZEdocGN5NXRZWGd1ZG1Gc2RXVWdQU0IyWVd4MVpYTmJNVjFjYmlBZ0lDQWdJQ0FnYVc1d2RYUk5ZWGd1ZG1Gc2RXVWdQU0IyWVd4MVpYTmJNVjFjYmlBZ0lDQjlYRzU5SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVXBCTzBGQlRVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVwQk8wRkJUVUU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGSFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUjBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9zcmMvRmlsdGVyL0lucHV0cy9SYW5nZS5qc1xcbicpfSxcIi4vc3JjL0ZpbHRlci9JbnB1dHMvU2VhcmNoLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0ZpbHRlci9JbnB1dHMvU2VhcmNoLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbCgnZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cXG5cXG52YXIgRnVzZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGZ1c2UuanMgKi8gXCIuL25vZGVfbW9kdWxlcy9mdXNlLmpzL2Rpc3QvZnVzZS5qc1wiKTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcXG4gIHJldHVybiBuZXcgU2VhcmNoKCk7XFxufTtcXG5cXG5mdW5jdGlvbiBTZWFyY2goKSB7XFxuICB0aGlzLm5hbWUgPSBmYWxzZTtcXG4gIHRoaXMuY29tcGFyZSA9IGZhbHNlO1xcbiAgdGhpcy51cmxfbmFtZSA9IGZhbHNlO1xcbiAgdGhpcy5yZWxhdGlvbiA9IFwiYW5kXCI7XFxuICB0aGlzLnZhbHVlID0gXCJcIjtcXG4gIHRoaXMuaWQgPSB0cnVlO1xcbn1cXG5cXG5TZWFyY2gucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gKGRhdGFzKSB7XFxuICB2YXIgY29tcGFyZSA9IHR5cGVvZiB0aGlzLmNvbXBhcmUgPT09IFwic3RyaW5nXCIgPyBbdGhpcy5jb21wYXJlXSA6IHRoaXMuY29tcGFyZTtcXG4gIHZhciB2YWx1ZSA9IF90eXBlb2YodGhpcy52YWx1ZSkgPT09IFwib2JqZWN0XCIgPyB0aGlzLnZhbHVlWzBdIDogdGhpcy52YWx1ZTtcXG4gIHZhciBvcHRpb25zID0ge1xcbiAgICB0aHJlc2hvbGQ6IDAuNCxcXG4gICAga2V5czogY29tcGFyZSxcXG4gICAgZGlzdGFuY2U6IDEwMDAwXFxuICB9O1xcbiAgdmFyIGZ1c2UgPSBuZXcgRnVzZShkYXRhcywgb3B0aW9ucyk7XFxuICByZXR1cm4gdmFsdWUgPyBmdXNlLnNlYXJjaCh2YWx1ZSkgOiBkYXRhcztcXG59O1xcblxcblNlYXJjaC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcXG4gIC8vIEdldCBhbGwgaW5wdXRzIGZyb20gdGhpcyBuYW1lXFxuICB2YXIgaW5wdXQgPSBvcHRpb25zLmVsLmZvcm1PYmoucXVlcnlTZWxlY3RvcihcIltuYW1lPVxcXFxcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiXFxcXFwiXVwiKSk7XFxuXFxuICBpZiAoIWlucHV0KSB7XFxuICAgIHJldHVybjtcXG4gIH1cXG5cXG4gIGlucHV0LnNldEF0dHJpYnV0ZShcXCd2YWx1ZVxcJywgaW5wdXQudmFsdWUpOyAvLyBJbnNlcnQgdmFsdWUgaW4gaW5zdGFuY2VcXG5cXG4gIHRoaXMudmFsdWUgPSBpbnB1dC52YWx1ZTtcXG59O1xcblxcblNlYXJjaC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcXG4gIHZhciBpbnB1dCA9IG9wdGlvbnMuZm9ybU9iai5xdWVyeVNlbGVjdG9yKFwiW25hbWU9XFxcXFwiXCIuY29uY2F0KHRoaXMubmFtZSwgXCJcXFxcXCJdXCIpKTtcXG5cXG4gIGlmICghaW5wdXQpIHtcXG4gICAgcmV0dXJuO1xcbiAgfVxcblxcbiAgaW5wdXQuc2V0QXR0cmlidXRlKFxcJ3ZhbHVlXFwnLCB0aGlzLnZhbHVlKTsgLy8gSW5zZXJ0IHZhbHVlIGluIGluc3RhbmNlXFxuXFxuICBpbnB1dC52YWx1ZSA9IHRoaXMudmFsdWU7XFxufTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdlJtbHNkR1Z5TDBsdWNIVjBjeTlUWldGeVkyZ3Vhbk11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlCUWtNdkxpOXpjbU12Um1sc2RHVnlMMGx1Y0hWMGN5OVRaV0Z5WTJndWFuTS9Nekl4TXlKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnUm5WelpTQTlJSEpsY1hWcGNtVWdLQ2RtZFhObExtcHpKeUFwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBb0tTQTlQaUI3SUhKbGRIVnliaUJ1WlhjZ1UyVmhjbU5vS0NrZ2ZWeHVYRzVtZFc1amRHbHZiaUJUWldGeVkyZ29LWHRjYmlBZ0lDQjBhR2x6TG01aGJXVWdJQ0FnUFNCbVlXeHpaVHRjYmlBZ0lDQjBhR2x6TG1OdmJYQmhjbVVnUFNCbVlXeHpaVHRjYmlBZ0lDQjBhR2x6TG5WeWJGOXVZVzFsUFNCbVlXeHpaVHRjYmlBZ0lDQjBhR2x6TG5KbGJHRjBhVzl1UFNCY0ltRnVaRndpWEc0Z0lDQWdkR2hwY3k1MllXeDFaU0FnSUQwZ1hDSmNJanRjYmlBZ0lDQjBhR2x6TG1sa0lDQWdJQ0FnUFNCMGNuVmxYRzU5WEc1Y2JsTmxZWEpqYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdVZ1BTQm1kVzVqZEdsdmJpaGtZWFJoY3lsN1hHNWNiaUFnSUNCamIyNXpkQ0JqYjIxd1lYSmxJRDBnZEhsd1pXOW1JSFJvYVhNdVkyOXRjR0Z5WlNBOVBUMGdYQ0p6ZEhKcGJtZGNJaUEvSUZ0MGFHbHpMbU52YlhCaGNtVmRJRG9nZEdocGN5NWpiMjF3WVhKbFhHNGdJQ0FnWTI5dWMzUWdkbUZzZFdVZ1BTQjBlWEJsYjJZZ2RHaHBjeTUyWVd4MVpTQTlQVDBnWENKdlltcGxZM1JjSWlBL0lIUm9hWE11ZG1Gc2RXVmJNRjBnT2lCMGFHbHpMblpoYkhWbFhHNWNiaUFnSUNCMllYSWdiM0IwYVc5dWN5QTlJSHNnWEc0Z0lDQWdJQ0IwYUhKbGMyaHZiR1E2SURBdU5DeGNiaUFnSUNBZ0lHdGxlWE02SUdOdmJYQmhjbVVzWEc0Z0lDQWdJQ0JrYVhOMFlXNWpaVG9nTVRBd01EQXNYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQm1kWE5sSUQwZ2JtVjNJRVoxYzJVb1pHRjBZWE1zSUc5d2RHbHZibk1wWEc0Z0lDQWdjbVYwZFhKdUlIWmhiSFZsSUQ4Z1puVnpaUzV6WldGeVkyZ29kbUZzZFdVcElEb2daR0YwWVhOY2JuMWNibHh1WEc1VFpXRnlZMmd1Y0hKdmRHOTBlWEJsTG5Wd1pHRjBaU0E5SUdaMWJtTjBhVzl1S0c5d2RHbHZibk1wZTF4dUlDQWdJQzh2SUVkbGRDQmhiR3dnYVc1d2RYUnpJR1p5YjIwZ2RHaHBjeUJ1WVcxbFhHNGdJQ0FnWTI5dWMzUWdhVzV3ZFhRZ1BTQnZjSFJwYjI1ekxtVnNMbVp2Y20xUFltb3VjWFZsY25sVFpXeGxZM1J2Y2loZ1cyNWhiV1U5WENJa2UzUm9hWE11Ym1GdFpYMWNJbDFnS1Z4dUlDQWdJR2xtSUNnaGFXNXdkWFFwSUhKbGRIVnlibHh1SUNBZ0lHbHVjSFYwTG5ObGRFRjBkSEpwWW5WMFpTZ25kbUZzZFdVbkxDQnBibkIxZEM1MllXeDFaU2xjYmlBZ0lDQXZMeUJKYm5ObGNuUWdkbUZzZFdVZ2FXNGdhVzV6ZEdGdVkyVmNiaUFnSUNCMGFHbHpMblpoYkhWbElEMGdhVzV3ZFhRdWRtRnNkV1ZjYmx4dWZWeHVVMlZoY21Ob0xuQnliM1J2ZEhsd1pTNWpjbVZoZEdVZ1BTQm1kVzVqZEdsdmJpaHZjSFJwYjI1ektYdGNiaUFnSUNCamIyNXpkQ0JwYm5CMWRDQTlJRzl3ZEdsdmJuTXVabTl5YlU5aWFpNXhkV1Z5ZVZObGJHVmpkRzl5S0dCYmJtRnRaVDFjSWlSN2RHaHBjeTV1WVcxbGZWd2lYV0FwWEc0Z0lDQWdhV1lnS0NGcGJuQjFkQ2tnY21WMGRYSnVYRzRnSUNBZ2FXNXdkWFF1YzJWMFFYUjBjbWxpZFhSbEtDZDJZV3gxWlNjc0lIUm9hWE11ZG1Gc2RXVXBYRzRnSUNBZ0x5OGdTVzV6WlhKMElIWmhiSFZsSUdsdUlHbHVjM1JoYm1ObFhHNGdJQ0FnYVc1d2RYUXVkbUZzZFdVZ1BTQjBhR2x6TG5aaGJIVmxYRzU5WEc0aVhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRklRVHRCUVV0Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9GaWx0ZXIvSW5wdXRzL1NlYXJjaC5qc1xcbicpfSxcIi4vc3JjL0ZpbHRlci9JbnB1dHMvU2VsZWN0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0ZpbHRlci9JbnB1dHMvU2VsZWN0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbCgnZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XFxuXFxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cXG5cXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSB7IHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9IH1cXG5cXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9XFxuXFxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cXG5cXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi9IZWxwZXJzL0FycmF5ICovIFwiLi9zcmMvSGVscGVycy9BcnJheS5qc1wiKSxcXG4gICAgaW5BcnJheSA9IF9yZXF1aXJlLmluQXJyYXk7XFxuXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XFxuICByZXR1cm4gbmV3IFNlbGVjdCgpO1xcbn07XFxuXFxuZnVuY3Rpb24gU2VsZWN0KCkge1xcbiAgdGhpcy5uYW1lID0gZmFsc2U7XFxuICB0aGlzLmNvbXBhcmUgPSBmYWxzZTtcXG4gIHRoaXMudXJsX25hbWUgPSBmYWxzZTtcXG4gIHRoaXMubXVsdGlwbGUgPSBmYWxzZTtcXG4gIHRoaXMub3BlcmF0b3IgPSBcIm9yXCI7XFxuICB0aGlzLnJlbGF0aW9uID0gXCJhbmRcIjtcXG4gIHRoaXMudmFsdWUgPSBbXTtcXG4gIHRoaXMuaWQgPSB0cnVlO1xcbn1cXG5cXG5TZWxlY3QucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcXG4gIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICBpZiAodGhpcy52YWx1ZS5sZW5ndGggPT09IDAgfHwgdGhpcy52YWx1ZS5sZW5ndGggPT09IDEgJiYgdGhpcy52YWx1ZVswXSA9PT0gXCJcIikge1xcbiAgICByZXR1cm4gdHJ1ZTtcXG4gIH1cXG5cXG4gIHZhciBpc1ZhbGlkYXRlZCA9IGluQXJyYXkoZGF0YSwgdGhpcy5jb21wYXJlLCB0aGlzLnZhbHVlKTtcXG4gIGlzVmFsaWRhdGVkID0gX3R5cGVvZihpc1ZhbGlkYXRlZCkgIT0gXFwnb2JqZWN0XFwnID8gW2lzVmFsaWRhdGVkXSA6IGlzVmFsaWRhdGVkO1xcblxcbiAgaWYgKGlzVmFsaWRhdGVkKSB7XFxuICAgIGlzVmFsaWRhdGVkID0gaXNWYWxpZGF0ZWQuZmlsdGVyKGZ1bmN0aW9uICh2KSB7XFxuICAgICAgcmV0dXJuIF90aGlzLnZhbHVlLmluZGV4T2YoU3RyaW5nKHYpKSA+IC0xO1xcbiAgICB9KTtcXG4gICAgaXNWYWxpZGF0ZWQgPSBfdG9Db25zdW1hYmxlQXJyYXkobmV3IFNldChpc1ZhbGlkYXRlZCkpO1xcbiAgICBpc1ZhbGlkYXRlZCA9IHRoaXMub3BlcmF0b3IgIT09IFwiYW5kXCIgPyBpc1ZhbGlkYXRlZC5sZW5ndGggPiAwIDogaXNWYWxpZGF0ZWQubGVuZ3RoID09PSB0aGlzLnZhbHVlLmxlbmd0aDtcXG4gICAgcmV0dXJuIGlzVmFsaWRhdGVkO1xcbiAgfSBlbHNlIHJldHVybiBmYWxzZTtcXG59O1xcblxcblNlbGVjdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcXG4gIHZhciBfdGhpczIgPSB0aGlzO1xcblxcbiAgLy8gR2V0IGFsbCBpbnB1dHMgZnJvbSB0aGlzIG5hbWVcXG4gIHZhciBpbnB1dHMgPSBvcHRpb25zLmVsLmZvcm1PYmoucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPVxcXFxcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiXFxcXFwiXSBvcHRpb25cIikpOyAvLyBSZXR1cm4gdGhlIGNoZWNrZWQgaW5wdXRzXFxuXFxuICB2YXIgY2hlY2tlZCA9IF90b0NvbnN1bWFibGVBcnJheShpbnB1dHMpLmZpbHRlcihmdW5jdGlvbiAoaW5wdXQpIHtcXG4gICAgcmV0dXJuIGlucHV0LnNlbGVjdGVkO1xcbiAgfSk7IC8vIEluc2VydCB2YWx1ZSBpbiBpbnN0YW5jZVxcblxcblxcbiAgdmFyIF9hID0gX3RvQ29uc3VtYWJsZUFycmF5KGNoZWNrZWQpO1xcblxcbiAgdmFyIF9mID0gZnVuY3Rpb24gX2YoaW5wdXQpIHtcXG4gICAgcmV0dXJuIGlucHV0LnZhbHVlO1xcbiAgfTtcXG5cXG4gIHZhciBfciA9IFtdO1xcblxcbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xcbiAgICBfci5wdXNoKF9mKF9hW19pXSwgX2ksIF9hKSk7XFxuICB9XFxuXFxuICB0aGlzLnZhbHVlID0gX3I7XFxuXFxuICB2YXIgX2EyID0gX3RvQ29uc3VtYWJsZUFycmF5KGNoZWNrZWQpO1xcblxcbiAgdmFyIF9mMiA9IGZ1bmN0aW9uIF9mMihpbnB1dCkge1xcbiAgICByZXR1cm4gaW5wdXQuaGFzQXR0cmlidXRlKFxcJ2lkXFwnKSAmJiBfdGhpczIuaWQgPyBpbnB1dC5nZXRBdHRyaWJ1dGUoXFwnaWRcXCcpIDogaW5wdXQudmFsdWU7XFxuICB9O1xcblxcbiAgdmFyIF9yMiA9IFtdO1xcblxcbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgX2EyLmxlbmd0aDsgX2kyKyspIHtcXG4gICAgX3IyLnB1c2goX2YyKF9hMltfaTJdLCBfaTIsIF9hMikpO1xcbiAgfVxcblxcbiAgdGhpcy5uYW1lcyA9IF9yMjtcXG59O1xcblxcblNlbGVjdC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcXG4gIHZhciBfdGhpczMgPSB0aGlzO1xcblxcbiAgdmFyIHNlbGVjdCA9IG9wdGlvbnMuZm9ybU9iai5xdWVyeVNlbGVjdG9yKFwiW25hbWU9XFxcXFwiXCIuY29uY2F0KHRoaXMubmFtZSwgXCJcXFxcXCJdXCIpKTtcXG4gIHZhciBpbnB1dHMgPSBvcHRpb25zLmZvcm1PYmoucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPVxcXFxcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiXFxcXFwiXSBvcHRpb25cIikpO1xcblxcbiAgdmFyIGNoZWNrZWQgPSBfdG9Db25zdW1hYmxlQXJyYXkoaW5wdXRzKS5maWx0ZXIoZnVuY3Rpb24gKGlucHV0KSB7XFxuICAgIHZhciBhdHRyID0gX3RoaXMzLmlkID09PSB0cnVlICYmIGlucHV0LmdldEF0dHJpYnV0ZShcXCdpZFxcJykgPyBpbnB1dC5nZXRBdHRyaWJ1dGUoXFwnaWRcXCcpIDogaW5wdXQudmFsdWU7XFxuXFxuICAgIGlmIChfdGhpczMudmFsdWUuaW5kZXhPZihhdHRyKSA+IC0xKSB7XFxuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFxcJ3NlbGVjdGVkXFwnLCBcXCdzZWxlY3RlZFxcJyk7XFxuICAgICAgcmV0dXJuIGlucHV0O1xcbiAgICB9XFxuICB9KTtcXG5cXG4gIHZhciBfYTMgPSBfdG9Db25zdW1hYmxlQXJyYXkoY2hlY2tlZCk7XFxuXFxuICB2YXIgX2YzID0gZnVuY3Rpb24gX2YzKGlucHV0KSB7XFxuICAgIHJldHVybiBpbnB1dC52YWx1ZTtcXG4gIH07XFxuXFxuICB2YXIgX3IzID0gW107XFxuXFxuICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCBfYTMubGVuZ3RoOyBfaTMrKykge1xcbiAgICBfcjMucHVzaChfZjMoX2EzW19pM10sIF9pMywgX2EzKSk7XFxuICB9XFxuXFxuICB0aGlzLnZhbHVlID0gX3IzO1xcblxcbiAgdmFyIF9hNCA9IF90b0NvbnN1bWFibGVBcnJheShjaGVja2VkKTtcXG5cXG4gIHZhciBfZjQgPSBmdW5jdGlvbiBfZjQoaW5wdXQpIHtcXG4gICAgcmV0dXJuIGlucHV0LmdldEF0dHJpYnV0ZShcXCdpZFxcJykgPyBpbnB1dC5nZXRBdHRyaWJ1dGUoXFwnaWRcXCcpIDogaW5wdXQudmFsdWU7XFxuICB9O1xcblxcbiAgdmFyIF9yNCA9IFtdO1xcblxcbiAgZm9yICh2YXIgX2k0ID0gMDsgX2k0IDwgX2E0Lmxlbmd0aDsgX2k0KyspIHtcXG4gICAgX3I0LnB1c2goX2Y0KF9hNFtfaTRdLCBfaTQsIF9hNCkpO1xcbiAgfVxcblxcbiAgdGhpcy5uYW1lcyA9IF9yNDtcXG4gIHNlbGVjdC5zZWxlY3RlZE9wdGlvbnMgPSBjaGVja2VkO1xcbiAgc2VsZWN0LnNldEF0dHJpYnV0ZShcXCd2YWx1ZVxcJywgdGhpcy52YWx1ZS5qb2luKFxcJyZcXCcpKTtcXG59Oy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXpjbU12Um1sc2RHVnlMMGx1Y0hWMGN5OVRaV3hsWTNRdWFuTXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OUJRa012TGk5emNtTXZSbWxzZEdWeUwwbHVjSFYwY3k5VFpXeGxZM1F1YW5NL1pESmpZU0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdleUJwYmtGeWNtRjVJSDBnSUQwZ2NtVnhkV2x5WlNBb0p5NHVMeTR1TDBobGJIQmxjbk12UVhKeVlYa25JQ2s3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ0tDa2dQVDRnZXlCeVpYUjFjbTRnYm1WM0lGTmxiR1ZqZENncElIMWNibVoxYm1OMGFXOXVJRk5sYkdWamRDZ3BlMXh1SUNBZ0lIUm9hWE11Ym1GdFpTQWdJQ0E5SUdaaGJITmxYRzRnSUNBZ2RHaHBjeTVqYjIxd1lYSmxJRDBnWm1Gc2MyVmNiaUFnSUNCMGFHbHpMblZ5YkY5dVlXMWxQU0JtWVd4elpWeHVJQ0FnSUhSb2FYTXViWFZzZEdsd2JHVTlJR1poYkhObFhHNGdJQ0FnZEdocGN5NXZjR1Z5WVhSdmNqMGdYQ0p2Y2x3aVhHNGdJQ0FnZEdocGN5NXlaV3hoZEdsdmJqMGdYQ0poYm1SY0lseHVJQ0FnSUhSb2FYTXVkbUZzZFdVZ0lDQTlJRnRkWEc0Z0lDQWdkR2hwY3k1cFpDQWdJQ0FnSUQwZ2RISjFaVnh1ZlZ4dVhHNWNibE5sYkdWamRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVWdQU0JtZFc1amRHbHZiaWhrWVhSaEtYdGNiaUFnSUNCcFppQW9kR2hwY3k1MllXeDFaUzVzWlc1bmRHZ2dQVDA5SURBZ2ZId2dkR2hwY3k1MllXeDFaUzVzWlc1bmRHZ2dQVDA5SURFZ0ppWWdkR2hwY3k1MllXeDFaVnN3WFNBOVBUMGdYQ0pjSWlrZ2NtVjBkWEp1SUhSeWRXVTdYRzVjYmlBZ0lDQnNaWFFnYVhOV1lXeHBaR0YwWldRZ1BTQnBia0Z5Y21GNUtHUmhkR0VzSUhSb2FYTXVZMjl0Y0dGeVpTd2dkR2hwY3k1MllXeDFaU2s3WEc1Y2JpQWdJQ0JjYmlBZ0lDQnBjMVpoYkdsa1lYUmxaQ0E5SUhSNWNHVnZaaUJwYzFaaGJHbGtZWFJsWkNBaFBTQW5iMkpxWldOMEp5QS9JRnRwYzFaaGJHbGtZWFJsWkYwZ09pQnBjMVpoYkdsa1lYUmxaRnh1SUNBZ0lHbG1LQ0JwYzFaaGJHbGtZWFJsWkNBcElIdGNibHh1SUNBZ0lDQWdJQ0JwYzFaaGJHbGtZWFJsWkNBOUlHbHpWbUZzYVdSaGRHVmtMbVpwYkhSbGNpZ2dkaUE5UGlCMGFHbHpMblpoYkhWbExtbHVaR1Y0VDJZb0lGTjBjbWx1WnloMktTQXBJRDRnTFRFcE8xeHVJQ0FnSUNBZ0lDQnBjMVpoYkdsa1lYUmxaQ0E5SUZzdUxpNXVaWGNnVTJWMEtHbHpWbUZzYVdSaGRHVmtLVjA3WEc1Y2JpQWdJQ0FnSUNBZ2FYTldZV3hwWkdGMFpXUWdQU0IwYUdsekxtOXdaWEpoZEc5eUlDRTlQU0JjSW1GdVpGd2lJRDhnSUdselZtRnNhV1JoZEdWa0xteGxibWQwYUNBK0lEQWdPaUJwYzFaaGJHbGtZWFJsWkM1c1pXNW5kR2dnUFQwOUlIUm9hWE11ZG1Gc2RXVXViR1Z1WjNSb0lEdGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhWE5XWVd4cFpHRjBaV1E3WEc1Y2JpQWdJQ0I5SUdWc2MyVWdjbVYwZFhKdUlHWmhiSE5sTzF4dVhHNTlYRzVjYmxObGJHVmpkQzV3Y205MGIzUjVjR1V1ZFhCa1lYUmxJRDBnWm5WdVkzUnBiMjRvYjNCMGFXOXVjeWw3WEc0Z0lDQWdMeThnUjJWMElHRnNiQ0JwYm5CMWRITWdabkp2YlNCMGFHbHpJRzVoYldWY2JpQWdJQ0JqYjI1emRDQnBibkIxZEhNZ1BTQnZjSFJwYjI1ekxtVnNMbVp2Y20xUFltb3VjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaGdXMjVoYldVOVhDSWtlM1JvYVhNdWJtRnRaWDFjSWwwZ2IzQjBhVzl1WUNsY2JpQWdJQ0F2THlCU1pYUjFjbTRnZEdobElHTm9aV05yWldRZ2FXNXdkWFJ6WEc1Y2JpQWdJQ0JqYjI1emRDQmphR1ZqYTJWa0lEMGdXeTR1TG1sdWNIVjBjMTB1Wm1sc2RHVnlLQ0JwYm5CMWRDQTlQaUJwYm5CMWRDNXpaV3hsWTNSbFpDQXBPMXh1WEc0Z0lDQWdMeThnU1c1elpYSjBJSFpoYkhWbElHbHVJR2x1YzNSaGJtTmxYRzRnSUNBZ2RHaHBjeTUyWVd4MVpTQTlJRnN1TGk1amFHVmphMlZrWFM1dFlYQW9JR2x1Y0hWMElEMCtJR2x1Y0hWMExuWmhiSFZsSUNsY2JpQWdJQ0IwYUdsekxtNWhiV1Z6SUQwZ1d5NHVMbU5vWldOclpXUmRMbTFoY0NnZ2FXNXdkWFFnUFQ0Z2FXNXdkWFF1YUdGelFYUjBjbWxpZFhSbEtDZHBaQ2NwSUNZbUlIUm9hWE11YVdRZ1B5QnBibkIxZEM1blpYUkJkSFJ5YVdKMWRHVW9KMmxrSnlrZ09pQnBibkIxZEM1MllXeDFaU0FwTzF4dWZWeHVYRzVUWld4bFkzUXVjSEp2ZEc5MGVYQmxMbU55WldGMFpTQTlJR1oxYm1OMGFXOXVLRzl3ZEdsdmJuTXBlMXh1SUNBZ0lHTnZibk4wSUhObGJHVmpkQ0E5SUc5d2RHbHZibk11Wm05eWJVOWlhaTV4ZFdWeWVWTmxiR1ZqZEc5eUtHQmJibUZ0WlQxY0lpUjdkR2hwY3k1dVlXMWxmVndpWFdBcE8xeHVYRzRnSUNBZ1kyOXVjM1FnYVc1d2RYUnpJRDBnYjNCMGFXOXVjeTVtYjNKdFQySnFMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29ZRnR1WVcxbFBWd2lKSHQwYUdsekxtNWhiV1Y5WENKZElHOXdkR2x2Ym1BcFhHNGdJQ0FnWEc0Z0lDQWdZMjl1YzNRZ1kyaGxZMnRsWkNBOUlGc3VMaTVwYm5CMWRITmRMbVpwYkhSbGNpZ2dhVzV3ZFhRZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmhkSFJ5SUQwZ2RHaHBjeTVwWkNBOVBUMGdkSEoxWlNBbUppQnBibkIxZEM1blpYUkJkSFJ5YVdKMWRHVW9KMmxrSnlrZ1B5QnBibkIxZEM1blpYUkJkSFJ5YVdKMWRHVW9KMmxrSnlrZ09pQnBibkIxZEM1MllXeDFaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZG1Gc2RXVXVhVzVrWlhoUFppaGhkSFJ5S1NBK0lDMHhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEM1elpYUkJkSFJ5YVdKMWRHVW9KM05sYkdWamRHVmtKeXdnSjNObGJHVmpkR1ZrSnlsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnBibkIxZEZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJQ0FnZEdocGN5NTJZV3gxWlNBOUlGc3VMaTVqYUdWamEyVmtYUzV0WVhBb0lHbHVjSFYwSUQwK0lHbHVjSFYwTG5aaGJIVmxJQ2xjYmlBZ0lDQjBhR2x6TG01aGJXVnpJRDBnV3k0dUxtTm9aV05yWldSZExtMWhjQ2dnYVc1d2RYUWdQVDRnYVc1d2RYUXVaMlYwUVhSMGNtbGlkWFJsS0NkcFpDY3BJRDhnYVc1d2RYUXVaMlYwUVhSMGNtbGlkWFJsS0NkcFpDY3BJRG9nYVc1d2RYUXVkbUZzZFdVZ0tUdGNibHh1SUNBZ0lITmxiR1ZqZEM1elpXeGxZM1JsWkU5d2RHbHZibk1nUFNCamFHVmphMlZrWEc0Z0lDQWdYRzRnSUNBZ1hHNGdJQ0FnYzJWc1pXTjBMbk5sZEVGMGRISnBZblYwWlNnbmRtRnNkV1VuTENCMGFHbHpMblpoYkhWbExtcHZhVzRvSnlZbktTbGNibHh1ZlZ4dUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3TzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVWRCTzBGQlEwRTdRVUZCUVR0QlFVVkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJSVUU3UVVGRlFUdEJRVVZCTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRlFRVHRCUVVOQk8wRkJSRUU3UVVGUlFUdEJRVUZCTzBGQlEwRTdRVUZVUVR0QlFVTkJPMEZCUkVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGUFFUdEJRVU5CTzBGQlZFRTdRVUZEUVR0QlFVUkJPMEZCVTBFN1FVRkJRVHRCUVVOQk8wRkJWa0U3UVVGRFFUdEJRVVJCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCVVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCV2tFN1FVRkRRVHRCUVVSQk8wRkJXVUU3UVVGQlFUdEJRVU5CTzBGQllrRTdRVUZEUVR0QlFVUkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJWMEU3UVVGRFFUdEJRV0pCTzBGQlEwRTdRVUZFUVR0QlFXRkJPMEZCUVVFN1FVRkRRVHRCUVdSQk8wRkJRMEU3UVVGRVFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFWbEJPMEZCUlVFN1FVRkhRVHRCUVVWQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9GaWx0ZXIvSW5wdXRzL1NlbGVjdC5qc1xcbicpfSxcIi4vc3JjL0ZpbHRlci9PcHRpb25zL0ZhY2V0dGUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9GaWx0ZXIvT3B0aW9ucy9GYWNldHRlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9mdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtldmFsKCd2YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi9IZWxwZXJzL0FycmF5ICovIFwiLi9zcmMvSGVscGVycy9BcnJheS5qc1wiKSxcXG4gICAgaW5BcnJheSA9IF9yZXF1aXJlLmluQXJyYXk7XFxuXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XFxuICByZXR1cm4gbmV3IEZhY2V0dGUoKTtcXG59OyAvLyBUTyBETzpcXG5cXG5cXG5mdW5jdGlvbiBGYWNldHRlKCkge1xcbiAgdGhpcy5udW1iZXIgPSBmYWxzZTtcXG4gIHRoaXMudmlzaWJsZV9jbGFzcyA9IGZhbHNlO1xcbiAgdGhpcy5oaWRkZW5fY2xhc3MgPSBmYWxzZSwgdGhpcy5mYWNldHRlcyA9IFtdO1xcbiAgdGhpcy5pbmRleHMgPSBbXTtcXG59XFxuXFxuRmFjZXR0ZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChlbCkge1xcbiAgdmFyIF90aGlzID0gdGhpcztcXG5cXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGtleSkge1xcbiAgICB2YXIgbmFtZSA9IF90aGlzLmZhY2V0dGVzW2tleV0uY29tcGFyZTtcXG4gICAgX3RoaXMuZmFjZXR0ZXNba2V5XVtcXCd2YWx1ZXNcXCddID0gW107XFxuICAgIHZhciBfYSA9IGVsLmRhdGFzO1xcblxcbiAgICB2YXIgX2YgPSBmdW5jdGlvbiBfZihkKSB7XFxuICAgICAgdmFyIHJlc3VsdCA9IGluQXJyYXkoZCwgbmFtZSk7XFxuXFxuICAgICAgaWYgKF90aGlzLmZhY2V0dGVzW2tleV1bXFwndmFsdWVzXFwnXS5pbmRleE9mKHJlc3VsdCkgPT09IC0xKSB7XFxuICAgICAgICBfdGhpcy5mYWNldHRlc1trZXldW1xcJ3ZhbHVlc1xcJ10ucHVzaChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgfTtcXG5cXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xcbiAgICAgIF9mKF9hW19pXSwgX2ksIF9hKTtcXG4gICAgfVxcblxcbiAgICB1bmRlZmluZWQ7XFxuICB9O1xcblxcbiAgZm9yICh2YXIga2V5IGluIHRoaXMuZmFjZXR0ZXMpIHtcXG4gICAgX2xvb3Aoa2V5KTtcXG4gIH1cXG59O1xcblxcbkZhY2V0dGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChlbCkge1xcbiAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICB2YXIgX2EyID0gZWwuZGF0YXM7XFxuXFxuICB2YXIgX2YyID0gZnVuY3Rpb24gX2YyKGQpIHtcXG4gICAgaWYgKCFkLmhpZGUpIHtcXG4gICAgICByZXR1cm4gZDtcXG4gICAgfVxcbiAgfTtcXG5cXG4gIHZhciBfcjIgPSBbXTtcXG5cXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IF9hMi5sZW5ndGg7IF9pMisrKSB7XFxuICAgIF9yMi5wdXNoKF9mMihfYTJbX2kyXSwgX2kyLCBfYTIpKTtcXG4gIH1cXG5cXG4gIHZhciB2aXNpYmxlcyA9IF9yMjtcXG4gIHZpc2libGVzID0gdmlzaWJsZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7XFxuICAgIHJldHVybiBkO1xcbiAgfSk7XFxuXFxuICB2YXIgX2xvb3AyID0gZnVuY3Rpb24gX2xvb3AyKGtleSkge1xcbiAgICB2YXIgbmFtZSA9IF90aGlzMi5mYWNldHRlc1trZXldLmNvbXBhcmU7XFxuICAgIF90aGlzMi5pbmRleHNba2V5XSA9IFtdO1xcbiAgICB2YXIgX2EzID0gdmlzaWJsZXM7XFxuXFxuICAgIHZhciBfZjMgPSBmdW5jdGlvbiBfZjMoZCkge1xcbiAgICAgIHZhciByZXN1bHQgPSBpbkFycmF5KGQsIG5hbWUpO1xcblxcbiAgICAgIGlmIChfdGhpczIuaW5kZXhzW2tleV0uaW5kZXhPZihyZXN1bHQpID09PSAtMSkge1xcbiAgICAgICAgX3RoaXMyLmluZGV4c1trZXldLnB1c2gocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIH07XFxuXFxuICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IF9hMy5sZW5ndGg7IF9pMysrKSB7XFxuICAgICAgX2YzKF9hM1tfaTNdLCBfaTMsIF9hMyk7XFxuICAgIH1cXG5cXG4gICAgdW5kZWZpbmVkO1xcbiAgICB2YXIgX2E0ID0gX3RoaXMyLmZhY2V0dGVzW2tleV1bXFwndmFsdWVzXFwnXTtcXG5cXG4gICAgdmFyIF9mNCA9IGZ1bmN0aW9uIF9mNChyKSB7XFxuICAgICAgdmFyIGlzSW4gPSBfdGhpczIuaW5kZXhzW2tleV0uaW5kZXhPZihyKSA+IC0xO1xcbiAgICAgIHZhciBpbnB1dCA9IGVsLmZvcm1PYmoucXVlcnlTZWxlY3RvcihcIltuYW1lPVxcXFxcIlwiLmNvbmNhdChrZXksIFwiXFxcXFwiXSBbdmFsdWU9XFxcXFwiXCIpLmNvbmNhdChyLCBcIlxcXFxcIl1cIikpID8gZWwuZm9ybU9iai5xdWVyeVNlbGVjdG9yKFwiW25hbWU9XFxcXFwiXCIuY29uY2F0KGtleSwgXCJcXFxcXCJdIFt2YWx1ZT1cXFxcXCJcIikuY29uY2F0KHIsIFwiXFxcXFwiXVwiKSkgOiBlbC5mb3JtT2JqLnF1ZXJ5U2VsZWN0b3IoXCJbbmFtZT1cXFxcXCJcIi5jb25jYXQoa2V5LCBcIlxcXFxcIl1bdmFsdWU9XFxcXFwiXCIpLmNvbmNhdChyLCBcIlxcXFxcIl1cIikpO1xcblxcbiAgICAgIGlmIChpbnB1dCkge1xcbiAgICAgICAgaXNJbiA/IGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoXFwnbm9GYWNldHRlXFwnKSA6IGlucHV0LmNsYXNzTGlzdC5hZGQoXFwnbm9GYWNldHRlXFwnKTtcXG4gICAgICB9XFxuICAgIH07XFxuXFxuICAgIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IF9hNC5sZW5ndGg7IF9pNCsrKSB7XFxuICAgICAgX2Y0KF9hNFtfaTRdLCBfaTQsIF9hNCk7XFxuICAgIH1cXG5cXG4gICAgdW5kZWZpbmVkO1xcbiAgfTtcXG5cXG4gIGZvciAodmFyIGtleSBpbiB0aGlzLmZhY2V0dGVzKSB7XFxuICAgIF9sb29wMihrZXkpO1xcbiAgfVxcbn07XFxuXFxuRmFjZXR0ZS5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIChhcnIxLCBhcnIyKSB7XFxuICB2YXIgX3RoaXMzID0gdGhpcztcXG5cXG4gIGlmICghYXJyMSB8fCAhYXJyMikge1xcbiAgICByZXR1cm47XFxuICB9XFxuXFxuICB2YXIgcmVzdWx0O1xcbiAgdmFyIF9hNSA9IGFycjE7XFxuXFxuICB2YXIgX2Y1ID0gZnVuY3Rpb24gX2Y1KGUxLCBpKSB7XFxuICAgIHZhciBfYTYgPSBhcnIyO1xcblxcbiAgICB2YXIgX2Y2ID0gZnVuY3Rpb24gX2Y2KGUyKSB7XFxuICAgICAgaWYgKGUxLmxlbmd0aCA+IDEgJiYgZTIubGVuZ3RoKSB7XFxuICAgICAgICByZXN1bHQgPSBfdGhpczMuY29tcGFyZShlMSwgZTIpO1xcbiAgICAgIH0gZWxzZSBpZiAoZTEgIT09IGUyKSB7XFxuICAgICAgICByZXN1bHQgPSBmYWxzZTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcXG4gICAgICB9XFxuICAgIH07XFxuXFxuICAgIGZvciAodmFyIF9pNiA9IDA7IF9pNiA8IF9hNi5sZW5ndGg7IF9pNisrKSB7XFxuICAgICAgX2Y2KF9hNltfaTZdLCBfaTYsIF9hNik7XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcXG4gIH07XFxuXFxuICBmb3IgKHZhciBfaTUgPSAwOyBfaTUgPCBfYTUubGVuZ3RoOyBfaTUrKykge1xcbiAgICBfZjUoX2E1W19pNV0sIF9pNSwgX2E1KTtcXG4gIH1cXG5cXG4gIHVuZGVmaW5lZDtcXG4gIHJldHVybiByZXN1bHQ7XFxufTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdlJtbHNkR1Z5TDA5d2RHbHZibk12Um1GalpYUjBaUzVxY3k1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDBGQ1F5OHVMM055WXk5R2FXeDBaWEl2VDNCMGFXOXVjeTlHWVdObGRIUmxMbXB6UDJFd1ltTWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlIc2dhVzVCY25KaGVTQjlJQ0E5SUhKbGNYVnBjbVVnS0NjdUxpOHVMaTlJWld4d1pYSnpMMEZ5Y21GNUp5QXBPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNncElEMCtJSHNnY21WMGRYSnVJRzVsZHlCR1lXTmxkSFJsS0NrZ2ZWeHVMeThnVkU4Z1JFODZYRzVtZFc1amRHbHZiaUJHWVdObGRIUmxLQ2w3WEc0Z0lDQWdkR2hwY3k1dWRXMWlaWElnUFNCbVlXeHpaVnh1SUNBZ0lIUm9hWE11ZG1semFXSnNaVjlqYkdGemN5QTlJR1poYkhObFhHNGdJQ0FnZEdocGN5NW9hV1JrWlc1ZlkyeGhjM01nUFNCbVlXeHpaU3hjYmlBZ0lDQjBhR2x6TG1aaFkyVjBkR1Z6SUQwZ1cxMWNiaUFnSUNCMGFHbHpMbWx1WkdWNGN5QTlJRnRkTzF4dWZWeHVYRzVHWVdObGRIUmxMbkJ5YjNSdmRIbHdaUzVwYm1sMElEMGdablZ1WTNScGIyNG9aV3dwSUh0Y2JseHVJQ0FnSUdadmNpQW9ZMjl1YzNRZ2EyVjVJR2x1SUhSb2FYTXVabUZqWlhSMFpYTXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibUZ0WlNBOUlIUm9hWE11Wm1GalpYUjBaWE5iYTJWNVhTNWpiMjF3WVhKbE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVptRmpaWFIwWlhOYmEyVjVYVnNuZG1Gc2RXVnpKMTBnUFNCYlhWeHVYRzRnSUNBZ0lDQWdJR1ZzTG1SaGRHRnpMbVp2Y2tWaFkyZ29JQ2hrS1NBOVBpQjdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY21WemRXeDBJRDBnYVc1QmNuSmhlU2hrTENCdVlXMWxLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWW9kR2hwY3k1bVlXTmxkSFJsYzF0clpYbGRXeWQyWVd4MVpYTW5YUzVwYm1SbGVFOW1LSEpsYzNWc2RDa2dQVDA5SUMweEtTQjBhR2x6TG1aaFkyVjBkR1Z6VzJ0bGVWMWJKM1poYkhWbGN5ZGRMbkIxYzJnb2NtVnpkV3gwS1Z4dVhHNGdJQ0FnSUNBZ0lIMHBYRzVjYmlBZ0lDQjlJQ0FnSUNCY2JuMWNibHh1Um1GalpYUjBaUzV3Y205MGIzUjVjR1V1ZFhCa1lYUmxJRDBnSUdaMWJtTjBhVzl1S0dWc0tYdGNiaUFnSUNCc1pYUWdkbWx6YVdKc1pYTWdQU0JsYkM1a1lYUmhjeTV0WVhBb0lHUWdQVDU3SUdsbUtDRmtMbWhwWkdVcElISmxkSFZ5YmlCa2ZTQXBJQ0FnSUZ4dUlDQWdJSFpwYzJsaWJHVnpJRDBnZG1semFXSnNaWE11Wm1sc2RHVnlLQ0JrSUQwK0lHUWdLVnh1WEc0Z0lDQWdYRzRnSUNBZ1ptOXlJQ2hqYjI1emRDQnJaWGtnYVc0Z2RHaHBjeTVtWVdObGRIUmxjeWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J1WVcxbElEMGdkR2hwY3k1bVlXTmxkSFJsYzF0clpYbGRMbU52YlhCaGNtVTdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NXBibVJsZUhOYmEyVjVYU0E5SUZ0ZFhHNGdJQ0FnSUNBZ0lIWnBjMmxpYkdWekxtWnZja1ZoWTJnb0lDaGtLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnlaWE4xYkhRZ1BTQnBia0Z5Y21GNUtHUXNJRzVoYldVcFhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmloMGFHbHpMbWx1WkdWNGMxdHJaWGxkTG1sdVpHVjRUMllvY21WemRXeDBLU0E5UFQwZ0xURXBJSFJvYVhNdWFXNWtaWGh6VzJ0bGVWMHVjSFZ6YUNoeVpYTjFiSFFwWEc0Z0lDQWdJQ0FnSUgwcFhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1bVlXTmxkSFJsYzF0clpYbGRXeWQyWVd4MVpYTW5YUzVtYjNKRllXTm9LQ0J5SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR2x6U1c0Z1BTQjBhR2x6TG1sdVpHVjRjMXRyWlhsZExtbHVaR1Y0VDJZb2Npa2dQaUF0TVZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnBibkIxZENBOUlHVnNMbVp2Y20xUFltb3VjWFZsY25sVFpXeGxZM1J2Y2loZ1cyNWhiV1U5WENJa2UydGxlWDFjSWwwZ1czWmhiSFZsUFZ3aUpIdHlmVndpWFdBcElEOGdaV3d1Wm05eWJVOWlhaTV4ZFdWeWVWTmxiR1ZqZEc5eUtHQmJibUZ0WlQxY0lpUjdhMlY1ZlZ3aVhTQmJkbUZzZFdVOVhDSWtlM0o5WENKZFlDa2dPbVZzTG1admNtMVBZbW91Y1hWbGNubFRaV3hsWTNSdmNpaGdXMjVoYldVOVhDSWtlMnRsZVgxY0lsMWJkbUZzZFdVOVhDSWtlM0o5WENKZFlDbGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUtHbHVjSFYwS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGMwbHVJRDhnYVc1d2RYUXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25ibTlHWVdObGRIUmxKeWtnT2lCcGJuQjFkQzVqYkdGemMweHBjM1F1WVdSa0tDZHViMFpoWTJWMGRHVW5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnZlNBZ0lDQmNibHh1ZlZ4dVhHNUdZV05sZEhSbExuQnliM1J2ZEhsd1pTNWpiMjF3WVhKbElEMGdablZ1WTNScGIyNG9ZWEp5TVN4aGNuSXlLWHRjYmlBZ1hHNGdJRnh1SUNBZ0lHbG1LQ0ZoY25JeElDQjhmQ0FoWVhKeU1pa2djbVYwZFhKdVhHNGdJQ0FnWEc0Z0lDQWdJQ0FnSUd4bGRDQnlaWE4xYkhRN1hHNGdJQ0FnWEc0Z0lDQWdZWEp5TVM1bWIzSkZZV05vS0NobE1TeHBLVDArWVhKeU1pNW1iM0pGWVdOb0tHVXlQVDU3WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvWlRFdWJHVnVaM1JvSUQ0Z01TQW1KaUJsTWk1c1pXNW5kR2dwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUhSb2FYTXVZMjl0Y0dGeVpTaGxNU3hsTWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5Wld4elpTQnBaaWhsTVNBaFBUMGdaVElnS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCbVlXeHpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZXVnNjMlY3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBJRDBnZEhKMVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNsY2JpQWdJQ0JjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwWEc0Z0lDQWdJQ0FnWEc1Y2JpQWdmU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJSRUU3UVVGSFFUdEJRVVZCTzBGQlRFRTdRVUZEUVR0QlFVUkJPMEZCVTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVVZCTzBGQlEwRTdRVUZpUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVUxQk8wRkJVRUU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZaUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRVFUdEJRVU5CTzBGQlJFRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJSa0U3UVVGRFFUdEJRVVJCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVWhCTzBGQlRVRTdRVUZGUVR0QlFWSkJPMEZCUTBFN1FVRkVRVHRCUVZWQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCWWtFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGUlFUdEJRVlJCTzBGQlEwRTdRVUZFUVR0QlFXVkJPMEZCUlVFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUYyUWtFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGaFFUdEJRV1JCTzBGQlEwRTdRVUZKUVR0QlFVRkJPMEZCYTBKQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVVkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGTVFUdEJRVU5CTzBGQlJFRTdRVUZQUVR0QlFVTkJPMEZCUkVFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRldRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVVJCTzBGQlFVRTdRVUZEUVR0QlFWSkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJUVUU3UVVGWlFUdEJRVWRCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vc3JjL0ZpbHRlci9PcHRpb25zL0ZhY2V0dGUuanNcXG4nKX0sXCIuL3NyYy9GaWx0ZXIvT3B0aW9ucy9Mb2FkTW9yZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9GaWx0ZXIvT3B0aW9ucy9Mb2FkTW9yZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2V2YWwoXCJmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cXG5cXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXFxcIik7IH1cXG5cXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcXFwiW29iamVjdCBBcmd1bWVudHNdXFxcIikgeyByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfSB9XFxuXFxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfVxcblxcbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uL0hlbHBlcnMvQXJyYXkgKi8gXFxcIi4vc3JjL0hlbHBlcnMvQXJyYXkuanNcXFwiKSxcXG4gICAgaW5BcnJheSA9IF9yZXF1aXJlLmluQXJyYXk7XFxuXFxudmFyIF9yZXF1aXJlMiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uL0hlbHBlcnMvRmV0Y2ggKi8gXFxcIi4vc3JjL0hlbHBlcnMvRmV0Y2guanNcXFwiKSxcXG4gICAgRmV0Y2ggPSBfcmVxdWlyZTIuRmV0Y2g7XFxuXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XFxuICByZXR1cm4gbmV3IExvYWRNb3JlKCk7XFxufTtcXG5cXG5mdW5jdGlvbiBMb2FkTW9yZSgpIHtcXG4gIHRoaXMudXJsID0ge1xcbiAgICBwYXJhbXM6ICcnLFxcbiAgICBhZGQ6IDBcXG4gIH07XFxuICB0aGlzLmxpbWl0ID0gZmFsc2U7XFxuICB0aGlzLm51bWJlciA9IGZhbHNlO1xcbiAgdGhpcy5hY3Rpb24gPSAnJztcXG4gIHRoaXMudGhyZXNvbGQgPSAnJztcXG4gIHRoaXMudGFyZ2V0ID0gJyc7XFxuICB0aGlzLnNlYXJjaCA9ICcnO1xcbiAgdGhpcy5jYW5VcGRhdGUgPSB0cnVlO1xcbiAgdGhpcy5vblN0YXJ0ID0gZmFsc2U7XFxuICB0aGlzLm9uQ29tcGxldGUgPSBmYWxzZTtcXG59XFxuXFxuTG9hZE1vcmUucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoZWwpIHtcXG4gIGlmICh0aGlzLmFjdGlvbiA9PT0gJ2NsaWNrJykge1xcbiAgICB0aGlzLmluaXRDbGljayhlbCk7XFxuICB9IGVsc2UgaWYgKHRoaXMuYWN0aW9uID09PSAnc2Nyb2xsJykge1xcbiAgICB0aGlzLmluaXRTY3JvbGwoZWwpO1xcbiAgfVxcbn07XFxuXFxuTG9hZE1vcmUucHJvdG90eXBlLmluaXRDbGljayA9IGZ1bmN0aW9uIChlbCkge1xcbiAgdmFyIF90aGlzID0gdGhpcztcXG5cXG4gIHRoaXMudGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnRhcmdldCk7XFxuICB0aGlzLnNlYXJjaCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoZWwub3B0aW9ucy51cmwpO1xcbiAgdGhpcy50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xcbiAgICBpZiAoX3RoaXMuY2FuVXBkYXRlKSB7XFxuICAgICAgX3RoaXMudXBkYXRlKGVsKTtcXG4gICAgfVxcbiAgfSk7XFxufTtcXG5cXG5Mb2FkTW9yZS5wcm90b3R5cGUuaW5pdFNjcm9sbCA9IGZ1bmN0aW9uIChlbCkge1xcbiAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICB0aGlzLnRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy50YXJnZXQpO1xcbiAgdGhpcy5zZWFyY2ggPSBuZXcgVVJMU2VhcmNoUGFyYW1zKGVsLm9wdGlvbnMudXJsKTtcXG4gIHZhciBvYnNlcnZlcjtcXG4gIHZhciBvcHRpb25zID0ge1xcbiAgICByb290TWFyZ2luOiBcXFwiXFxcIi5jb25jYXQodGhpcy50aHJlc29sZCwgXFxcInB4XFxcIilcXG4gIH07XFxuXFxuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayhlbnRyaWVzLCBvYnNlcnZlcikge1xcbiAgICB2YXIgX2EgPSBlbnRyaWVzO1xcblxcbiAgICB2YXIgX2YgPSBmdW5jdGlvbiBfZihlbnRyeSkge1xcbiAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZyAmJiBfdGhpczIuY2FuVXBkYXRlKSB7XFxuICAgICAgICBfdGhpczIudXBkYXRlKGVsKTtcXG4gICAgICB9XFxuICAgIH07XFxuXFxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcXG4gICAgICBfZihfYVtfaV0sIF9pLCBfYSk7XFxuICAgIH1cXG5cXG4gICAgdW5kZWZpbmVkO1xcbiAgfTtcXG5cXG4gIG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGNhbGxiYWNrLCBvcHRpb25zKTtcXG4gIG9ic2VydmVyLm9ic2VydmUodGhpcy50YXJnZXQpO1xcbn07XFxuXFxuTG9hZE1vcmUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChlbCkge1xcbiAgdmFyIF90aGlzMyA9IHRoaXM7XFxuXFxuICB2YXIgbnVtYmVyID0gdGhpcy5zZWFyY2guZ2V0KHRoaXMudXJsLnBhcmFtcyk7XFxuICB2YXIgbmV3TnVtYmVyID0gTnVtYmVyKG51bWJlcikgKyBOdW1iZXIodGhpcy51cmwuYWRkKTtcXG4gIHRoaXMuc2VhcmNoLnNldCh0aGlzLnVybC5wYXJhbXMsIG5ld051bWJlcik7XFxuICBlbC5vcHRpb25zLnVybCA9IGRlY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodGhpcy5zZWFyY2gudG9TdHJpbmcoKSkpO1xcbiAgdmFyIHN0YXJ0ID0gdGhpcy5vblN0YXJ0O1xcbiAgdmFyIGdldGRhdGFzID0gZmV0Y2goZWwub3B0aW9ucy51cmwsIGVsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xcbiAgfSkudGhlbihmdW5jdGlvbiAoanNvbikge1xcbiAgICBfdGhpczMuRmV0Y2gobnVsbCwganNvbiwgZWwpO1xcbiAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XFxuICAgIHJldHVybiBfdGhpczMuRmV0Y2goZXJyb3IsIG51bGwpO1xcbiAgfSk7XFxuICB2YXIgY29tcGxldGUgPSB0aGlzLm9uQ29tcGxldGU7XFxuXFxuICBpZiAoc3RhcnQpIHtcXG4gICAgc3RhcnQoKTtcXG4gIH1cXG5cXG4gIFByb21pc2UuYWxsKFtzdGFydF0pLnRoZW4oZnVuY3Rpb24gKGdldGRhdGFzKSB7XFxuICAgIHJldHVybiBnZXRkYXRhcztcXG4gIH0pO1xcblxcbiAgaWYgKGNvbXBsZXRlKSB7XFxuICAgIFByb21pc2UuYWxsKFtzdGFydCwgZ2V0ZGF0YXNdKS50aGVuKGZ1bmN0aW9uICgpIHtcXG4gICAgICByZXR1cm4gY29tcGxldGUoKTtcXG4gICAgfSk7XFxuICB9XFxufTtcXG5cXG5Mb2FkTW9yZS5wcm90b3R5cGUuRmV0Y2ggPSBmdW5jdGlvbiAoZXJyb3IsIHN1Y2Nlc3MsIGVsKSB7XFxuICBpZiAoZXJyb3IpIHtcXG4gICAgY29uc29sZS5sb2coZXJyb3IpO1xcbiAgfSBlbHNlIHtcXG4gICAgdGhpcy5kYXRhcyA9IHN1Y2Nlc3M7XFxuICAgIHRoaXMucmVzdWx0cyA9IGVsLnJlc3VsdHM7XFxuXFxuICAgIGlmIChlbC5yZXN1bHRzLnBhdGgpIHtcXG4gICAgICB0aGlzLmRhdGFzID0gaW5BcnJheSh0aGlzLmRhdGFzLCBlbC5yZXN1bHRzLnBhdGgpO1xcbiAgICB9XFxuXFxuICAgIGlmIChlbC5yZXN1bHRzLnRlbXBsYXRlKSB7XFxuICAgICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsLnJlc3VsdHMuY29udGFpbmVyKTtcXG4gICAgfVxcblxcbiAgICB2YXIgbmV3RGF0YXMgPSBlbC5hbGxkYXRhcy5maWx0ZXJlZCh0aGlzLmRhdGFzLCBlbCk7XFxuICAgIGVsLmRhdGFzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShlbC5kYXRhcyksIF90b0NvbnN1bWFibGVBcnJheShuZXdEYXRhcykpO1xcbiAgICB0aGlzLm51bWJlciA9IGVsLmRhdGFzLmxlbmd0aDtcXG5cXG4gICAgaWYgKHRoaXMubGltaXQgJiYgdGhpcy5udW1iZXIpIHtcXG4gICAgICB0aGlzLnVybC5hZGQgPSB0aGlzLmxpbWl0IC0gdGhpcy5udW1iZXIgPiB0aGlzLnVybC5hZGQgPyB0aGlzLnVybC5hZGQgOiB0aGlzLmxpbWl0IC0gdGhpcy5udW1iZXI7XFxuICAgICAgdGhpcy5jYW5VcGRhdGUgPSB0aGlzLnVybC5hZGQgPiAwID8gdHJ1ZSA6IGZhbHNlO1xcbiAgICB9XFxuXFxuICAgIGlmICghdGhpcy5jYW5VcGRhdGUpIHtcXG4gICAgICB0aGlzLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdhYmMtbGltaXRlZCcpO1xcbiAgICB9XFxuXFxuICAgIGVsLmZvcm0uZm4uZG8oKTtcXG5cXG4gICAgaWYgKGVsLmRlYnVnKSB7XFxuICAgICAgY29uc29sZS5pbmZvKGVsLmRhdGFzLmxlbmd0aCArIFxcXCIgZGF0YXMgbG9hZGVkXFxcIik7XFxuICAgIH1cXG4gIH1cXG59Oy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXpjbU12Um1sc2RHVnlMMDl3ZEdsdmJuTXZURzloWkUxdmNtVXVhbk11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlCUWtNdkxpOXpjbU12Um1sc2RHVnlMMDl3ZEdsdmJuTXZURzloWkUxdmNtVXVhbk0vWVdNellTSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ2V5QnBia0Z5Y21GNUlIMGdJRDBnY21WeGRXbHlaU0FvSnk0dUx5NHVMMGhsYkhCbGNuTXZRWEp5WVhrbklDazdYRzUyWVhJZ2UwWmxkR05vZlNBOUlISmxjWFZwY21Vb0lDY3VMaTh1TGk5SVpXeHdaWEp6TDBabGRHTm9KeUFwWEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ0tDa2dQVDRnZXlCeVpYUjFjbTRnYm1WM0lFeHZZV1JOYjNKbEtDa2dmVnh1WEc1bWRXNWpkR2x2YmlCTWIyRmtUVzl5WlNncGUxeHVJQ0FnSUhSb2FYTXVkWEpzSUQwZ0lIdGNiaUFnSUNBZ0lDQWdjR0Z5WVcxeklEb2dKeWNzWEc0Z0lDQWdJQ0FnSUdGa1pDQTZJREFzWEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11YkdsdGFYUWdQU0JtWVd4elpWeHVJQ0FnSUhSb2FYTXViblZ0WW1WeUlEMGdabUZzYzJWY2JseHVJQ0FnSUhSb2FYTXVZV04wYVc5dUlEMGdKeWRjYmlBZ0lDQjBhR2x6TG5Sb2NtVnpiMnhrSUQwZ0p5ZGNiaUFnSUNCMGFHbHpMblJoY21kbGRDQTlJQ2NuWEc0Z0lDQWdkR2hwY3k1elpXRnlZMmdnUFNBbkoxeHVJQ0FnSUhSb2FYTXVZMkZ1VlhCa1lYUmxJRDBnZEhKMVpWeHVYRzRnSUNBZ2RHaHBjeTV2YmxOMFlYSjBJRDBnWm1Gc2MyVmNiaUFnSUNCMGFHbHpMbTl1UTI5dGNHeGxkR1VnUFNCbVlXeHpaVnh1ZlZ4dVhHNU1iMkZrVFc5eVpTNXdjbTkwYjNSNWNHVXVhVzVwZENBOUlHWjFibU4wYVc5dUtHVnNLWHRjYmlBZ0lDQnBaaWgwYUdsekxtRmpkR2x2YmlBOVBUMGdKMk5zYVdOckp5a2dkR2hwY3k1cGJtbDBRMnhwWTJzb1pXd3BYRzRnSUNBZ1pXeHpaU0JwWmloMGFHbHpMbUZqZEdsdmJpQTlQVDBnSjNOamNtOXNiQ2NwSUhSb2FYTXVhVzVwZEZOamNtOXNiQ2hsYkNsY2JpQWdJQ0JjYm4xY2JreHZZV1JOYjNKbExuQnliM1J2ZEhsd1pTNXBibWwwUTJ4cFkyc2dQU0JtZFc1amRHbHZiaWhsYkNsN1hHNGdJQ0FnZEdocGN5NTBZWEpuWlhRZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0hSb2FYTXVkR0Z5WjJWMEtWeHVJQ0FnSUhSb2FYTXVjMlZoY21Ob0lEMGdibVYzSUZWU1RGTmxZWEpqYUZCaGNtRnRjeWhsYkM1dmNIUnBiMjV6TG5WeWJDbGNiaUFnSUNCMGFHbHpMblJoY21kbGRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lHVWdQVDRnZTF4dUlDQWdJQ0FnSUNCcFppaDBhR2x6TG1OaGJsVndaR0YwWlNrZ2RHaHBjeTUxY0dSaGRHVW9aV3dwTzF4dUlDQWdJSDBwWEc1OVhHNU1iMkZrVFc5eVpTNXdjbTkwYjNSNWNHVXVhVzVwZEZOamNtOXNiQ0E5SUdaMWJtTjBhVzl1S0dWc0tYdGNiaUFnSUNCMGFHbHpMblJoY21kbGRDQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb2RHaHBjeTUwWVhKblpYUXBYRzRnSUNBZ2RHaHBjeTV6WldGeVkyZ2dQU0J1WlhjZ1ZWSk1VMlZoY21Ob1VHRnlZVzF6S0dWc0xtOXdkR2x2Ym5NdWRYSnNLVnh1WEc0Z0lDQWdiR1YwSUc5aWMyVnlkbVZ5TzF4dVhHNGdJQ0FnZG1GeUlHOXdkR2x2Ym5NZ1BTQjdYRzRnSUNBZ0lDQWdJSEp2YjNSTllYSm5hVzRnT2lCZ0pIdDBhR2x6TG5Sb2NtVnpiMnhrZlhCNFlGeHVJQ0FnSUgwN1hHNWNiaUFnSUNCamIyNXpkQ0JqWVd4c1ltRmpheUE5SUNobGJuUnlhV1Z6TENCdlluTmxjblpsY2lrZ1BUNGdleUJjYmlBZ0lDQWdJQ0FnWlc1MGNtbGxjeTVtYjNKRllXTm9LR1Z1ZEhKNUlEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1LR1Z1ZEhKNUxtbHpTVzUwWlhKelpXTjBhVzVuSUNZbUlIUm9hWE11WTJGdVZYQmtZWFJsS1NCMGFHbHpMblZ3WkdGMFpTaGxiQ2s3SUZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOU8xeHVJQ0FnSUc5aWMyVnlkbVZ5SUQwZ2JtVjNJRWx1ZEdWeWMyVmpkR2x2Yms5aWMyVnlkbVZ5S0dOaGJHeGlZV05yTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0J2WW5ObGNuWmxjaTV2WW5ObGNuWmxLSFJvYVhNdWRHRnlaMlYwS1R0Y2JuMWNia3h2WVdSTmIzSmxMbkJ5YjNSdmRIbHdaUzUxY0dSaGRHVWdQU0JtZFc1amRHbHZiaWhsYkNsN1hHNWNiaUFnSUNCamIyNXpkQ0J1ZFcxaVpYSWdQU0IwYUdsekxuTmxZWEpqYUM1blpYUW9kR2hwY3k1MWNtd3VjR0Z5WVcxektUdGNiaUFnSUNCamIyNXpkQ0J1WlhkT2RXMWlaWElnUFNCT2RXMWlaWElvYm5WdFltVnlLU0FySUU1MWJXSmxjaWgwYUdsekxuVnliQzVoWkdRcFhHNGdJQ0FnZEdocGN5NXpaV0Z5WTJndWMyVjBLSFJvYVhNdWRYSnNMbkJoY21GdGN5d2dibVYzVG5WdFltVnlLVHRjYmx4dUlDQWdJR1ZzTG05d2RHbHZibk11ZFhKc0lEMGdaR1ZqYjJSbFZWSkpRMjl0Y0c5dVpXNTBLR1JsWTI5a1pWVlNTVU52YlhCdmJtVnVkQ2dnZEdocGN5NXpaV0Z5WTJndWRHOVRkSEpwYm1jb0tTQXBLVHRjYmlBZ0lDQmNiaUFnSUNCY2JpQWdJQ0JqYjI1emRDQnpkR0Z5ZENBOUlIUm9hWE11YjI1VGRHRnlkRHRjYmlBZ0lDQmpiMjV6ZENCblpYUmtZWFJoY3lBOUlDQm1aWFJqYUNobGJDNXZjSFJwYjI1ekxuVnliQ3dnWld3cElDQmNiaUFnSUNBZ0lDQWdMblJvWlc0b0lISmxjM0J2Ym5ObElEMCtJSEpsYzNCdmJuTmxMbXB6YjI0b0tTQXBYRzRnSUNBZ0lDQWdJQzUwYUdWdUtDQnFjMjl1SUQwK0lIc2dkR2hwY3k1R1pYUmphQ2h1ZFd4c0xDQnFjMjl1TENCbGJDa2dJSDBwWEc0Z0lDQWdJQ0FnSUM1allYUmphQ2hsY25KdmNpQTlQaUIwYUdsekxrWmxkR05vS0dWeWNtOXlMQ0J1ZFd4c0tTbGNiaUFnSUNCamIyNXpkQ0JqYjIxd2JHVjBaU0E5SUhSb2FYTXViMjVEYjIxd2JHVjBaVHRjYmlBZ0lDQmNiaUFnSUNCcFppaHpkR0Z5ZENrZ2MzUmhjblFvS1R0Y2JpQWdJQ0JRY205dGFYTmxMbUZzYkNoYmMzUmhjblJkS1M1MGFHVnVLQ0FvWjJWMFpHRjBZWE1wSUQwK0lHZGxkR1JoZEdGektUdGNiaUFnSUNCcFppaGpiMjF3YkdWMFpTa2dVSEp2YldselpTNWhiR3dvVzNOMFlYSjBMQ0JuWlhSa1lYUmhjMTBwTG5Sb1pXNG9JQ2dwSUQwK0lHTnZiWEJzWlhSbEtDa2dLVHRjYmlBZ0lDQmNibjFjYmx4dVRHOWhaRTF2Y21VdWNISnZkRzkwZVhCbExrWmxkR05vSUQwZ1puVnVZM1JwYjI0b1pYSnliM0lzSUhOMVkyTmxjM01zSUdWc0tYdGNiaUFnSUNBZ0lDQWdhV1lvWlhKeWIzSXBJR052Ym5OdmJHVXViRzluS0dWeWNtOXlLVHRjYmlBZ0lDQWdJQ0FnWld4elpTQjdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0Z6SUQwZ2MzVmpZMlZ6Y3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVnpkV3gwY3lBOUlHVnNMbkpsYzNWc2RITmNiaUFnSUNBZ0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvSUdWc0xuSmxjM1ZzZEhNdWNHRjBhQ0FwSUhSb2FYTXVaR0YwWVhNZ1BTQnBia0Z5Y21GNUtIUm9hWE11WkdGMFlYTXNJR1ZzTG5KbGMzVnNkSE11Y0dGMGFDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppZ2daV3d1Y21WemRXeDBjeTUwWlcxd2JHRjBaU0FwSUhSb2FYTXVZMjl1ZEdGcGJtVnlJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaGxiQzV5WlhOMWJIUnpMbU52Ym5SaGFXNWxjaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdibVYzUkdGMFlYTWdQU0JsYkM1aGJHeGtZWFJoY3k1bWFXeDBaWEpsWkNoMGFHbHpMbVJoZEdGekxDQmxiQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiQzVrWVhSaGN5QTlJRnN1TGk1bGJDNWtZWFJoY3l3Z0xpNHVibVYzUkdGMFlYTmRYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXVkVzFpWlhJZ1BTQmxiQzVrWVhSaGN5NXNaVzVuZEdoY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb2RHaHBjeTVzYVcxcGRDQW1KaUIwYUdsekxtNTFiV0psY2lsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUxY213dVlXUmtJRDBnZEdocGN5NXNhVzFwZENBdElIUm9hWE11Ym5WdFltVnlJRDRnZEdocGN5NTFjbXd1WVdSa0lEOGdkR2hwY3k1MWNtd3VZV1JrSURvZ2RHaHBjeTVzYVcxcGRDQXRJSFJvYVhNdWJuVnRZbVZ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpZVzVWY0dSaGRHVWdQU0IwYUdsekxuVnliQzVoWkdRZ1BpQXdJRDhnZEhKMVpTQTZJR1poYkhObElGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlnaGRHaHBjeTVqWVc1VmNHUmhkR1VwSUNCMGFHbHpMblJoY21kbGRDNWpiR0Z6YzB4cGMzUXVZV1JrS0NkaFltTXRiR2x0YVhSbFpDY3BYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJDNW1iM0p0TG1adUxtUnZLQ2xjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvWld3dVpHVmlkV2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDQmxiQzVrWVhSaGN5NXNaVzVuZEdnZ0t5QmNJaUJrWVhSaGN5QnNiMkZrWldSY0lpbGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ0lDQWdJQ0FnSUZ4dUlDQWdJSDFjYm4waVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVpCTzBGQlNVRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVVZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlJVRTdRVUZGUVR0QlFVTkJPMEZCUkVFN1FVRkRRVHRCUVVkQk8wRkJRVUU3UVVGRFFUdEJRVVJCTzBGQlJVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVwQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZIUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGSFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZIUVR0QlFVZEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9GaWx0ZXIvT3B0aW9ucy9Mb2FkTW9yZS5qc1xcblwiKX0sXCIuL3NyYy9GaWx0ZXIvT3B0aW9ucy9OdW1iZXJSZXN1bHRzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvRmlsdGVyL09wdGlvbnMvTnVtYmVyUmVzdWx0cy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe2V2YWwoJ21vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyciwgbGVuZ3RoKSB7XFxuICByZXR1cm4gbmV3IE51bWJlclJlc3VsdHMoYXJyLCBsZW5ndGgpO1xcbn07XFxuXFxuZnVuY3Rpb24gTnVtYmVyUmVzdWx0cyhhcnIsIGxlbmd0aCkge1xcbiAgdGhpcy50YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGFyci50YXJnZXQpO1xcbiAgdGhpcy5nZXRGbiA9IDA7XFxuICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcXG4gIHRoaXMub3B0aW9ucyA9IFthcnIubm9fcmVzdWx0cyA/IGFyci5ub19yZXN1bHRzIDogXCJcIiwgYXJyLnNpbmd1bGFyID8gYXJyLnNpbmd1bGFyIDogXCJcIiwgYXJyLnBsdXJhbCA/IGFyci5wbHVyYWwgOiBcIlwiXTtcXG4gIHRoaXMudXBkYXRlKGxlbmd0aCk7XFxuICByZXR1cm4gdGhpcztcXG59XFxuXFxuTnVtYmVyUmVzdWx0cy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGxlbmd0aCkge1xcbiAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XFxuXFxuICBpZiAobGVuZ3RoID4gMSkge1xcbiAgICB0aGlzLmdldEZuID0gMjtcXG4gIH0gZWxzZSB0aGlzLmdldEZuID0gbGVuZ3RoO1xcblxcbiAgdGhpcy50YXJnZXQuaW5uZXJIVE1MID0gdGhpcy5vcHRpb25zW3RoaXMuZ2V0Rm5dKGxlbmd0aCk7XFxufTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdlJtbHNkR1Z5TDA5d2RHbHZibk12VG5WdFltVnlVbVZ6ZFd4MGN5NXFjeTVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEZDUXk4dUwzTnlZeTlHYVd4MFpYSXZUM0IwYVc5dWN5OU9kVzFpWlhKU1pYTjFiSFJ6TG1welAyVmpOamdpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBb1lYSnlMQ0JzWlc1bmRHZ3BJRDArSUhzZ2NtVjBkWEp1SUc1bGR5Qk9kVzFpWlhKU1pYTjFiSFJ6S0dGeWNpd2diR1Z1WjNSb0tTQjlYRzVjYm1aMWJtTjBhVzl1SUU1MWJXSmxjbEpsYzNWc2RITW9ZWEp5TENCc1pXNW5kR2dwZTF4dVhHNGdJQ0FnZEdocGN5NTBZWEpuWlhRZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0dGeWNpNTBZWEpuWlhRcE8xeHVJQ0FnSUhSb2FYTXVaMlYwUm00Z1BTQXdYRzRnSUNBZ2RHaHBjeTVzWlc1bmRHZ2dQU0JzWlc1bmRHaGNiaUFnSUNCY2JpQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQmJYRzRnSUNBZ0lDQWdJR0Z5Y2k1dWIxOXlaWE4xYkhSeklEOGdZWEp5TG01dlgzSmxjM1ZzZEhNZ09pQmNJbHdpTENCY2JpQWdJQ0FnSUNBZ1lYSnlMbk5wYm1kMWJHRnlJRDhnWVhKeUxuTnBibWQxYkdGeUlEb2dYQ0pjSWlBc1hHNGdJQ0FnSUNBZ0lHRnljaTV3YkhWeVlXd2dQeUJoY25JdWNHeDFjbUZzSURvZ1hDSmNJbHh1SUNBZ0lGMWNibHh1SUNBZ0lIUm9hWE11ZFhCa1lYUmxLR3hsYm1kMGFDbGNiaUFnSUNCY2JpQWdJQ0FnSUNCY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JuMWNibHh1VG5WdFltVnlVbVZ6ZFd4MGN5NXdjbTkwYjNSNWNHVXVkWEJrWVhSbElEMGdablZ1WTNScGIyNG9iR1Z1WjNSb0tYdGNiaUFnSUNCMGFHbHpMbXhsYm1kMGFDQTlJR3hsYm1kMGFGeHVJQ0FnSUdsbUtHeGxibWQwYUNBK0lERXBJSFJvYVhNdVoyVjBSbTRnUFNBeVhHNGdJQ0FnWld4elpTQjBhR2x6TG1kbGRFWnVJRDBnYkdWdVozUm9YRzRnSUNBZ2RHaHBjeTUwWVhKblpYUXVhVzV1WlhKSVZFMU1JRDBnZEdocGN5NXZjSFJwYjI1elczUm9hWE11WjJWMFJtNWRLR3hsYm1kMGFDbGNibjFjYmlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCVFVFN1FVRkhRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vc3JjL0ZpbHRlci9PcHRpb25zL051bWJlclJlc3VsdHMuanNcXG4nKX0sXCIuL3NyYy9GaWx0ZXIvT3B0aW9ucy9UZW1wbGF0ZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9GaWx0ZXIvT3B0aW9ucy9UZW1wbGF0ZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2V2YWwoJ3ZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uL0hlbHBlcnMvU3RyaW5nICovIFwiLi9zcmMvSGVscGVycy9TdHJpbmcuanNcIiksXFxuICAgIGNyZWF0ZUVsZW1lbnRGcm9tSFRNTCA9IF9yZXF1aXJlLmNyZWF0ZUVsZW1lbnRGcm9tSFRNTDtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZXN1bHRzLCBkLCBjb250YWluZXIpIHtcXG4gIHJldHVybiBuZXcgVGVtcGxhdGUocmVzdWx0cywgZCwgY29udGFpbmVyKTtcXG59O1xcblxcbmZ1bmN0aW9uIFRlbXBsYXRlKHJlc3VsdHMsIGQsIGNvbnRhaW5lcikge1xcbiAgdmFyIHRlbXBsYXRlID0gcmVzdWx0cy50ZW1wbGF0ZShkKTtcXG4gIHRoaXMuY3JlYXRlKHRlbXBsYXRlLCBjb250YWluZXIpO1xcbiAgcmV0dXJuIHRlbXBsYXRlO1xcbn1cXG5cXG5UZW1wbGF0ZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKGQsIGNvbnRhaW5lcikge1xcbiAgdmFyIHRlbXBsYXRlID0gY3JlYXRlRWxlbWVudEZyb21IVE1MKGQpO1xcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRlbXBsYXRlKTtcXG59Oy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXpjbU12Um1sc2RHVnlMMDl3ZEdsdmJuTXZWR1Z0Y0d4aGRHVXVhbk11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlCUWtNdkxpOXpjbU12Um1sc2RHVnlMMDl3ZEdsdmJuTXZWR1Z0Y0d4aGRHVXVhbk0vWVRnMU1TSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ2V5QmpjbVZoZEdWRmJHVnRaVzUwUm5KdmJVaFVUVXdnZlNBZ1BTQnlaWEYxYVhKbElDZ25MaTR2TGk0dlNHVnNjR1Z5Y3k5VGRISnBibWNuSUNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdLSEpsYzNWc2RITXNJR1FzSUdOdmJuUmhhVzVsY2lrZ1BUNGdleUJ5WlhSMWNtNGdibVYzSUZSbGJYQnNZWFJsS0hKbGMzVnNkSE1zSUdRc0lHTnZiblJoYVc1bGNpa2dmVnh1WEc1bWRXNWpkR2x2YmlCVVpXMXdiR0YwWlNoeVpYTjFiSFJ6TENCa0xDQmpiMjUwWVdsdVpYSXBlMXh1WEc0Z0lDQWdZMjl1YzNRZ2RHVnRjR3hoZEdVZ1BTQnlaWE4xYkhSekxuUmxiWEJzWVhSbEtHUXBYRzRnSUNBZ2RHaHBjeTVqY21WaGRHVW9kR1Z0Y0d4aGRHVXNJR052Ym5SaGFXNWxjaWxjYmlBZ0lDQmNiaUFnSUNCeVpYUjFjbTRnZEdWdGNHeGhkR1U3WEc1OVhHNWNibFJsYlhCc1lYUmxMbkJ5YjNSdmRIbHdaUzVqY21WaGRHVWdQU0JtZFc1amRHbHZiaWhrTENCamIyNTBZV2x1WlhJcGUxeHVJQ0FnSUdOdmJuTjBJSFJsYlhCc1lYUmxJRDBnWTNKbFlYUmxSV3hsYldWdWRFWnliMjFJVkUxTUtHUXBYRzRnSUNBZ1kyOXVkR0ZwYm1WeUxtRndjR1Z1WkVOb2FXeGtLSFJsYlhCc1lYUmxLVnh1ZlZ4dUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9GaWx0ZXIvT3B0aW9ucy9UZW1wbGF0ZS5qc1xcbicpfSxcIi4vc3JjL0ZpbHRlci9pbml0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0ZpbHRlci9pbml0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbCgnZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cXG5cXG52YXIgQUJDRmlsdGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Db3JlL0ZpbHRlciAqLyBcIi4vc3JjL0ZpbHRlci9Db3JlL0ZpbHRlci5qc1wiKTtcXG5cXG52YXIgRGF0YXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0NvcmUvRGF0YXMgKi8gXCIuL3NyYy9GaWx0ZXIvQ29yZS9EYXRhcy5qc1wiKTtcXG5cXG52YXIgYWJjO1xcbnZhciBGaWx0ZXIgPSBtb2R1bGUuZXhwb3J0cyA9IHtcXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQocGFyYW1zKSB7XFxuICAgIGlmICghcGFyYW1zLmZvcm0gfHwgIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocGFyYW1zLmZvcm0uY29udGFpbmVyKSkge1xcbiAgICAgIGNvbnNvbGUuZXJyb3IoXFwnTm8gY29udGFpbmVyIGZvcm0gZm91bmRcXCcpO1xcbiAgICAgIHJldHVybjtcXG4gICAgfVxcblxcbiAgICB2YXIgYWJjID0gbmV3IEFCQ0ZpbHRlcihwYXJhbXMpLmNvbnN0cnVjdChwYXJhbXMpO1xcbiAgICBhYmMuZm9ybU9iaiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocGFyYW1zLmZvcm0uY29udGFpbmVyKTtcXG5cXG4gICAgaWYgKHBhcmFtcy5pbnB1dHMpIHtcXG4gICAgICBhYmMuc2V0SW5wdXRzKHBhcmFtcy5pbnB1dHMpO1xcbiAgICB9XFxuXFxuICAgIGFiYy5hbGxkYXRhcyA9IG5ldyBEYXRhcygpO1xcbiAgICBhYmMuYWxsZGF0YXMuZ2V0KGFiYyk7XFxuXFxuICAgIGlmIChhYmMubG9hZF9tb3JlKSB7XFxuICAgICAgUHJvbWlzZS5hbGwoW2FiYy5hbGxkYXRhcy5nZXRdKS50aGVuKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiBhYmMubG9hZF9tb3JlLmluaXQoYWJjKTtcXG4gICAgICB9KTtcXG4gICAgfVxcblxcbiAgICBpZiAoYWJjLmZhY2V0dGUpIHtcXG4gICAgICBQcm9taXNlLmFsbChbYWJjLmFsbGRhdGFzLmdldF0pLnRoZW4oZnVuY3Rpb24gKCkge1xcbiAgICAgICAgcmV0dXJuIGFiYy5mYWNldHRlLmluaXQoYWJjKTtcXG4gICAgICB9KTtcXG4gICAgfVxcblxcbiAgICByZXR1cm4gYWJjO1xcbiAgfVxcbn07XFxuXFxuZnVuY3Rpb24gaXNGdW5jdGlvbihmbikge1xcbiAgcmV0dXJuIF90eXBlb2YoZm4pID09PSAodHlwZW9mIEZ1bmN0aW9uID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoRnVuY3Rpb24pKTtcXG59Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5emNtTXZSbWxzZEdWeUwybHVhWFF1YW5NdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5QlFrTXZMaTl6Y21NdlJtbHNkR1Z5TDJsdWFYUXVhbk0vTlRRMFpDSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1FVSkRSbWxzZEdWeUlEMGdjbVZ4ZFdseVpTZ25MaTlEYjNKbEwwWnBiSFJsY2ljcFhHNTJZWElnUkdGMFlYTWdQU0J5WlhGMWFYSmxLQ2N1TDBOdmNtVXZSR0YwWVhNbktWeHVYRzVzWlhRZ1lXSmpPMXh1ZG1GeUlFWnBiSFJsY2lBOUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0FnSUdsdWFYUTZJR1oxYm1OMGFXOXVJQ2h3WVhKaGJYTXBJSHRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUdsbUtDRndZWEpoYlhNdVptOXliU0I4ZkNBaFpHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWh3WVhKaGJYTXVabTl5YlM1amIyNTBZV2x1WlhJcElDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RPYnlCamIyNTBZV2x1WlhJZ1ptOXliU0JtYjNWdVpDY3BPMXh1SUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWVdKaklEMGdJRzVsZHlCQlFrTkdhV3gwWlhJb2NHRnlZVzF6S1M1amIyNXpkSEoxWTNRb2NHRnlZVzF6S1R0Y2JseHVJQ0FnSUNBZ0lDQmhZbU11Wm05eWJVOWlhaUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9jR0Z5WVcxekxtWnZjbTB1WTI5dWRHRnBibVZ5S1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaWdnY0dGeVlXMXpMbWx1Y0hWMGN5QXBJR0ZpWXk1elpYUkpibkIxZEhNb2NHRnlZVzF6TG1sdWNIVjBjeWxjYmx4dUlDQWdJQ0FnSUNCaFltTXVZV3hzWkdGMFlYTWdQU0J1WlhjZ1JHRjBZWE1vS1R0Y2JpQWdJQ0FnSUNBZ1lXSmpMbUZzYkdSaGRHRnpMbWRsZENnZ1lXSmpJQ2tnTzF4dUlDQWdJRnh1WEc0Z0lDQWdJQ0FnSUdsbUtHRmlZeTVzYjJGa1gyMXZjbVVwSUZCeWIyMXBjMlV1WVd4c0tGdGhZbU11WVd4c1pHRjBZWE11WjJWMFhTa3VkR2hsYmlnZ0tDa2dQVDRnWVdKakxteHZZV1JmYlc5eVpTNXBibWwwS0dGaVl5a3BPeUJjYmlBZ0lDQWdJQ0FnYVdZb1lXSmpMbVpoWTJWMGRHVXBJRkJ5YjIxcGMyVXVZV3hzS0Z0aFltTXVZV3hzWkdGMFlYTXVaMlYwWFNrdWRHaGxiaWdnS0NrZ1BUNGdZV0pqTG1aaFkyVjBkR1V1YVc1cGRDaGhZbU1wS1RzZ1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lXSmpYRzRnSUNBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMwWjFibU4wYVc5dUtHWnVLU0I3SUZ4dUlDQWdJSEpsZEhWeWJpQjBlWEJsYjJZb1ptNHBJRDA5UFNCMGVYQmxiMllvUm5WdVkzUnBiMjRwT3lCY2JuMGdJbDBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRWEpDUVR0QlFVTkJPMEZCZFVKQk8wRkJRMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9zcmMvRmlsdGVyL2luaXQuanNcXG4nKX0sXCIuL3NyYy9IZWxwZXJzL0FycmF5LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvSGVscGVycy9BcnJheS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IHNldEFycmF5LCBzZXRBcnJheVJhbmdlLCBpbkFycmF5ICovZnVuY3Rpb24obW9kdWxlLF9fd2VicGFja19leHBvcnRzX18sX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7ZXZhbCgnX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJzZXRBcnJheVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHNldEFycmF5OyB9KTtcXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwic2V0QXJyYXlSYW5nZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHNldEFycmF5UmFuZ2U7IH0pO1xcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJpbkFycmF5XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gaW5BcnJheTsgfSk7XFxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cXG5cXG52YXIgc2V0QXJyYXkgPSBmdW5jdGlvbiBzZXRBcnJheShhcnJheSwgb3B0aW9ucykge1xcbiAgZm9yICh2YXIga2V5IGluIGFycmF5KSB7XFxuICAgIGlmICh0eXBlb2YgYXJyYXlba2V5XSA9PT0gXCJmdW5jdGlvblwiKSB7XFxuICAgICAgYXJyYXlba2V5XSA9IGFycmF5W2tleV07XFxuICAgIH0gZWxzZSBpZiAoX3R5cGVvZihhcnJheVtrZXldKSAhPT0gXCJvYmplY3RcIiB8fCBrZXkgPT09IFwidmFsdWVcIiB8fCBrZXkgPT09IFwiY29tcGFyZVwiKSB7XFxuICAgICAgYXJyYXlba2V5XSA9IGtleSBpbiBvcHRpb25zID8gb3B0aW9uc1trZXldIDogYXJyYXlba2V5XTtcXG4gICAgfSBlbHNlIGlmIChfdHlwZW9mKGFycmF5W2tleV0pID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnNba2V5XSAmJiBvcHRpb25zW2tleV0ubGVuZ3RoKSB7XFxuICAgICAgYXJyYXlba2V5XSA9IG9wdGlvbnNba2V5XTtcXG4gICAgfSBlbHNlIGlmIChfdHlwZW9mKGFycmF5W2tleV0pID09PSBcIm9iamVjdFwiKSB7XFxuICAgICAgYXJyYXlba2V5XSA9IGtleSBpbiBvcHRpb25zID8gc2V0QXJyYXkoYXJyYXlba2V5XSwgb3B0aW9uc1trZXldKSA6IGFycmF5W2tleV07XFxuICAgIH1cXG5cXG4gICAgO1xcbiAgfVxcblxcbiAgcmV0dXJuIGFycmF5O1xcbn07XFxudmFyIHNldEFycmF5UmFuZ2UgPSBmdW5jdGlvbiBzZXRBcnJheVJhbmdlKGFycmF5LCByYW5nZSwgZm9ybSkge1xcbiAgLy8gU2V0IGF0dHJpYnV0ZXMgZnJvbSBpbnB1dCB0byBPYmplY3QgXFxuICAvLyBNaW4gaW5wdXRcXG4gIHJhbmdlLm1pbiA9IHJhbmdlLm1pbiA/IHJhbmdlLm1pbiA6IHt9O1xcbiAgcmFuZ2UubWF4ID0gcmFuZ2UubWF4ID8gcmFuZ2UubWF4IDoge307XFxuICB2YXIgaW5wdXRNaW4gPSByYW5nZS5uYW1lID8gZm9ybS5xdWVyeVNlbGVjdG9yKFwiW25hbWU9XFxcXFwiXCIuY29uY2F0KHJhbmdlLm5hbWUsIFwiXFxcXFwiXVwiKSkgOiBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCJbbmFtZT1cXFxcXCJcIi5jb25jYXQocmFuZ2UubWluLm5hbWUsIFwiXFxcXFwiXVwiKSk7XFxuXFxuICBpZiAoaW5wdXRNaW4pIHtcXG4gICAgcmFuZ2UubWluLnZhbHVlID0gaW5wdXRNaW4udmFsdWU7XFxuICAgIHJhbmdlLm1pbi5taW4gPSBpbnB1dE1pbi5nZXRBdHRyaWJ1dGUoXFwnbWluXFwnKTtcXG4gIH0gLy9NYXggaW5wdXRcXG5cXG5cXG4gIHZhciBpbnB1dE1heCA9IHJhbmdlLm1heCA/IGZvcm0ucXVlcnlTZWxlY3RvcihcIltuYW1lPVxcXFxcIlwiLmNvbmNhdChyYW5nZS5tYXgubmFtZSwgXCJcXFxcXCJdXCIpKSA6IGZhbHNlO1xcblxcbiAgaWYgKGlucHV0TWF4KSB7XFxuICAgIHJhbmdlLm1heC52YWx1ZSA9IGlucHV0TWF4LnZhbHVlO1xcbiAgICByYW5nZS5tYXgubWF4ID0gaW5wdXRNYXguZ2V0QXR0cmlidXRlKFxcJ21heFxcJyk7XFxuICB9XFxuXFxuICBhcnJheSA9IHNldEFycmF5KGFycmF5LCByYW5nZSk7XFxuICByZXR1cm4gYXJyYXk7XFxufTtcXG52YXIgaW5BcnJheSA9IGZ1bmN0aW9uIGluQXJyYXkoZGF0YSwgY29tcGFyZSwgdmFsKSB7XFxuICB2YXIgdG9Db21wYXJlID0gY29tcGFyZS5zcGxpdChcXCcuXFwnKTtcXG4gIHZhbCA9IGRhdGE7XFxuICB2YXIgX2EgPSB0b0NvbXBhcmU7XFxuXFxuICB2YXIgX2YgPSBmdW5jdGlvbiBfZih0LCBpKSB7XFxuICAgIHZhbCA9IHR5cGVvZiB2YWxbdF0gIT0gXCJ1bmRlZmluZWRcIiA/IHZhbFt0XSA6IGZhbHNlO1xcbiAgfTtcXG5cXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcXG4gICAgX2YoX2FbX2ldLCBfaSwgX2EpO1xcbiAgfVxcblxcbiAgdW5kZWZpbmVkO1xcbiAgcmV0dXJuIHZhbDtcXG59Oy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXpjbU12U0dWc2NHVnljeTlCY25KaGVTNXFjeTVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEZDUXk4dUwzTnlZeTlJWld4d1pYSnpMMEZ5Y21GNUxtcHpQekl4TnpRaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lYRzVsZUhCdmNuUWdZMjl1YzNRZ2MyVjBRWEp5WVhrZ1BTQm1kVzVqZEdsdmJpaGhjbkpoZVN3Z2IzQjBhVzl1Y3lsN1hHNGdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJR0Z5Y21GNUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWVhKeVlYbGJhMlY1WFNBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUNsY2JpQWdJQ0FnSUNBZ0lDQmhjbkpoZVZ0clpYbGRJRDBnWVhKeVlYbGJhMlY1WFR0Y2JseHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1lYSnlZWGxiYTJWNVhTQWhQVDBnWENKdlltcGxZM1JjSWlCOGZDQnJaWGtnUFQwOUlGd2lkbUZzZFdWY0lpQjhmQ0JyWlhrZ1BUMDlJRndpWTI5dGNHRnlaVndpS1Z4dUlDQWdJQ0FnSUNCN0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhKeVlYbGJhMlY1WFNBOUlHdGxlU0JwYmlCdmNIUnBiMjV6SUQ4Z2IzQjBhVzl1YzF0clpYbGRJRG9nWVhKeVlYbGJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDZ2dkSGx3Wlc5bUlHRnljbUY1VzJ0bGVWMGdQVDA5SUZ3aWIySnFaV04wWENJZ0ppWWdiM0IwYVc5dWMxdHJaWGxkSUNZbUlHOXdkR2x2Ym5OYmEyVjVYUzVzWlc1bmRHZ2dLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1lYSnlZWGxiYTJWNVhTQTlJRzl3ZEdsdmJuTmJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDZ2dkSGx3Wlc5bUlHRnljbUY1VzJ0bGVWMGdQVDA5SUZ3aWIySnFaV04wWENJZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWVhKeVlYbGJhMlY1WFNBOUlDQnJaWGtnYVc0Z2IzQjBhVzl1Y3lBL0lITmxkRUZ5Y21GNUtHRnljbUY1VzJ0bGVWMHNJRzl3ZEdsdmJuTmJhMlY1WFNBcElEb2dZWEp5WVhsYmEyVjVYVnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1lYSnlZWGs3WEc1OVhHNWNibVY0Y0c5eWRDQmpiMjV6ZENCelpYUkJjbkpoZVZKaGJtZGxJRDBnWm5WdVkzUnBiMjRvWVhKeVlYa3NJSEpoYm1kbExDQm1iM0p0S1h0Y2JseHVJQ0F2THlCVFpYUWdZWFIwY21saWRYUmxjeUJtY205dElHbHVjSFYwSUhSdklFOWlhbVZqZENCY2JpQWdMeThnVFdsdUlHbHVjSFYwWEc0Z0lISmhibWRsTG0xcGJpQTlJSEpoYm1kbExtMXBiaUEvSUhKaGJtZGxMbTFwYmlBNklIdDlYRzRnSUhKaGJtZGxMbTFoZUNBOUlISmhibWRsTG0xaGVDQS9JSEpoYm1kbExtMWhlQ0E2SUh0OVhHNWNiaUFnWTI5dWMzUWdhVzV3ZFhSTmFXNGdQU0J5WVc1blpTNXVZVzFsSUQ4Z1ptOXliUzV4ZFdWeWVWTmxiR1ZqZEc5eUtHQmJibUZ0WlQxY0lpUjdjbUZ1WjJVdWJtRnRaWDFjSWwxZ0tTQTZJR1p2Y20wdWNYVmxjbmxUWld4bFkzUnZjaWhnVzI1aGJXVTlYQ0lrZTNKaGJtZGxMbTFwYmk1dVlXMWxmVndpWFdBcFhHNGdJRnh1SUNCcFppaHBibkIxZEUxcGJpbDdYRzRnSUNBZ2NtRnVaMlV1YldsdUxuWmhiSFZsSUQwZ2FXNXdkWFJOYVc0dWRtRnNkV1ZjYmlBZ0lDQnlZVzVuWlM1dGFXNHViV2x1SUQwZ2FXNXdkWFJOYVc0dVoyVjBRWFIwY21saWRYUmxLQ2R0YVc0bktWeHVJQ0I5WEc0Z0lDOHZUV0Y0SUdsdWNIVjBYRzRnSUdOdmJuTjBJR2x1Y0hWMFRXRjRJRDBnY21GdVoyVXViV0Y0SUQ4Z1ptOXliUzV4ZFdWeWVWTmxiR1ZqZEc5eUtHQmJibUZ0WlQxY0lpUjdjbUZ1WjJVdWJXRjRMbTVoYldWOVhDSmRZQ2tnT2lCbVlXeHpaVnh1SUNCcFppaHBibkIxZEUxaGVDbDdYRzRnSUNBZ2NtRnVaMlV1YldGNExuWmhiSFZsSUQwZ2FXNXdkWFJOWVhndWRtRnNkV1ZjYmlBZ0lDQnlZVzVuWlM1dFlYZ3ViV0Y0SUQwZ2FXNXdkWFJOWVhndVoyVjBRWFIwY21saWRYUmxLQ2R0WVhnbktWeHVJQ0I5WEc1Y2JseHVJQ0JoY25KaGVTQTlJSE5sZEVGeWNtRjVLQ0JoY25KaGVTd2djbUZ1WjJVZ0tWeHVYRzRnSUhKbGRIVnliaUJoY25KaGVUdGNibjFjYmx4dVpYaHdiM0owSUdOdmJuTjBJR2x1UVhKeVlYa2dQU0FvWkdGMFlTd2dZMjl0Y0dGeVpTd2dkbUZzS1NBOVBpQjdYRzVjYmlBZ1kyOXVjM1FnZEc5RGIyMXdZWEpsSUQwZ1kyOXRjR0Z5WlM1emNHeHBkQ2duTGljcFhHNWNibHh1SUNCMllXd2dQU0JrWVhSaE8xeHVYRzRnSUhSdlEyOXRjR0Z5WlM1bWIzSkZZV05vS0NBb2RDd2dhU2tnUFQ0Z2UxeHVJQ0FnSUhaaGJDQTlJSFI1Y0dWdlppQjJZV3hiZEYwZ0lUMGdYQ0oxYm1SbFptbHVaV1JjSWlBL0lIWmhiRnQwWFNBNklHWmhiSE5sWEc0Z0lIMHBYRzRnSUhKbGRIVnliaUIyWVd4Y2JseHVmVnh1SUNKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZFUVR0QlFVdEJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlJFRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVWQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZGUVR0QlFVVkJPMEZCUjBFN1FVRk1RVHRCUVVOQk8wRkJSRUU3UVVGUlFUdEJRVU5CTzBGQlEwRTdRVUZXUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVUxQk8wRkJSMEU3UVVGRlFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9zcmMvSGVscGVycy9BcnJheS5qc1xcbicpfSxcIi4vc3JjL0hlbHBlcnMvRmV0Y2guanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9IZWxwZXJzL0ZldGNoLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogRmV0Y2ggKi9mdW5jdGlvbihtb2R1bGUsX193ZWJwYWNrX2V4cG9ydHNfXyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtldmFsKCdfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XFxuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkZldGNoXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRmV0Y2g7IH0pO1xcbnZhciBGZXRjaCA9IGZ1bmN0aW9uIEZldGNoKHVybCwgY2FsbGJhY2spIHtcXG4gIGZldGNoKHVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcXG4gIH0pLnRoZW4oZnVuY3Rpb24gKGpzb24pIHtcXG4gICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGpzb24pO1xcbiAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XFxuICAgIHJldHVybiBjYWxsYmFjayhlcnJvciwgbnVsbCk7XFxuICB9KTtcXG59Oy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXpjbU12U0dWc2NHVnljeTlHWlhSamFDNXFjeTVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEZDUXk4dUwzTnlZeTlJWld4d1pYSnpMMFpsZEdOb0xtcHpQekU0WWpnaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laWGh3YjNKMElHTnZibk4wSUVabGRHTm9JRDBnS0hWeWJDd2dZMkZzYkdKaFkyc3BJRDArSUh0Y2JpQWdJQ0JtWlhSamFDaDFjbXdwWEc0Z0lDQWdJQ0FnTG5Sb1pXNG9jbVZ6Y0c5dWMyVWdQVDRnY21WemNHOXVjMlV1YW5OdmJpZ3BLVnh1SUNBZ0lDQWdJQzUwYUdWdUtHcHpiMjRnUFQ0Z1kyRnNiR0poWTJzb2JuVnNiQ3dnYW5OdmJpa3BYRzRnSUNBZ0lDQWdMbU5oZEdOb0tHVnljbTl5SUQwK0lHTmhiR3hpWVdOcktHVnljbTl5TENCdWRXeHNLU2xjYm4xY2JpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZEUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9IZWxwZXJzL0ZldGNoLmpzXFxuJyl9LFwiLi9zcmMvSGVscGVycy9TdHJpbmcuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvSGVscGVycy9TdHJpbmcuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogY2FwaXRhbGl6ZSwgY3JlYXRlRWxlbWVudEZyb21IVE1MICovZnVuY3Rpb24obW9kdWxlLF9fd2VicGFja19leHBvcnRzX18sX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7ZXZhbCgnX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJjYXBpdGFsaXplXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gY2FwaXRhbGl6ZTsgfSk7XFxuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImNyZWF0ZUVsZW1lbnRGcm9tSFRNTFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnRGcm9tSFRNTDsgfSk7XFxudmFyIGNhcGl0YWxpemUgPSBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cikge1xcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcXG59O1xcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRGcm9tSFRNTChodG1sU3RyaW5nKSB7XFxuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcXCdkaXZcXCcpO1xcbiAgZGl2LmlubmVySFRNTCA9IGh0bWxTdHJpbmcudHJpbSgpOyAvLyBDaGFuZ2UgdGhpcyB0byBkaXYuY2hpbGROb2RlcyB0byBzdXBwb3J0IG11bHRpcGxlIHRvcC1sZXZlbCBub2Rlc1xcblxcbiAgcmV0dXJuIGRpdi5maXJzdENoaWxkO1xcbn0vLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdlNHVnNjR1Z5Y3k5VGRISnBibWN1YW5NdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5QlFrTXZMaTl6Y21NdlNHVnNjR1Z5Y3k5VGRISnBibWN1YW5NL01tVXdOaUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKbGVIQnZjblFnWTI5dWMzUWdZMkZ3YVhSaGJHbDZaU0E5SUdaMWJtTjBhVzl1S0hOMGNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCemRISXVZMmhoY2tGMEtEQXBMblJ2VlhCd1pYSkRZWE5sS0NrZ0t5QnpkSEl1YzJ4cFkyVW9NU2xjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTnlaV0YwWlVWc1pXMWxiblJHY205dFNGUk5UQ2hvZEcxc1UzUnlhVzVuS1NCN1hHNGdJQ0FnZG1GeUlHUnBkaUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcE8xeHVJQ0FnSUdScGRpNXBibTVsY2toVVRVd2dQU0JvZEcxc1UzUnlhVzVuTG5SeWFXMG9LVHRjYmx4dUlDQWdJQzh2SUVOb1lXNW5aU0IwYUdseklIUnZJR1JwZGk1amFHbHNaRTV2WkdWeklIUnZJSE4xY0hCdmNuUWdiWFZzZEdsd2JHVWdkRzl3TFd4bGRtVnNJRzV2WkdWelhHNGdJQ0FnY21WMGRYSnVJR1JwZGk1bWFYSnpkRU5vYVd4a095QmNibjBpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9IZWxwZXJzL1N0cmluZy5qc1xcbicpfSxcIi4vc3JjL0hlbHBlcnMvVXRpbHMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9IZWxwZXJzL1V0aWxzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogZXJyb3IsIGlzVGFyZ2V0LCBpc1RhcmdldFNlbGVjdGVkLCBjbG9zZXN0ICovZnVuY3Rpb24obW9kdWxlLF9fd2VicGFja19leHBvcnRzX18sX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7ZXZhbCgnX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJlcnJvclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGVycm9yOyB9KTtcXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiaXNUYXJnZXRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBpc1RhcmdldDsgfSk7XFxuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImlzVGFyZ2V0U2VsZWN0ZWRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBpc1RhcmdldFNlbGVjdGVkOyB9KTtcXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiY2xvc2VzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGNsb3Nlc3Q7IH0pO1xcbnZhciBlcnJvciA9IGZ1bmN0aW9uIGVycm9yKG1zZykge1xcbiAgY29uc29sZS5lcnJvcihtc2cpO1xcbiAgcmV0dXJuO1xcbn07XFxudmFyIGlzVGFyZ2V0ID0gZnVuY3Rpb24gaXNUYXJnZXQoZSwgZWwpIHtcXG4gIGVsLnRhcmdldCA9IGUudGFyZ2V0Lmhhc0F0dHJpYnV0ZShcXCdpZFxcJykgPyBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXFwnaWRcXCcpIDogZS50YXJnZXQudmFsdWU7XFxuICByZXR1cm4gY2xvc2VzdChlLnRhcmdldCwgZWwubmFtZSwgZWwubmFtZSkgfHwgZS50YXJnZXQuZ2V0QXR0cmlidXRlKFxcJ25hbWVcXCcpID09PSBlbC5uYW1lO1xcbn07XFxudmFyIGlzVGFyZ2V0U2VsZWN0ZWQgPSBmdW5jdGlvbiBpc1RhcmdldFNlbGVjdGVkKGUsIGVsLCBmb3JtKSB7XFxuICB2YXIgYXR0ciA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcXCdyZWxcXCcpO1xcblxcbiAgaWYgKGF0dHIgPT09IFwiXCIgfHwgYXR0ciA9PT0gbnVsbCB8fCBhdHRyID09PSBcImRlZmF1bHRcIiB8fCBhdHRyID09PSBcImFsbFwiKSB7XFxuICAgIHJldHVybiB0cnVlO1xcbiAgfVxcblxcbiAgdmFyIHRhcmdldCA9IGF0dHIgPyBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCJbbmFtZT1cXFxcXCJcIi5jb25jYXQoZWwubmFtZSwgXCJcXFxcXCJdIFt2YWx1ZT1cXFxcXCJcIikuY29uY2F0KGF0dHIsIFwiXFxcXFwiXVwiKSkgOiBlLnRhcmdldDtcXG5cXG4gIGlmICghdGFyZ2V0KSB7XFxuICAgIHJldHVybjtcXG4gIH1cXG5cXG4gIHJldHVybiBjbG9zZXN0KHRhcmdldCwgXCJzZWxlY3RcIiwgXCJzZWxlY3RcIikgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZShcXCduYW1lXFwnKSA9PT0gZWwubmFtZTtcXG59O1xcbnZhciBjbG9zZXN0ID0gZnVuY3Rpb24gY2xvc2VzdChlbCwgc2VsZWN0b3IsIHN0b3BTZWxlY3Rvcikge1xcbiAgdmFyIHJldHZhbCA9IG51bGw7XFxuXFxuICB3aGlsZSAoZWwpIHtcXG4gICAgaWYgKGVsLm1hdGNoZXMoc2VsZWN0b3IpKSB7XFxuICAgICAgcmV0dmFsID0gZWw7XFxuICAgICAgYnJlYWs7XFxuICAgIH0gZWxzZSBpZiAoc3RvcFNlbGVjdG9yICYmIGVsLm1hdGNoZXMoc3RvcFNlbGVjdG9yKSkge1xcbiAgICAgIGJyZWFrO1xcbiAgICB9XFxuXFxuICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcXG4gIH1cXG5cXG4gIHJldHVybiByZXR2YWw7XFxufTtcXG5cXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcXG4gIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPSBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUubW96TWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLm9NYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGZ1bmN0aW9uIChzKSB7XFxuICAgIHZhciBtYXRjaGVzID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpLFxcbiAgICAgICAgaSA9IG1hdGNoZXMubGVuZ3RoO1xcblxcbiAgICB3aGlsZSAoLS1pID49IDAgJiYgbWF0Y2hlcy5pdGVtKGkpICE9PSB0aGlzKSB7fVxcblxcbiAgICByZXR1cm4gaSA+IC0xO1xcbiAgfTtcXG59Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5emNtTXZTR1ZzY0dWeWN5OVZkR2xzY3k1cWN5NXFjeUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwwRkNReTh1TDNOeVl5OUlaV3h3WlhKekwxVjBhV3h6TG1welB6QmlOMk1pWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpYaHdiM0owSUdOdmJuTjBJR1Z5Y205eUlEMGdLRzF6WnlrZ1BUNGdlMXh1SUNCamIyNXpiMnhsTG1WeWNtOXlLRzF6WnlrN1hHNGdJSEpsZEhWeWJqdGNibjA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JwYzFSaGNtZGxkQ0E5SUNobExDQmxiQ2tnUFQ0Z2UxeHVJQ0JsYkM1MFlYSm5aWFFnUFNCbExuUmhjbWRsZEM1b1lYTkJkSFJ5YVdKMWRHVW9KMmxrSnlrZ1B5QmxMblJoY21kbGRDNW5aWFJCZEhSeWFXSjFkR1VvSjJsa0p5a2dPaUJsTG5SaGNtZGxkQzUyWVd4MVpWeHVJQ0J5WlhSMWNtNGdZMnh2YzJWemRDaGxMblJoY21kbGRDd2daV3d1Ym1GdFpTd2daV3d1Ym1GdFpTa2dmSHdnWlM1MFlYSm5aWFF1WjJWMFFYUjBjbWxpZFhSbEtDZHVZVzFsSnlrZ1BUMDlJR1ZzTG01aGJXVTdYRzU5WEc1bGVIQnZjblFnWTI5dWMzUWdhWE5VWVhKblpYUlRaV3hsWTNSbFpDQTlJQ2hsTENCbGJDd2dabTl5YlNrZ1BUNGdlMXh1WEhSamIyNXpkQ0JoZEhSeUlEMGdaUzUwWVhKblpYUXVaMlYwUVhSMGNtbGlkWFJsS0NkeVpXd25LVnh1WEhScFppQW9ZWFIwY2lBOVBUMGdYQ0pjSWlCOGZDQmhkSFJ5SUQwOVBTQnVkV3hzSUh4OElHRjBkSElnUFQwOUlGd2laR1ZtWVhWc2RGd2lJSHg4SUdGMGRISWdQVDA5SUZ3aVlXeHNYQ0lwSUhKbGRIVnliaUIwY25WbE8xeHVYSFJqYjI1emRDQjBZWEpuWlhRZ1BTQmhkSFJ5SUQ4Z1ptOXliUzV4ZFdWeWVWTmxiR1ZqZEc5eUtHQmJibUZ0WlQxY0lpUjdaV3d1Ym1GdFpYMWNJbDBnVzNaaGJIVmxQVndpSkh0aGRIUnlmVndpWFdBcFhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwT2lCbExuUmhjbWRsZEZ4dVhIUnBaaUFvSVhSaGNtZGxkQ2tnY21WMGRYSnVPMXh1WEhSeVpYUjFjbTRnWTJ4dmMyVnpkQ2gwWVhKblpYUXNJRndpYzJWc1pXTjBYQ0lzSUZ3aWMyVnNaV04wWENJcElIeDhJSFJoY21kbGRDNW5aWFJCZEhSeWFXSjFkR1VvSjI1aGJXVW5LU0E5UFQwZ1pXd3VibUZ0WlR0Y2JuMWNibHh1Wlhod2IzSjBJR052Ym5OMElHTnNiM05sYzNRZ1BTQW9aV3dzSUhObGJHVmpkRzl5TENCemRHOXdVMlZzWldOMGIzSXBJRDArSUh0Y2JseDBkbUZ5SUhKbGRIWmhiQ0E5SUc1MWJHdzdYRzVjZEhkb2FXeGxJQ2hsYkNrZ2UxeHVYSFJjZEdsbUlDaGxiQzV0WVhSamFHVnpLSE5sYkdWamRHOXlLU2tnZTF4dVhIUmNkRngwY21WMGRtRnNJRDBnWld3N1hHNWNkRngwWEhSaWNtVmhhMXh1WEhSY2RIMGdaV3h6WlNCcFppQW9jM1J2Y0ZObGJHVmpkRzl5SUNZbUlHVnNMbTFoZEdOb1pYTW9jM1J2Y0ZObGJHVmpkRzl5S1NrZ2UxeHVYSFJjZEZ4MFluSmxZV3RjYmx4MFhIUjlYRzVjZEZ4MFpXd2dQU0JsYkM1d1lYSmxiblJGYkdWdFpXNTBPMXh1WEhSOVhHNWNkSEpsZEhWeWJpQnlaWFIyWVd3N1hHNTlYRzVjYmx4dVhHNXBaaUFvSVVWc1pXMWxiblF1Y0hKdmRHOTBlWEJsTG0xaGRHTm9aWE1wSUh0Y2JseDBSV3hsYldWdWRDNXdjbTkwYjNSNWNHVXViV0YwWTJobGN5QTlYRzVjZEZ4MFJXeGxiV1Z1ZEM1d2NtOTBiM1I1Y0dVdWJXRjBZMmhsYzFObGJHVmpkRzl5SUh4OFhHNWNkRngwUld4bGJXVnVkQzV3Y205MGIzUjVjR1V1Ylc5NlRXRjBZMmhsYzFObGJHVmpkRzl5SUh4OFhHNWNkRngwUld4bGJXVnVkQzV3Y205MGIzUjVjR1V1YlhOTllYUmphR1Z6VTJWc1pXTjBiM0lnZkh4Y2JseDBYSFJGYkdWdFpXNTBMbkJ5YjNSdmRIbHdaUzV2VFdGMFkyaGxjMU5sYkdWamRHOXlJSHg4WEc1Y2RGeDBSV3hsYldWdWRDNXdjbTkwYjNSNWNHVXVkMlZpYTJsMFRXRjBZMmhsYzFObGJHVmpkRzl5SUh4OFhHNWNkRngwWm5WdVkzUnBiMjRnS0hNcElIdGNibHgwWEhSY2RIWmhjaUJ0WVhSamFHVnpJRDBnS0hSb2FYTXVaRzlqZFcxbGJuUWdmSHdnZEdocGN5NXZkMjVsY2tSdlkzVnRaVzUwS1M1eGRXVnllVk5sYkdWamRHOXlRV3hzS0hNcExGeHVYSFJjZEZ4MFhIUnBJRDBnYldGMFkyaGxjeTVzWlc1bmRHZzdYRzVjZEZ4MFhIUjNhR2xzWlNBb0xTMXBJRDQ5SURBZ0ppWWdiV0YwWTJobGN5NXBkR1Z0S0drcElDRTlQU0IwYUdsektTQjdmVnh1WEhSY2RGeDBjbVYwZFhKdUlHa2dQaUF0TVR0Y2JseDBYSFI5TzF4dWZWeHVJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkhRVHRCUVVOQk8wRkJUMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vc3JjL0hlbHBlcnMvVXRpbHMuanNcXG4nKX0sXCIuL3NyYy9SYW5nZS9Db3JlL0lucHV0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUmFuZ2UvQ29yZS9JbnB1dC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbChcInZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uL0hlbHBlcnMvQXJyYXkgKi8gXFxcIi4vc3JjL0hlbHBlcnMvQXJyYXkuanNcXFwiKSxcXG4gICAgc2V0QXJyYXkgPSBfcmVxdWlyZS5zZXRBcnJheTtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlbCkge1xcbiAgcmV0dXJuIG5ldyBJbnB1dChlbCk7XFxufTtcXG5cXG5mdW5jdGlvbiBJbnB1dChlbCkge1xcbiAgdGhpcy5kaWZmID0gMTtcXG4gIHRoaXMubXVsdGlwbGUgPSBmYWxzZTtcXG4gIHRoaXMubmFtZSA9IGZhbHNlO1xcbiAgdGhpcy5jb21wYXJlID0gZmFsc2U7XFxuICB0aGlzLnVybF9uYW1lID0gZmFsc2U7XFxuICB0aGlzLm9wZXJhdG9yID0gXFxcIm9yXFxcIjtcXG4gIHRoaXMucmVsYXRpb24gPSBcXFwiYW5kXFxcIjtcXG4gIHRoaXMubWluID0ge1xcbiAgICBsYWJlbDoge1xcbiAgICAgIHRhcmdldDogZmFsc2UsXFxuICAgICAgZGVmYXVsdDogZmFsc2UsXFxuICAgICAgc2luZ3VsYXI6IGZhbHNlLFxcbiAgICAgIHBsdXJhbDogZmFsc2UsXFxuICAgICAgemVybzogZmFsc2VcXG4gICAgfSxcXG4gICAgdmFsdWU6IGZhbHNlLFxcbiAgICBuYW1lOiBmYWxzZSxcXG4gICAgbWluOiBmYWxzZSxcXG4gICAgZGVmYXVsdDogZmFsc2VcXG4gIH07XFxuICB0aGlzLm1heCA9IHtcXG4gICAgbGFiZWw6IHtcXG4gICAgICB0YXJnZXQ6IGZhbHNlLFxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxcbiAgICAgIHNpbmd1bGFyOiBmYWxzZSxcXG4gICAgICBwbHVyYWw6IGZhbHNlLFxcbiAgICAgIHplcm86IGZhbHNlXFxuICAgIH0sXFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxcbiAgICB2YWx1ZTogZmFsc2UsXFxuICAgIG5hbWU6IGZhbHNlLFxcbiAgICBtYXg6IGZhbHNlXFxuICB9O1xcbiAgdGhpcy5saW5lID0ge1xcbiAgICB0YXJnZXQ6IHRoaXMuY3JlYXRlTGluZSgpXFxuICB9O1xcbn1cXG5cXG5JbnB1dC5wcm90b3R5cGUuY29uc3RydWN0ID0gZnVuY3Rpb24gKHBhcmFtcykge1xcbiAgaWYgKHBhcmFtcykge1xcbiAgICBzZXRBcnJheSh0aGlzLCBwYXJhbXMpO1xcbiAgfVxcblxcbiAgaWYgKHRoaXMubWluLm5hbWUpIHtcXG4gICAgdGhpcy5taW4udGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcXFwiW25hbWU9XFxcXFxcXCJcXFwiLmNvbmNhdCh0aGlzLm1pbi5uYW1lLCBcXFwiXFxcXFxcXCJdXFxcIikpO1xcbiAgfVxcblxcbiAgaWYgKHRoaXMubWF4Lm5hbWUpIHtcXG4gICAgdGhpcy5tYXgudGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcXFwiW25hbWU9XFxcXFxcXCJcXFwiLmNvbmNhdCh0aGlzLm1heC5uYW1lLCBcXFwiXFxcXFxcXCJdXFxcIikpO1xcbiAgfVxcblxcbiAgaWYgKHRoaXMubWluLmxhYmVsLnRhcmdldCkge1xcbiAgICB0aGlzLm1pbi5sYWJlbC5lbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5taW4ubGFiZWwudGFyZ2V0KTtcXG4gIH1cXG5cXG4gIGlmICh0aGlzLm1heC5sYWJlbC50YXJnZXQpIHtcXG4gICAgdGhpcy5tYXgubGFiZWwuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMubWF4LmxhYmVsLnRhcmdldCk7XFxuICB9XFxuXFxuICBpZiAodGhpcy5taW4udGFyZ2V0KSB7XFxuICAgIHRoaXMubWluLnRhcmdldC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMubGluZS50YXJnZXQpO1xcbiAgICB0aGlzLmxpbmUudGFyZ2V0LndpZHRoID0gdGhpcy5saW5lLnRhcmdldC5jbGllbnRXaWR0aDtcXG5cXG4gICAgaWYgKHRoaXMubXVsdGlwbGUgJiYgTnVtYmVyKHRoaXMubWluLnRhcmdldC52YWx1ZSkgPD0gTnVtYmVyKHRoaXMubWF4LnRhcmdldC52YWx1ZSkgLSB0aGlzLmRpZmYpIHtcXG4gICAgICB0aGlzLnVwZGF0ZSgnbWluJyk7XFxuICAgIH0gZWxzZSB0aGlzLm1pbi50YXJnZXQudmFsdWUgPSBOdW1iZXIodGhpcy5tYXgudGFyZ2V0LnZhbHVlKSAtIHRoaXMuZGlmZjtcXG5cXG4gICAgdGhpcy5taW4ubWluID0gdGhpcy5taW4udGFyZ2V0LmdldEF0dHJpYnV0ZSgnbWluJyk7XFxuICAgIHRoaXMubWluLm1heCA9IHRoaXMubWluLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ21heCcpO1xcblxcbiAgICBpZiAoIXRoaXMubXVsdGlwbGUpIHtcXG4gICAgICB0aGlzLnVwZGF0ZSgnbWluJyk7XFxuICAgIH1cXG5cXG4gICAgdGhpcy51cGRhdGUoJ21pbicpO1xcbiAgICB0aGlzLnVwZGF0ZUxpbmUoJ21pbicpO1xcbiAgfVxcblxcbiAgaWYgKHRoaXMubWF4LnRhcmdldCkge1xcbiAgICBpZiAodGhpcy5tdWx0aXBsZSAmJiBOdW1iZXIodGhpcy5taW4udGFyZ2V0LnZhbHVlKSArIHRoaXMuZGlmZiA8PSBOdW1iZXIodGhpcy5tYXgudGFyZ2V0LnZhbHVlKSkge1xcbiAgICAgIHRoaXMudXBkYXRlKCdtYXgnKTtcXG4gICAgfSBlbHNlIHRoaXMubWF4LnRhcmdldC52YWx1ZSA9IE51bWJlcih0aGlzLm1pbi50YXJnZXQudmFsdWUpICsgdGhpcy5kaWZmO1xcblxcbiAgICB0aGlzLm1heC5taW4gPSB0aGlzLm1heC50YXJnZXQuZ2V0QXR0cmlidXRlKCdtaW4nKTtcXG4gICAgdGhpcy5tYXgubWF4ID0gdGhpcy5tYXgudGFyZ2V0LmdldEF0dHJpYnV0ZSgnbWF4Jyk7XFxuICAgIHRoaXMudXBkYXRlKCdtYXgnKTtcXG4gICAgdGhpcy51cGRhdGVMaW5lKCdtYXgnKTtcXG4gIH1cXG5cXG4gIHRoaXMuYmluZEV2ZW50cygpO1xcbn07XFxuXFxuSW5wdXQucHJvdG90eXBlLmJpbmRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XFxuICB2YXIgX3RoaXMgPSB0aGlzO1xcblxcbiAgaWYgKHRoaXMubWluLnRhcmdldCkge1xcbiAgICB0aGlzLm1pbi50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoZSkge1xcbiAgICAgIGlmIChfdGhpcy5tdWx0aXBsZSAmJiBOdW1iZXIoX3RoaXMubWluLnRhcmdldC52YWx1ZSkgPD0gTnVtYmVyKF90aGlzLm1heC50YXJnZXQudmFsdWUpIC0gX3RoaXMuZGlmZikge1xcbiAgICAgICAgX3RoaXMudXBkYXRlKCdtaW4nKTtcXG4gICAgICB9IGVsc2UgX3RoaXMubWluLnRhcmdldC52YWx1ZSA9IE51bWJlcihfdGhpcy5tYXgudGFyZ2V0LnZhbHVlKSAtIF90aGlzLmRpZmY7XFxuXFxuICAgICAgX3RoaXMudXBkYXRlTGluZSgnbWluJyk7XFxuXFxuICAgICAgaWYgKCFfdGhpcy5tdWx0aXBsZSkge1xcbiAgICAgICAgX3RoaXMudXBkYXRlKCdtaW4nKTtcXG4gICAgICB9XFxuICAgIH0pO1xcbiAgfVxcblxcbiAgaWYgKHRoaXMubWF4LnRhcmdldCkge1xcbiAgICB0aGlzLm1heC50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoZSkge1xcbiAgICAgIGlmIChfdGhpcy5tdWx0aXBsZSAmJiBOdW1iZXIoX3RoaXMubWluLnRhcmdldC52YWx1ZSkgKyBfdGhpcy5kaWZmIDw9IE51bWJlcihfdGhpcy5tYXgudGFyZ2V0LnZhbHVlKSkge1xcbiAgICAgICAgX3RoaXMudXBkYXRlKCdtYXgnKTtcXG4gICAgICB9IGVsc2UgX3RoaXMubWF4LnRhcmdldC52YWx1ZSA9IE51bWJlcihfdGhpcy5taW4udGFyZ2V0LnZhbHVlKSArIF90aGlzLmRpZmY7XFxuXFxuICAgICAgX3RoaXMudXBkYXRlKCdtYXgnKTtcXG5cXG4gICAgICBfdGhpcy51cGRhdGVMaW5lKCdtYXgnKTtcXG4gICAgfSk7XFxuICB9XFxufTtcXG5cXG5JbnB1dC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGlucHV0KSB7XFxuICB0aGlzW2lucHV0XS50YXJnZXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHRoaXNbaW5wdXRdLnRhcmdldC52YWx1ZSk7XFxuICB0aGlzW2lucHV0XS52YWx1ZSA9IHRoaXNbaW5wdXRdLnRhcmdldC52YWx1ZTtcXG4gIHZhciBIVE1MO1xcblxcbiAgaWYgKE51bWJlcih0aGlzW2lucHV0XS52YWx1ZSkgPT09IDApIHtcXG4gICAgaWYgKHRoaXNbaW5wdXRdLmxhYmVsLnplcm8pIHtcXG4gICAgICBIVE1MID0gdGhpc1tpbnB1dF0ubGFiZWwuemVybyh0aGlzW2lucHV0XS52YWx1ZSk7XFxuICAgIH0gZWxzZSBpZiAodGhpc1tpbnB1dF0ubGFiZWwuc2luZ3VsYXIpIHtcXG4gICAgICBIVE1MID0gdGhpc1tpbnB1dF0ubGFiZWwuc2luZ3VsYXIodGhpc1tpbnB1dF0udmFsdWUpO1xcbiAgICB9IGVsc2UgaWYgKHRoaXNbaW5wdXRdLmxhYmVsLmRlZmF1bHQpIHtcXG4gICAgICBIVE1MID0gdGhpc1tpbnB1dF0ubGFiZWwuZGVmYXVsdCh0aGlzW2lucHV0XS52YWx1ZSk7XFxuICAgIH1cXG4gIH0gZWxzZSBpZiAoTnVtYmVyKHRoaXNbaW5wdXRdLnZhbHVlKSA9PT0gMSkge1xcbiAgICBpZiAodGhpc1tpbnB1dF0ubGFiZWwuc2luZ3VsYXIpIHtcXG4gICAgICBIVE1MID0gdGhpc1tpbnB1dF0ubGFiZWwuc2luZ3VsYXIodGhpc1tpbnB1dF0udmFsdWUpO1xcbiAgICB9IGVsc2UgaWYgKHRoaXNbaW5wdXRdLmxhYmVsLmRlZmF1bHQpIHtcXG4gICAgICBIVE1MID0gdGhpc1tpbnB1dF0ubGFiZWwuZGVmYXVsdCh0aGlzW2lucHV0XS52YWx1ZSk7XFxuICAgIH1cXG4gIH0gZWxzZSB7XFxuICAgIGlmICh0aGlzW2lucHV0XS5sYWJlbC5wbHVyYWwpIHtcXG4gICAgICBIVE1MID0gdGhpc1tpbnB1dF0ubGFiZWwucGx1cmFsKHRoaXNbaW5wdXRdLnZhbHVlKTtcXG4gICAgfSBlbHNlIGlmICh0aGlzW2lucHV0XS5sYWJlbC5kZWZhdWx0KSB7XFxuICAgICAgSFRNTCA9IHRoaXNbaW5wdXRdLmxhYmVsLmRlZmF1bHQodGhpc1tpbnB1dF0udmFsdWUpO1xcbiAgICB9XFxuICB9XFxuXFxuICBpZiAodGhpc1tpbnB1dF0ubGFiZWwuZWwpIHtcXG4gICAgdGhpc1tpbnB1dF0ubGFiZWwuZWwuaW5uZXJIVE1MID0gSFRNTDtcXG4gIH1cXG59O1xcblxcbklucHV0LnByb3RvdHlwZS5jcmVhdGVMaW5lID0gZnVuY3Rpb24gKCkge1xcbiAgdmFyIGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XFxuICBsaW5lLmNsYXNzTGlzdC5hZGQoJ2FiY19yYW5nZV9fbGluZScpO1xcbiAgbGluZS5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSAnbGVmdCc7XFxuICByZXR1cm4gbGluZTtcXG59O1xcblxcbklucHV0LnByb3RvdHlwZS51cGRhdGVMaW5lID0gZnVuY3Rpb24gKHZhbCkge1xcbiAgdmFyIG1pbiA9IDEwMCAqIHRoaXMubWluLnZhbHVlIC8gdGhpcy5taW4ubWF4O1xcbiAgdmFyIG1heCA9IHRoaXMubWluLnZhbHVlIC8gdGhpcy5tYXgubWF4IC0gdGhpcy5tYXgudmFsdWUgLyB0aGlzLm1heC5tYXg7XFxuXFxuICBpZiAodmFsID09PSAnbWluJykge1xcbiAgICB0aGlzLmxpbmUudGFyZ2V0LnN0eWxlLmxlZnQgPSBtaW4gKyAnJSc7XFxuXFxuICAgIGlmICh0aGlzLm11bHRpcGxlKSB7XFxuICAgICAgdGhpcy5saW5lLnRhcmdldC5zdHlsZS50cmFuc2Zvcm0gPSBcXFwic2NhbGVYKFxcXCIuY29uY2F0KE1hdGguYWJzKG1heCksIFxcXCIpXFxcIik7XFxuICAgIH1cXG4gIH1cXG5cXG4gIGlmICh2YWwgPT09ICdtYXgnKSB7XFxuICAgIHRoaXMubGluZS50YXJnZXQuc3R5bGUudHJhbnNmb3JtID0gXFxcInNjYWxlWChcXFwiLmNvbmNhdChNYXRoLmFicyhtYXgpLCBcXFwiKVxcXCIpO1xcbiAgfVxcbn07Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5emNtTXZVbUZ1WjJVdlEyOXlaUzlKYm5CMWRDNXFjeTVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEZDUXk4dUwzTnlZeTlTWVc1blpTOURiM0psTDBsdWNIVjBMbXB6UHpaaE1XSWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlIc2djMlYwUVhKeVlYa2dmU0FnUFNCeVpYRjFhWEpsSUNnbkxpNHZMaTR2U0dWc2NHVnljeTlCY25KaGVTY2dLVHRjYmx4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlDaGxiQ2tnUFQ0Z2V5QnlaWFIxY200Z2JtVjNJRWx1Y0hWMEtHVnNLU0I5WEc1Y2JtWjFibU4wYVc5dUlFbHVjSFYwS0dWc0tYdGNiaUFnSUNCMGFHbHpMbVJwWm1ZZ1BTQXhYRzRnSUNBZ2RHaHBjeTV0ZFd4MGFYQnNaU0E5SUdaaGJITmxYRzRnSUNBZ2RHaHBjeTV1WVcxbElDQWdJRDBnWm1Gc2MyVmNiaUFnSUNCMGFHbHpMbU52YlhCaGNtVWdQU0JtWVd4elpWeHVJQ0FnSUhSb2FYTXVkWEpzWDI1aGJXVTlJR1poYkhObFhHNGdJQ0FnZEdocGN5NXZjR1Z5WVhSdmNqMGdYQ0p2Y2x3aVhHNGdJQ0FnZEdocGN5NXlaV3hoZEdsdmJqMGdYQ0poYm1SY0lseHVYRzRnSUNBZ2RHaHBjeTV0YVc0Z1BTQjdYRzRnSUNBZ0lDQWdJR3hoWW1Wc09pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFlYSm5aWFE2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnphVzVuZFd4aGNqcG1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJzZFhKaGJEcG1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSHBsY204NlptRnNjMlZjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0J1WVcxbE9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ2JXbHVPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REb2dabUZzYzJVc1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdWJXRjRJRDBnZTF4dUlDQWdJQ0FnSUNCc1lXSmxiRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWME9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJsdVozVnNZWEk2Wm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCd2JIVnlZV3c2Wm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCNlpYSnZPbVpoYkhObFhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUc1aGJXVTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQnRZWGc2SUdaaGJITmxYRzRnSUNBZ2ZTQWdJQ0JjYmx4dUlDQWdJSFJvYVhNdWJHbHVaU0E5SUh0Y2JpQWdJQ0FnSUNBZ2RHRnlaMlYwSURvZ2RHaHBjeTVqY21WaGRHVk1hVzVsS0NsY2JpQWdJQ0I5WEc0Z0lDQWdYRzU5WEc1SmJuQjFkQzV3Y205MGIzUjVjR1V1WTI5dWMzUnlkV04wSUQwZ1puVnVZM1JwYjI0b2NHRnlZVzF6S1h0Y2JseHVJQ0FnSUZ4dUlDQWdJR2xtSUNod1lYSmhiWE1wSUhObGRFRnljbUY1S0hSb2FYTXNJSEJoY21GdGN5azdYRzVjYmlBZ0lDQnBaaWgwYUdsekxtMXBiaTV1WVcxbEtTQjBhR2x6TG0xcGJpNTBZWEpuWlhRZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0dCYmJtRnRaVDFjSWlSN2RHaHBjeTV0YVc0dWJtRnRaWDFjSWwxZ0tWeHVJQ0FnSUdsbUtIUm9hWE11YldGNExtNWhiV1VwSUhSb2FYTXViV0Y0TG5SaGNtZGxkQ0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9ZRnR1WVcxbFBWd2lKSHQwYUdsekxtMWhlQzV1WVcxbGZWd2lYV0FwWEc0Z0lDQWdYRzRnSUNBZ2FXWW9kR2hwY3k1dGFXNHViR0ZpWld3dWRHRnlaMlYwS1NCMGFHbHpMbTFwYmk1c1lXSmxiQzVsYkNBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvZEdocGN5NXRhVzR1YkdGaVpXd3VkR0Z5WjJWMEtWeHVJQ0FnSUdsbUtIUm9hWE11YldGNExteGhZbVZzTG5SaGNtZGxkQ2tnZEdocGN5NXRZWGd1YkdGaVpXd3VaV3dnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLSFJvYVhNdWJXRjRMbXhoWW1Wc0xuUmhjbWRsZENsY2JseHVJQ0FnSUdsbUtIUm9hWE11YldsdUxuUmhjbWRsZENrZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dGFXNHVkR0Z5WjJWMExuQmhjbVZ1ZEU1dlpHVXVZWEJ3Wlc1a1EyaHBiR1FvZEdocGN5NXNhVzVsTG5SaGNtZGxkQ2xjYmlBZ0lDQWdJQ0FnZEdocGN5NXNhVzVsTG5SaGNtZGxkQzUzYVdSMGFDQTlJSFJvYVhNdWJHbHVaUzUwWVhKblpYUXVZMnhwWlc1MFYybGtkR2hjYmx4dUlDQWdJQ0FnSUNCcFppaDBhR2x6TG0xMWJIUnBjR3hsSUNZbUlFNTFiV0psY2loMGFHbHpMbTFwYmk1MFlYSm5aWFF1ZG1Gc2RXVXBJRHc5SUU1MWJXSmxjaWgwYUdsekxtMWhlQzUwWVhKblpYUXVkbUZzZFdVcElDMGdkR2hwY3k1a2FXWm1LU0IwYUdsekxuVndaR0YwWlNnbmJXbHVKeWxjYmlBZ0lDQWdJQ0FnWld4elpTQjBhR2x6TG0xcGJpNTBZWEpuWlhRdWRtRnNkV1VnUFNCT2RXMWlaWElvZEdocGN5NXRZWGd1ZEdGeVoyVjBMblpoYkhWbEtTQXRJSFJvYVhNdVpHbG1abHh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXViV2x1TG0xcGJpQTlJSFJvYVhNdWJXbHVMblJoY21kbGRDNW5aWFJCZEhSeWFXSjFkR1VvSjIxcGJpY3BYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXbHVMbTFoZUNBOUlIUm9hWE11YldsdUxuUmhjbWRsZEM1blpYUkJkSFJ5YVdKMWRHVW9KMjFoZUNjcFhHNGdJQ0FnSUNBZ0lHbG1LQ0YwYUdsekxtMTFiSFJwY0d4bEtTQjBhR2x6TG5Wd1pHRjBaU2duYldsdUp5bGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1VvSjIxcGJpY3BYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVEdsdVpTZ25iV2x1SnlsY2JpQWdJQ0I5WEc0Z0lDQWdhV1lvZEdocGN5NXRZWGd1ZEdGeVoyVjBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUtIUm9hWE11YlhWc2RHbHdiR1VnSmlZZ1RuVnRZbVZ5S0hSb2FYTXViV2x1TG5SaGNtZGxkQzUyWVd4MVpTa2dLeUIwYUdsekxtUnBabVlnUEQwZ1RuVnRZbVZ5S0hSb2FYTXViV0Y0TG5SaGNtZGxkQzUyWVd4MVpTa3BJSFJvYVhNdWRYQmtZWFJsS0NkdFlYZ25LVnh1SUNBZ0lDQWdJQ0JsYkhObElIUm9hWE11YldGNExuUmhjbWRsZEM1MllXeDFaU0E5SUNCT2RXMWlaWElvZEdocGN5NXRhVzR1ZEdGeVoyVjBMblpoYkhWbEtTQXJJSFJvYVhNdVpHbG1abHh1SUNBZ0lDQWdJQ0IwYUdsekxtMWhlQzV0YVc0Z1BTQjBhR2x6TG0xaGVDNTBZWEpuWlhRdVoyVjBRWFIwY21saWRYUmxLQ2R0YVc0bktWeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xaGVDNXRZWGdnUFNCMGFHbHpMbTFoZUM1MFlYSm5aWFF1WjJWMFFYUjBjbWxpZFhSbEtDZHRZWGduS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMblZ3WkdGMFpTZ25iV0Y0SnlsY2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVk1hVzVsS0NkdFlYZ25LVnh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbUpwYm1SRmRtVnVkSE1vS1NBZ1hHNTlYRzVKYm5CMWRDNXdjbTkwYjNSNWNHVXVZbWx1WkVWMlpXNTBjeUE5SUdaMWJtTjBhVzl1S0NsN1hHNWNiaUFnSUNCcFppaDBhR2x6TG0xcGJpNTBZWEpuWlhRcElIUm9hWE11YldsdUxuUmhjbWRsZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkcGJuQjFkQ2NzSUdVZ1BUNGdlMXh1SUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0JwWmloMGFHbHpMbTExYkhScGNHeGxJQ1ltSUU1MWJXSmxjaWgwYUdsekxtMXBiaTUwWVhKblpYUXVkbUZzZFdVcElEdzlJRTUxYldKbGNpaDBhR2x6TG0xaGVDNTBZWEpuWlhRdWRtRnNkV1VwSUMwZ2RHaHBjeTVrYVdabUtTQjBhR2x6TG5Wd1pHRjBaU2duYldsdUp5bGNiaUFnSUNBZ0lDQWdaV3h6WlNCMGFHbHpMbTFwYmk1MFlYSm5aWFF1ZG1Gc2RXVWdQU0JPZFcxaVpYSW9kR2hwY3k1dFlYZ3VkR0Z5WjJWMExuWmhiSFZsS1NBdElIUm9hWE11WkdsbVpseHVJQ0FnSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaVXhwYm1Vb0oyMXBiaWNwWEc0Z0lDQWdJQ0FnSUdsbUtDRjBhR2x6TG0xMWJIUnBjR3hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuVndaR0YwWlNnbmJXbHVKeWxjYmlBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUtWeHVJQ0FnSUdsbUtIUm9hWE11YldGNExuUmhjbWRsZENrZ2RHaHBjeTV0WVhndWRHRnlaMlYwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJsdWNIVjBKeXdnWlNBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtS0hSb2FYTXViWFZzZEdsd2JHVWdKaVlnVG5WdFltVnlLSFJvYVhNdWJXbHVMblJoY21kbGRDNTJZV3gxWlNrZ0t5QjBhR2x6TG1ScFptWWdQRDBnVG5WdFltVnlLSFJvYVhNdWJXRjRMblJoY21kbGRDNTJZV3gxWlNrcElIUm9hWE11ZFhCa1lYUmxLQ2R0WVhnbktWeHVJQ0FnSUNBZ0lDQmxiSE5sSUhSb2FYTXViV0Y0TG5SaGNtZGxkQzUyWVd4MVpTQTlJQ0JPZFcxaVpYSW9kR2hwY3k1dGFXNHVkR0Z5WjJWMExuWmhiSFZsS1NBcklIUm9hWE11WkdsbVpseHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsS0NkdFlYZ25LVnh1SUNBZ0lDQWdJQ0IwYUdsekxuVndaR0YwWlV4cGJtVW9KMjFoZUNjcFhHNGdJQ0FnZlNsY2JuMWNia2x1Y0hWMExuQnliM1J2ZEhsd1pTNTFjR1JoZEdVZ1BTQm1kVzVqZEdsdmJpaHBibkIxZENsN1hHNGdJQ0FnZEdocGMxdHBibkIxZEYwdWRHRnlaMlYwTG5ObGRFRjBkSEpwWW5WMFpTZ25kbUZzZFdVbkxDQjBhR2x6VzJsdWNIVjBYUzUwWVhKblpYUXVkbUZzZFdVcFhHNGdJQ0FnZEdocGMxdHBibkIxZEYwdWRtRnNkV1VnUFNCMGFHbHpXMmx1Y0hWMFhTNTBZWEpuWlhRdWRtRnNkV1ZjYmlBZ0lDQnNaWFFnU0ZSTlREdGNibHh1SUNBZ0lHbG1LRTUxYldKbGNpaDBhR2x6VzJsdWNIVjBYUzUyWVd4MVpTa2dQVDA5SURBcGUxeHVJQ0FnSUNBZ0lDQnBaaWgwYUdselcybHVjSFYwWFM1c1lXSmxiQzU2WlhKdktTQklWRTFNSUQwZ2RHaHBjMXRwYm5CMWRGMHViR0ZpWld3dWVtVnlieWgwYUdselcybHVjSFYwWFM1MllXeDFaU2xjYmlBZ0lDQWdJQ0FnWld4elpTQnBaaWgwYUdselcybHVjSFYwWFM1c1lXSmxiQzV6YVc1bmRXeGhjaWtnU0ZSTlRDQTlJSFJvYVhOYmFXNXdkWFJkTG14aFltVnNMbk5wYm1kMWJHRnlLSFJvYVhOYmFXNXdkWFJkTG5aaGJIVmxLVnh1SUNBZ0lDQWdJQ0JsYkhObElHbG1LSFJvYVhOYmFXNXdkWFJkTG14aFltVnNMbVJsWm1GMWJIUXBJRWhVVFV3Z1BTQjBhR2x6VzJsdWNIVjBYUzVzWVdKbGJDNWtaV1poZFd4MEtIUm9hWE5iYVc1d2RYUmRMblpoYkhWbEtWeHVJQ0FnSUgxY2JpQWdJQ0JsYkhObElHbG1LRTUxYldKbGNpaDBhR2x6VzJsdWNIVjBYUzUyWVd4MVpTa2dQVDA5SURFcGUxeHVJQ0FnSUNBZ0lDQnBaaWgwYUdselcybHVjSFYwWFM1c1lXSmxiQzV6YVc1bmRXeGhjaWtnU0ZSTlRDQTlJSFJvYVhOYmFXNXdkWFJkTG14aFltVnNMbk5wYm1kMWJHRnlLSFJvYVhOYmFXNXdkWFJkTG5aaGJIVmxLVnh1SUNBZ0lDQWdJQ0JsYkhObElHbG1LSFJvYVhOYmFXNXdkWFJkTG14aFltVnNMbVJsWm1GMWJIUXBJRWhVVFV3Z1BTQjBhR2x6VzJsdWNIVjBYUzVzWVdKbGJDNWtaV1poZFd4MEtIUm9hWE5iYVc1d2RYUmRMblpoYkhWbEtWeHVJQ0FnSUgxbGJITmxlMXh1SUNBZ0lDQWdJQ0JwWmloMGFHbHpXMmx1Y0hWMFhTNXNZV0psYkM1d2JIVnlZV3dwSUVoVVRVd2dQU0IwYUdselcybHVjSFYwWFM1c1lXSmxiQzV3YkhWeVlXd29kR2hwYzF0cGJuQjFkRjB1ZG1Gc2RXVXBYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWW9kR2hwYzF0cGJuQjFkRjB1YkdGaVpXd3VaR1ZtWVhWc2RDa2dTRlJOVENBOUlIUm9hWE5iYVc1d2RYUmRMbXhoWW1Wc0xtUmxabUYxYkhRb2RHaHBjMXRwYm5CMWRGMHVkbUZzZFdVcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZb2RHaHBjMXRwYm5CMWRGMHViR0ZpWld3dVpXd3BJSFJvYVhOYmFXNXdkWFJkTG14aFltVnNMbVZzTG1sdWJtVnlTRlJOVENBOUlFaFVUVXhjYm4xY2JseHVTVzV3ZFhRdWNISnZkRzkwZVhCbExtTnlaV0YwWlV4cGJtVWdQU0JtZFc1amRHbHZiaWdwZTF4dUlDQWdJR052Ym5OMElHeHBibVVnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2R6Y0dGdUp5bGNiaUFnSUNCc2FXNWxMbU5zWVhOelRHbHpkQzVoWkdRb0oyRmlZMTl5WVc1blpWOWZiR2x1WlNjcFhHNGdJQ0FnYkdsdVpTNXpkSGxzWlM1MGNtRnVjMlp2Y20xUGNtbG5hVzRnUFNBbmJHVm1kQ2RjYmlBZ0lDQnlaWFIxY200Z2JHbHVaVnh1ZlZ4dVhHNUpibkIxZEM1d2NtOTBiM1I1Y0dVdWRYQmtZWFJsVEdsdVpTQTlJR1oxYm1OMGFXOXVLQ0IyWVd3Z0tYdGNiaUFnSUNCamIyNXpkQ0J0YVc0Z1BTQW9NVEF3SUNvZ2RHaHBjeTV0YVc0dWRtRnNkV1VwSUM4Z2RHaHBjeTV0YVc0dWJXRjRYRzRnSUNBZ1kyOXVjM1FnYldGNElEMGdLSFJvYVhNdWJXbHVMblpoYkhWbElDOGdkR2hwY3k1dFlYZ3ViV0Y0S1NBdElDaDBhR2x6TG0xaGVDNTJZV3gxWlNBdklIUm9hWE11YldGNExtMWhlQ2xjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdhV1lvZG1Gc0lEMDlQU0FuYldsdUp5bDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHbHVaUzUwWVhKblpYUXVjM1I1YkdVdWJHVm1kQ0E5SUcxcGJpQXJJQ2NsSjF4dUlDQWdJQ0FnSUNCcFppaDBhR2x6TG0xMWJIUnBjR3hsS1NCMGFHbHpMbXhwYm1VdWRHRnlaMlYwTG5OMGVXeGxMblJ5WVc1elptOXliU0E5SUdCelkyRnNaVmdvSkh0TllYUm9MbUZpY3lodFlYZ3BmU2xnWEc0Z0lDQWdmVnh1SUNBZ0lHbG1LSFpoYkNBOVBUMGdKMjFoZUNjcGUxeHVJQ0FnSUNBZ0lDQjBhR2x6TG14cGJtVXVkR0Z5WjJWMExuTjBlV3hsTG5SeVlXNXpabTl5YlNBOUlHQnpZMkZzWlZnb0pIdE5ZWFJvTG1GaWN5aHRZWGdwZlNsZ1hHNGdJQ0FnZlZ4dWZTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUlVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRk1RVHRCUVU5Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQldFRTdRVUZoUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVXhCTzBGQlQwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRllRVHRCUVdOQk8wRkJRMEU3UVVGRVFUdEJRVWxCTzBGQlEwRTdRVUZCUVR0QlFVZEJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJSVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGVVFUdEJRVU5CTzBGQlUwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZPUVR0QlFVOUJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vc3JjL1JhbmdlL0NvcmUvSW5wdXQuanNcXG5cIil9LFwiLi9zcmMvUmFuZ2UvaW5pdC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1JhbmdlL2luaXQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2V2YWwoJ3ZhciBJbnB1dCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQ29yZS9JbnB1dCAqLyBcIi4vc3JjL1JhbmdlL0NvcmUvSW5wdXQuanNcIik7XFxuXFxudmFyIFJhbmdlID0gbW9kdWxlLmV4cG9ydHMgPSB7XFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHBhcmFtcykge1xcbiAgICByZXR1cm4gbmV3IElucHV0KCkuY29uc3RydWN0KHBhcmFtcyk7XFxuICB9XFxufTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdlVtRnVaMlV2YVc1cGRDNXFjeTVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEZDUXk4dUwzTnlZeTlTWVc1blpTOXBibWwwTG1welAyWXpOV0VpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJRWx1Y0hWMElEMGdjbVZ4ZFdseVpTZ25MaTlEYjNKbEwwbHVjSFYwSnlsY2JuWmhjaUJTWVc1blpTQTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNBZ0lHbHVhWFE2SUdaMWJtTjBhVzl1SUNod1lYSmhiWE1wSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkpibkIxZENncExtTnZibk4wY25WamRDaHdZWEpoYlhNcElGeHVJQ0FnSUgxY2JuMWNiaUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU0VFaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9SYW5nZS9pbml0LmpzXFxuJyl9LFwiLi9zcmMvU2VsZWN0L0NvcmUvQm9keS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1NlbGVjdC9Db3JlL0JvZHkuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XFxuICByZXR1cm4gbmV3IEJvZHkoKTtcXG59O1xcblxcbmZ1bmN0aW9uIEJvZHkoKSB7XFxuICB0aGlzLnRhZyA9ICd1bCc7XFxuICB0aGlzLmNsYXNzTmFtZSA9ICdhYmMtc2VsZWN0X19ib2R5JztcXG4gIHRoaXMudGFyZ2V0ID0gZmFsc2U7XFxuICB0aGlzLmF1dG9faGVpZ2h0ID0gdHJ1ZTtcXG4gIHRoaXMuY2xvc2UgPSAwO1xcbiAgcmV0dXJuIHRoaXM7XFxufVxcblxcbkJvZHkucHJvdG90eXBlLmNvbnN0cnVjdCA9IGZ1bmN0aW9uIChvcHQpIHtcXG4gIHRoaXMudGFyZ2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChvcHQuYm9keS50YWcpO1xcbiAgb3B0LmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnRhcmdldCk7XFxuXFxuICBpZiAob3B0Lm9wdGlvbnMpIHtcXG4gICAgdGhpcy5lbHMgPSBvcHQub3B0aW9ucy5jb25zdHJ1Y3QodGhpcy50YXJnZXQpO1xcbiAgfVxcblxcbiAgdGhpcy50YXJnZXQuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZSk7XFxuICB0aGlzLnRhcmdldC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbGlzdGJveCcpO1xcbiAgdGhpcy50YXJnZXQuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xcblxcbiAgaWYgKHRoaXMuYXV0b19oZWlnaHQpIHtcXG4gICAgdGhpcy5zZXRIZWlnaHQoKTtcXG4gIH1cXG59O1xcblxcbkJvZHkucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcXG4gIHRoaXMuaGVpZ2h0ID0gdGhpcy5nZXRIZWlnaHQoKTtcXG4gIHRoaXMudGFyZ2V0LnN0eWxlLmhlaWdodCA9IFxcXCJcXFwiLmNvbmNhdCh0aGlzLmhlaWdodCwgXFxcInB4XFxcIik7XFxufTtcXG5cXG5Cb2R5LnByb3RvdHlwZS5nZXRIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XFxuICByZXR1cm4gdGhpcy50YXJnZXQuc2Nyb2xsSGVpZ2h0O1xcbn07XFxuXFxuQm9keS5wcm90b3R5cGUuc3RhdGUgPSBmdW5jdGlvbiAob3Blbikge1xcbiAgdGhpcy50YXJnZXQuc3R5bGUuaGVpZ2h0ID0gb3BlbiA/IFxcXCJcXFwiLmNvbmNhdCh0aGlzLmhlaWdodCwgXFxcInB4XFxcIikgOiBcXFwiXFxcIi5jb25jYXQodGhpcy5jbG9zZSwgXFxcInB4XFxcIik7IC8vIHRoaXMuZWxzLmZvckVhY2goZWwgPT4gZWwuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsIG9wZW4gPyAnMCcgOiAnLTEnICkpXFxufTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdlUyVnNaV04wTDBOdmNtVXZRbTlrZVM1cWN5NXFjeUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwwRkNReTh1TDNOeVl5OVRaV3hsWTNRdlEyOXlaUzlDYjJSNUxtcHpQelkyTmpRaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQW9LU0E5UGlCN0lISmxkSFZ5YmlCdVpYY2dRbTlrZVNncElIMWNibHh1Wm5WdVkzUnBiMjRnUW05a2VTZ3BlMXh1SUNBZ0lIUm9hWE11ZEdGbklEMGdKM1ZzSjF4dUlDQWdJSFJvYVhNdVkyeGhjM05PWVcxbElEMGdKMkZpWXkxelpXeGxZM1JmWDJKdlpIa25YRzRnSUNBZ2RHaHBjeTUwWVhKblpYUWdQU0JtWVd4elpWeHVJQ0FnSUhSb2FYTXVZWFYwYjE5b1pXbG5hSFFnUFNCMGNuVmxYRzRnSUNBZ2RHaHBjeTVqYkc5elpTQTlJREJjYmlBZ0lDQmNiaUFnSUNCY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JuMWNibHh1UW05a2VTNXdjbTkwYjNSNWNHVXVZMjl1YzNSeWRXTjBJRDBnWm5WdVkzUnBiMjRvYjNCMEtYdGNibHh1SUNBZ0lGeHVJQ0FnSUhSb2FYTXVkR0Z5WjJWMElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENodmNIUXVZbTlrZVM1MFlXY3BYRzRnSUNBZ2IzQjBMbU52Ym5SaGFXNWxjaTVoY0hCbGJtUkRhR2xzWkNoMGFHbHpMblJoY21kbGRDbGNibHh1SUNBZ0lHbG1LRzl3ZEM1dmNIUnBiMjV6SUNrZ2RHaHBjeTVsYkhNZ1BTQnZjSFF1YjNCMGFXOXVjeTVqYjI1emRISjFZM1FvZEdocGN5NTBZWEpuWlhRcElGeHVYRzVjYmlBZ0lDQjBhR2x6TG5SaGNtZGxkQzVqYkdGemMweHBjM1F1WVdSa0tIUm9hWE11WTJ4aGMzTk9ZVzFsS1Z4dUlDQWdJSFJvYVhNdWRHRnlaMlYwTG5ObGRFRjBkSEpwWW5WMFpTZ25jbTlzWlNjc0lDZHNhWE4wWW05NEp5bGNiaUFnSUNCMGFHbHpMblJoY21kbGRDNXpaWFJCZEhSeWFXSjFkR1VvSjNSaFltbHVaR1Y0Snl3Z0p5MHhKeWxjYmx4dUlDQWdJR2xtS0hSb2FYTXVZWFYwYjE5b1pXbG5hSFFwSUhSb2FYTXVjMlYwU0dWcFoyaDBLQ2xjYmlBZ0lDQmNibjFjYmx4dVFtOWtlUzV3Y205MGIzUjVjR1V1YzJWMFNHVnBaMmgwSUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNCMGFHbHpMbWhsYVdkb2RDQTlJSFJvYVhNdVoyVjBTR1ZwWjJoMEtDbGNiaUFnSUNCMGFHbHpMblJoY21kbGRDNXpkSGxzWlM1b1pXbG5hSFFnUFNCZ0pIdDBhR2x6TG1obGFXZG9kSDF3ZUdCY2JuMWNia0p2WkhrdWNISnZkRzkwZVhCbExtZGxkRWhsYVdkb2RDQTlJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11ZEdGeVoyVjBMbk5qY205c2JFaGxhV2RvZEZ4dUlDQWdJRnh1ZlZ4dVhHNUNiMlI1TG5CeWIzUnZkSGx3WlM1emRHRjBaU0E5SUdaMWJtTjBhVzl1S0c5d1pXNHBJSHRjYmlBZ0lDQjBhR2x6TG5SaGNtZGxkQzV6ZEhsc1pTNW9aV2xuYUhRZ1BTQnZjR1Z1SUQ4Z1lDUjdkR2hwY3k1b1pXbG5hSFI5Y0hoZ0lEb2dZQ1I3ZEdocGN5NWpiRzl6Wlgxd2VHQmNiaUFnSUNBdkx5QjBhR2x6TG1Wc2N5NW1iM0pGWVdOb0tHVnNJRDArSUdWc0xuTmxkRUYwZEhKcFluVjBaU2duZEdGaVNXNWtaWGduTENCdmNHVnVJRDhnSnpBbklEb2dKeTB4SnlBcEtWeHVmU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGSFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVZEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9zcmMvU2VsZWN0L0NvcmUvQm9keS5qc1xcblwiKX0sXCIuL3NyYy9TZWxlY3QvQ29yZS9IZWFkLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvU2VsZWN0L0NvcmUvSGVhZC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe2V2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcXG4gIHJldHVybiBuZXcgSGVhZCgpO1xcbn07XFxuXFxuZnVuY3Rpb24gSGVhZCgpIHtcXG4gIHRoaXMudGFnID0gJ2J1dHRvbic7XFxuICB0aGlzLmNsYXNzTmFtZSA9ICdhYmMtc2VsZWN0X19oZWFkJztcXG4gIHRoaXMuZGVmYXVsdCA9IFxcXCJcXFwiO1xcbiAgdGhpcy5hdXRvID0gdHJ1ZTtcXG4gIHRoaXMuam9pbiA9ICcsJztcXG4gIHRoaXMubWF4X2NoYXIgPSBmYWxzZTtcXG4gIHJldHVybiB0aGlzO1xcbn1cXG5cXG5IZWFkLnByb3RvdHlwZS5jb25zdHJ1Y3QgPSBmdW5jdGlvbiAob3B0KSB7XFxuICB0aGlzLnRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy50YWcpO1xcbiAgb3B0LmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnRhcmdldCk7XFxuICB0aGlzLnRhcmdldC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lKTtcXG4gIHRoaXMudGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1oYXNQb3B1cCcsICdsaXN0Ym94Jyk7XFxuICB0aGlzLmRlZmF1bHQgPSB0aGlzLmRlZmF1bHQgPyB0aGlzLmRlZmF1bHQgOiBvcHQub3B0aW9ucy5vcHRpb25zWzBdLmlubmVySFRNTDtcXG4gIHRoaXMudGFyZ2V0LmlubmVySFRNTCA9IHRoaXMuZGVmYXVsdDtcXG59O1xcblxcbkhlYWQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XFxuICBpZiAoIXRoaXMuYXV0bykge1xcbiAgICByZXR1cm47XFxuICB9XFxuXFxuICB2YXIgaHRtbCA9IG9wdGlvbnMuc2VsZWN0ZWQgJiYgb3B0aW9ucy5zZWxlY3RlZC5sZW5ndGggPiAwID8gb3B0aW9ucy5kZWZhdWx0LmpvaW4odGhpcy5qb2luKSA6IHRoaXMuZGVmYXVsdDtcXG4gIHRoaXMudGFyZ2V0LmlubmVySFRNTCA9IHRoaXMubWF4X2NoYXIgJiYgaHRtbC5sZW5ndGggPiB0aGlzLm1heF9jaGFyID8gaHRtbC5zbGljZSgwLCB0aGlzLm1heF9jaGFyKSArICfigKYnIDogaHRtbDtcXG59Oy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXpjbU12VTJWc1pXTjBMME52Y21VdlNHVmhaQzVxY3k1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92TDBGQ1F5OHVMM055WXk5VFpXeGxZM1F2UTI5eVpTOUlaV0ZrTG1welB6UmhaRFlpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlDZ3BJRDArSUhzZ2NtVjBkWEp1SUc1bGR5QklaV0ZrS0NrZ2ZWeHVYRzVtZFc1amRHbHZiaUJJWldGa0tDbDdYRzRnSUNBZ2RHaHBjeTUwWVdjZ1BTQW5ZblYwZEc5dUoxeHVJQ0FnSUhSb2FYTXVZMnhoYzNOT1lXMWxJRDBnSjJGaVl5MXpaV3hsWTNSZlgyaGxZV1FuWEc0Z0lDQWdkR2hwY3k1a1pXWmhkV3gwSUQwZ1hDSmNJbHh1SUNBZ0lIUm9hWE11WVhWMGJ5QTlJSFJ5ZFdWY2JpQWdJQ0IwYUdsekxtcHZhVzRnUFNBbkxDZGNiaUFnSUNCMGFHbHpMbTFoZUY5amFHRnlJRDBnWm1Gc2MyVmNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1ZlZ4dVhHNUlaV0ZrTG5CeWIzUnZkSGx3WlM1amIyNXpkSEoxWTNRZ1BTQm1kVzVqZEdsdmJpaHZjSFFwZTF4dUlDQWdJSFJvYVhNdWRHRnlaMlYwSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2gwYUdsekxuUmhaeWxjYmlBZ0lDQnZjSFF1WTI5dWRHRnBibVZ5TG1Gd2NHVnVaRU5vYVd4a0tIUm9hWE11ZEdGeVoyVjBLVnh1WEc0Z0lDQWdkR2hwY3k1MFlYSm5aWFF1WTJ4aGMzTk1hWE4wTG1Ga1pDaDBhR2x6TG1Oc1lYTnpUbUZ0WlNsY2JseHVJQ0FnSUhSb2FYTXVkR0Z5WjJWMExuTmxkRUYwZEhKcFluVjBaU2duWVhKcFlTMW9ZWE5RYjNCMWNDY3NJQ2RzYVhOMFltOTRKeWxjYmlBZ0lDQjBhR2x6TG1SbFptRjFiSFFnUFNCMGFHbHpMbVJsWm1GMWJIUWdQeUIwYUdsekxtUmxabUYxYkhRZ09pQnZjSFF1YjNCMGFXOXVjeTV2Y0hScGIyNXpXekJkTG1sdWJtVnlTRlJOVEZ4dUlDQWdJSFJvYVhNdWRHRnlaMlYwTG1sdWJtVnlTRlJOVENBOUlIUm9hWE11WkdWbVlYVnNkRnh1SUNBZ0lGeHVmVnh1WEc1SVpXRmtMbkJ5YjNSdmRIbHdaUzUxY0dSaGRHVWdQU0JtZFc1amRHbHZiaWh2Y0hScGIyNXpLWHRjYmlBZ0lDQnBaaWdoZEdocGN5NWhkWFJ2S1NCeVpYUjFjbTVjYmlBZ0lDQmNiaUFnSUNCamIyNXpkQ0JvZEcxc0lEMGdiM0IwYVc5dWN5NXpaV3hsWTNSbFpDQW1KaUJ2Y0hScGIyNXpMbk5sYkdWamRHVmtMbXhsYm1kMGFDQStJREFnUHlCdmNIUnBiMjV6TG1SbFptRjFiSFF1YW05cGJpaDBhR2x6TG1wdmFXNHBJRG9nZEdocGN5NWtaV1poZFd4MFhHNGdJQ0FnWEc0Z0lDQWdkR2hwY3k1MFlYSm5aWFF1YVc1dVpYSklWRTFNSUQwZ2RHaHBjeTV0WVhoZlkyaGhjaUFtSmlCb2RHMXNMbXhsYm1kMGFDQStJSFJvYVhNdWJXRjRYMk5vWVhJZ1B5Qm9kRzFzTG5Oc2FXTmxLREFzSUhSb2FYTXViV0Y0WDJOb1lYSXBJQ3NnSitLQXBpY2dPaUJvZEcxc1hHNTlJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9zcmMvU2VsZWN0L0NvcmUvSGVhZC5qc1xcblwiKX0sXCIuL3NyYy9TZWxlY3QvQ29yZS9JbnB1dC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9TZWxlY3QvQ29yZS9JbnB1dC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2V2YWwoXCJ2YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi9IZWxwZXJzL0FycmF5ICovIFxcXCIuL3NyYy9IZWxwZXJzL0FycmF5LmpzXFxcIiksXFxuICAgIHNldEFycmF5ID0gX3JlcXVpcmUuc2V0QXJyYXk7XFxuXFxudmFyIEhlYWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0hlYWQgKi8gXFxcIi4vc3JjL1NlbGVjdC9Db3JlL0hlYWQuanNcXFwiKTtcXG5cXG52YXIgQm9keSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQm9keSAqLyBcXFwiLi9zcmMvU2VsZWN0L0NvcmUvQm9keS5qc1xcXCIpO1xcblxcbnZhciBPcHRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9PcHRpb25zICovIFxcXCIuL3NyYy9TZWxlY3QvQ29yZS9PcHRpb25zLmpzXFxcIik7XFxuXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZWwpIHtcXG4gIHJldHVybiBuZXcgSW5wdXQoZWwpO1xcbn07XFxuXFxuZnVuY3Rpb24gSW5wdXQoZWwpIHtcXG4gIHRoaXMuaW5wdXQgPSB7XFxuICAgIG11bHRpcGxlOiBmYWxzZSxcXG4gICAgdGFnOiAnZGl2JyxcXG4gICAgdGFyZ2V0OiBmYWxzZSxcXG4gICAgb3BlbjogZmFsc2UsXFxuICAgIG9wZW5DbGFzczogJ2FiYy1zZWxlY3QtLW9wZW4nXFxuICB9O1xcbiAgdGhpcy5lbCA9IGVsOyAvLyB0aGlzLmVsLnNldEF0dHJpYnV0ZSgndGFiSW5kZXgnLCAnLTEnKVxcblxcbiAgdGhpcy5ib2R5ID0gbmV3IEJvZHkoKTtcXG4gIHRoaXMuaGVhZCA9IG5ldyBIZWFkKCk7XFxuICB0aGlzLm9wdGlvbnMgPSBuZXcgT3B0aW9ucygpO1xcbiAgdGhpcy5mb2N1cyA9IC0xO1xcbn0gLy8gSW5wdXQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uKCl7XFxuLy8gICAgIHRoaXMuaGVhZC50YXJnZXQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcXG4vLyB9XFxuXFxuXFxuSW5wdXQucHJvdG90eXBlLmJpbmRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XFxuICB2YXIgX3RoaXMgPSB0aGlzO1xcblxcbiAgdGhpcy5oZWFkLnRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldnQpIHtcXG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XFxuXFxuICAgIF90aGlzLnVwZGF0ZSgpO1xcbiAgfSk7XFxuICB0aGlzLmhlYWQudGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgIGlmIChldnQua2V5Q29kZSA9PT0gMTMpIHtcXG4gICAgICBfdGhpcy51cGRhdGUoKTtcXG4gICAgfSBlbHNlIGlmIChbMzgsIDQwXS5pbmRleE9mKGV2dC5rZXlDb2RlKSA+IC0xKSB7XFxuICAgICAgX3RoaXMudXBkYXRlKHRydWUpO1xcbiAgICB9IGVsc2UgaWYgKFsyN10uaW5kZXhPZihldnQua2V5Q29kZSkgPiAtMSkge1xcbiAgICAgIF90aGlzLnVwZGF0ZShmYWxzZSk7XFxuXFxuICAgICAgX3RoaXMub3B0aW9ucy5lbHNbX3RoaXMuZm9jdXNdLmJsdXIoKTtcXG4gICAgfVxcblxcbiAgICBpZiAoX3RoaXMub3B0aW9ucy5zZWxlY3RlZCAmJiBfdGhpcy5vcHRpb25zLnNlbGVjdGVkWzBdKSB7XFxuICAgICAgX3RoaXMuZm9jdXMgPSBfdGhpcy5vcHRpb25zLnNlbGVjdGVkWzBdLmluZGV4O1xcblxcbiAgICAgIF90aGlzLm9wdGlvbnMuc2VsZWN0ZWRbMF0ucmVsYXRlZC5mb2N1cygpO1xcbiAgICB9IGVsc2UgX3RoaXMub3B0aW9ucy5lbHNbMF0uZm9jdXMoKTtcXG4gIH0pO1xcbiAgdGhpcy5ib2R5LnRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAvLyBpZiggWzM4LDQwXS5pbmRleE9mKGV2dC5rZXlDb2RlKSA+IC0xICkgdGhpcy51cGRhdGUodHJ1ZSkgXFxuICAgIGlmIChfdGhpcy5mb2N1cyAhPSBfdGhpcy5vcHRpb25zLmVscy5sZW5ndGggLSAxICYmIGV2dC5rZXlDb2RlID09PSA0MCkge1xcbiAgICAgIF90aGlzLmZvY3VzID0gX3RoaXMuZm9jdXMgKyAxO1xcbiAgICB9XFxuXFxuICAgIGlmIChfdGhpcy5mb2N1cyAhPSAwICYmIGV2dC5rZXlDb2RlID09PSAzOCkge1xcbiAgICAgIF90aGlzLmZvY3VzID0gX3RoaXMuZm9jdXMgLSAxO1xcbiAgICB9XFxuXFxuICAgIGlmIChfdGhpcy5mb2N1cyA+IC0xICYmIFszOCwgNDBdLmluZGV4T2YoZXZ0LmtleUNvZGUpID4gLTEpIHtcXG4gICAgICBfdGhpcy5vcHRpb25zLmVsc1tfdGhpcy5mb2N1c10uZm9jdXMoKTtcXG5cXG4gICAgICBpZiAoIV90aGlzLmlucHV0Lm11bHRpcGxlKSB7XFxuICAgICAgICBfdGhpcy5vcHRpb25zLnNpbmdsZShfdGhpcy5vcHRpb25zLmVsc1tfdGhpcy5mb2N1c10pO1xcblxcbiAgICAgICAgX3RoaXMuaGVhZC51cGRhdGUoX3RoaXMub3B0aW9ucyk7XFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgIGlmIChfdGhpcy5mb2N1cyA+IC0xICYmIGV2dC5rZXlDb2RlID09PSAxMyAmJiAhX3RoaXMuaW5wdXQubXVsdGlwbGUpIHtcXG4gICAgICBfdGhpcy51cGRhdGUoZmFsc2UpO1xcblxcbiAgICAgIF90aGlzLm9wdGlvbnMuZWxzW190aGlzLmZvY3VzXS5ibHVyKCk7XFxuICAgIH0gZWxzZSBpZiAoX3RoaXMuZm9jdXMgPiAtMSAmJiBldnQua2V5Q29kZSA9PT0gMTMgJiYgX3RoaXMuaW5wdXQubXVsdGlwbGUpIHtcXG4gICAgICBfdGhpcy5vcHRpb25zLm11bHRpKF90aGlzLm9wdGlvbnMuZWxzW190aGlzLmZvY3VzXSk7XFxuXFxuICAgICAgX3RoaXMuaGVhZC51cGRhdGUoX3RoaXMub3B0aW9ucyk7XFxuICAgIH0gZWxzZSBpZiAoX3RoaXMuZm9jdXMgPiAtMSAmJiBbMjcsIDldLmluZGV4T2YoZXZ0LmtleUNvZGUpID4gLTEpIHtcXG4gICAgICBfdGhpcy51cGRhdGUoZmFsc2UpO1xcblxcbiAgICAgIF90aGlzLm9wdGlvbnMuZWxzW190aGlzLmZvY3VzXS5ibHVyKCk7XFxuICAgIH1cXG4gIH0pO1xcbiAgdmFyIF9hID0gdGhpcy5vcHRpb25zLmVscztcXG5cXG4gIHZhciBfZiA9IGZ1bmN0aW9uIF9mKGVsKSB7XFxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xcbiAgICAgIGlmICghX3RoaXMuaW5wdXQubXVsdGlwbGUpIHtcXG4gICAgICAgIF90aGlzLm9wdGlvbnMuc2luZ2xlKGVsKTtcXG5cXG4gICAgICAgIF90aGlzLnVwZGF0ZShmYWxzZSk7XFxuXFxuICAgICAgICBlbC5ibHVyKCk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIF90aGlzLm9wdGlvbnMubXVsdGkoZWwpO1xcblxcbiAgICAgICAgX3RoaXMuaGVhZC51cGRhdGUoX3RoaXMub3B0aW9ucyk7XFxuICAgICAgfSAvLyB0aGlzLmhlYWQudXBkYXRlKHRoaXMub3B0aW9ucylcXG5cXG4gICAgfSk7IC8vIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldnQgPT4ge1xcbiAgICAvLyAgICAgIXRoaXMuaW5wdXQubXVsdGlwbGUgPyB0aGlzLm9wdGlvbnMuc2luZ2xlKGVsKSA6IHRoaXMub3B0aW9ucy5tdWx0aShlbClcXG4gICAgLy8gICAgIHRoaXMuaGVhZC51cGRhdGUodGhpcy5vcHRpb25zKVxcbiAgICAvLyB9KVxcbiAgfTtcXG5cXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcXG4gICAgX2YoX2FbX2ldLCBfaSwgX2EpO1xcbiAgfVxcblxcbiAgdW5kZWZpbmVkO1xcbn07XFxuXFxuSW5wdXQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChvcGVuKSB7XFxuICB0aGlzLm9wZW4gPSBvcGVuID8gb3BlbiA6ICF0aGlzLm9wZW47XFxuICB0aGlzLnN0YXRlKCk7XFxufTtcXG5cXG5JbnB1dC5wcm90b3R5cGUuY29uc3RydWN0ID0gZnVuY3Rpb24gKHBhcmFtcykge1xcbiAgaWYgKHBhcmFtcykge1xcbiAgICB0aGlzLmlucHV0ID0gc2V0QXJyYXkodGhpcy5pbnB1dCwgcGFyYW1zKTtcXG4gIH1cXG5cXG4gIGlmIChwYXJhbXMuYm9keSAhPSBmYWxzZSAmJiBwYXJhbXMuYm9keSkge1xcbiAgICB0aGlzLmJvZHkgPSBzZXRBcnJheSh0aGlzLmJvZHksIHBhcmFtcy5ib2R5KTtcXG4gIH0gZWxzZSBpZiAocGFyYW1zLmJvZHkgPT09IGZhbHNlKSB7XFxuICAgIHRoaXMuYm9keSA9IGZhbHNlO1xcbiAgfVxcblxcbiAgaWYgKHBhcmFtcy5oZWFkICE9IGZhbHNlICYmIHBhcmFtcy5oZWFkKSB7XFxuICAgIHRoaXMuaGVhZCA9IHNldEFycmF5KHRoaXMuaGVhZCwgcGFyYW1zLmhlYWQpO1xcbiAgfSBlbHNlIGlmIChwYXJhbXMuaGVhZCA9PT0gZmFsc2UpIHtcXG4gICAgdGhpcy5oZWFkID0gZmFsc2U7XFxuICB9XFxuXFxuICBpZiAocGFyYW1zLm9wdGlvbnMgIT0gZmFsc2UgJiYgcGFyYW1zLm9wdGlvbnMpIHtcXG4gICAgdGhpcy5vcHRpb25zID0gc2V0QXJyYXkodGhpcy5vcHRpb25zLCBwYXJhbXMub3B0aW9ucyk7XFxuICB9IGVsc2UgaWYgKHBhcmFtcy5vcHRpb25zID09PSBmYWxzZSkge1xcbiAgICB0aGlzLm9wdGlvbnMgPSBmYWxzZTtcXG4gIH1cXG5cXG4gIHRoaXMuY3JlYXRlKCk7XFxufTtcXG5cXG5JbnB1dC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xcbiAgdGhpcy5vcHRpb25zLm9wdGlvbnMgPSB0aGlzLmVsLm9wdGlvbnM7XFxuICB0aGlzLm9wdGlvbnMuc2VsZWN0ZWQgPSB0aGlzLmVsLnNlbGVjdGVkT3B0aW9ucztcXG4gIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLmlucHV0LnRhZyk7XFxuICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdhYmMtc2VsZWN0Jyk7XFxuICB0aGlzLmVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY29udGFpbmVyLCB0aGlzLmVsKTtcXG4gIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWwpO1xcblxcbiAgaWYgKHRoaXMuaGVhZCkge1xcbiAgICB0aGlzLmhlYWQuY29uc3RydWN0KHRoaXMpO1xcbiAgfVxcblxcbiAgaWYgKHRoaXMuYm9keSkge1xcbiAgICB0aGlzLmJvZHkuY29uc3RydWN0KHRoaXMpO1xcbiAgfVxcblxcbiAgaWYgKCF0aGlzLmhlYWQuZGVmYXVsdCkge1xcbiAgICB0aGlzLmhlYWQudGFyZ2V0LmlubmVySFRNTCA9IHRoaXMub3B0aW9ucy5vcHRpb25zWzBdLmlubmVySFRNTDtcXG4gIH1cXG5cXG4gIHRoaXMuc3RhdGUoKTtcXG4gIHRoaXMuYmluZEV2ZW50cygpO1xcbn07XFxuXFxuSW5wdXQucHJvdG90eXBlLnN0YXRlID0gZnVuY3Rpb24gKCkge1xcbiAgdGhpcy5vcGVuID8gdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCh0aGlzLmlucHV0Lm9wZW5DbGFzcykgOiB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuaW5wdXQub3BlbkNsYXNzKTtcXG4gIHRoaXMuYm9keS5zdGF0ZSh0aGlzLm9wZW4pO1xcbiAgdGhpcy5oZWFkLnVwZGF0ZSh0aGlzLm9wdGlvbnMpO1xcbn07Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5emNtTXZVMlZzWldOMEwwTnZjbVV2U1c1d2RYUXVhbk11YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlCUWtNdkxpOXpjbU12VTJWc1pXTjBMME52Y21VdlNXNXdkWFF1YW5NL09USTFPQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdleUJ6WlhSQmNuSmhlU0I5SUNBOUlISmxjWFZwY21VZ0tDY3VMaTh1TGk5SVpXeHdaWEp6TDBGeWNtRjVKeUFwTzF4dVhHNTJZWElnU0dWaFpDQTlJSEpsY1hWcGNtVWdLQ2N1TDBobFlXUW5JQ2s3WEc1MllYSWdRbTlrZVNBOUlISmxjWFZwY21VZ0tDY3VMMEp2WkhrbklDazdYRzUyWVhJZ1QzQjBhVzl1Y3lBOUlISmxjWFZwY21VZ0tDY3VMMDl3ZEdsdmJuTW5JQ2s3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ0tHVnNLU0E5UGlCN0lISmxkSFZ5YmlCdVpYY2dTVzV3ZFhRb1pXd3BJSDFjYmx4dVpuVnVZM1JwYjI0Z1NXNXdkWFFvWld3cGUxeHVJQ0FnSUhSb2FYTXVhVzV3ZFhRZ1BTQjdYRzRnSUNBZ0lDQWdJRzExYkhScGNHeGxJRG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJSFJoWnpvZ0oyUnBkaWNzWEc0Z0lDQWdJQ0FnSUhSaGNtZGxkQ0E2SUdaaGJITmxMQ0JjYmlBZ0lDQWdJQ0FnYjNCbGJqb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHOXdaVzVEYkdGemN5QTZJQ2RoWW1NdGMyVnNaV04wTFMxdmNHVnVKMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11Wld3Z1BTQmxiRHRjYmlBZ0lDQXZMeUIwYUdsekxtVnNMbk5sZEVGMGRISnBZblYwWlNnbmRHRmlTVzVrWlhnbkxDQW5MVEVuS1Z4dVhHNGdJQ0FnZEdocGN5NWliMlI1SUQwZ2JtVjNJRUp2Wkhrb0tWeHVJQ0FnSUhSb2FYTXVhR1ZoWkNBOUlHNWxkeUJJWldGa0tDbGNiaUFnSUNCMGFHbHpMbTl3ZEdsdmJuTWdQU0J1WlhjZ1QzQjBhVzl1Y3lncFhHNWNiaUFnSUNCMGFHbHpMbVp2WTNWeklEMGdMVEZjYmlBZ0lDQmNibjFjYmk4dklFbHVjSFYwTG5CeWIzUnZkSGx3WlM1dmJrOXdaVzRnUFNCbWRXNWpkR2x2YmlncGUxeHVMeThnSUNBZ0lIUm9hWE11YUdWaFpDNTBZWEpuWlhRdWMyVjBRWFIwY21saWRYUmxLQ2RoY21saExXVjRjR0Z1WkdWa0p5d2dKM1J5ZFdVbktUdGNiaTh2SUgxY2JrbHVjSFYwTG5CeWIzUnZkSGx3WlM1aWFXNWtSWFpsYm5SeklEMGdablZ1WTNScGIyNG9LWHRjYmx4dUlDQWdJSFJvYVhNdWFHVmhaQzUwWVhKblpYUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQmxkblFnUFQ0Z0lIc2dYRzRnSUNBZ0lDQWdJR1YyZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbEtDa2dYRzRnSUNBZ2ZTbGNibHh1SUNBZ0lIUm9hWE11YUdWaFpDNTBZWEpuWlhRdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmEyVjVaRzkzYmljc0lHVjJkQ0E5UGlBZ2V5QmNiaUFnSUNBZ0lDQWdhV1lvWlhaMExtdGxlVU52WkdVZ1BUMDlJREV6SUNrZ2RHaHBjeTUxY0dSaGRHVW9LU0JjYmlBZ0lDQWdJQ0FnWld4elpTQnBaaWdnV3pNNExEUXdYUzVwYm1SbGVFOW1LR1YyZEM1clpYbERiMlJsS1NBK0lDMHhJQ2wwYUdsekxuVndaR0YwWlNoMGNuVmxLU0JjYmlBZ0lDQWdJQ0FnWld4elpTQnBaaWdnV3pJM1hTNXBibVJsZUU5bUtHVjJkQzVyWlhsRGIyUmxLU0ErSUMweElDbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblZ3WkdGMFpTaG1ZV3h6WlNrZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXdkR2x2Ym5NdVpXeHpXM1JvYVhNdVptOWpkWE5kTG1Kc2RYSW9LVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWW9JSFJvYVhNdWIzQjBhVzl1Y3k1elpXeGxZM1JsWkNBbUppQjBhR2x6TG05d2RHbHZibk11YzJWc1pXTjBaV1JiTUYwZ0tYdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVabTlqZFhNZ1BTQjBhR2x6TG05d2RHbHZibk11YzJWc1pXTjBaV1JiTUYwdWFXNWtaWGhjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YjNCMGFXOXVjeTV6Wld4bFkzUmxaRnN3WFM1eVpXeGhkR1ZrTG1adlkzVnpLQ2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSFJvYVhNdWIzQjBhVzl1Y3k1bGJITmJNRjB1Wm05amRYTW9LU0FnSUNBZ0lDQWdYRzRnSUNBZ2ZTbGNiaUFnSUNCMGFHbHpMbUp2WkhrdWRHRnlaMlYwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJ0bGVXUnZkMjRuTENCbGRuUWdQVDRnSUhzZ1hHNGdJQ0FnSUNBZ0lDOHZJR2xtS0NCYk16Z3NOREJkTG1sdVpHVjRUMllvWlhaMExtdGxlVU52WkdVcElENGdMVEVnS1NCMGFHbHpMblZ3WkdGMFpTaDBjblZsS1NCY2JpQWdJQ0FnSUNBZ2FXWW9kR2hwY3k1bWIyTjFjeUFoUFNCMGFHbHpMbTl3ZEdsdmJuTXVaV3h6TG14bGJtZDBhQ0F0SURFZ0ppWWdaWFowTG10bGVVTnZaR1VnUFQwOUlEUXdJQ2tnZEdocGN5NW1iMk4xY3lBOUlIUm9hWE11Wm05amRYTWdLeUF4WEc0Z0lDQWdJQ0FnSUdsbUtIUm9hWE11Wm05amRYTWdJVDBnTUNBbUppQmxkblF1YTJWNVEyOWtaU0E5UFQwZ016Z2dLU0IwYUdsekxtWnZZM1Z6SUQwZ2RHaHBjeTVtYjJOMWN5QXRJREZjYmx4dUlDQWdJQ0FnSUNCcFppaDBhR2x6TG1adlkzVnpJRDRnTFRFZ0lDWW1JRnN6T0N3ME1GMHVhVzVrWlhoUFppaGxkblF1YTJWNVEyOWtaU2tnUGlBdE1Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMbVZzYzF0MGFHbHpMbVp2WTNWelhTNW1iMk4xY3lncElDQmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUtDRjBhR2x6TG1sdWNIVjBMbTExYkhScGNHeGxLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXdkR2x2Ym5NdWMybHVaMnhsS0hSb2FYTXViM0IwYVc5dWN5NWxiSE5iZEdocGN5NW1iMk4xYzEwcElGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YUdWaFpDNTFjR1JoZEdVb2RHaHBjeTV2Y0hScGIyNXpLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtS0hSb2FYTXVabTlqZFhNZ1BpQXRNU0FtSmlCbGRuUXVhMlY1UTI5a1pTQTlQVDBnTVRNZ0ppWWdJWFJvYVhNdWFXNXdkWFF1YlhWc2RHbHdiR1VwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1VvWm1Gc2MyVXBYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl3ZEdsdmJuTXVaV3h6VzNSb2FYTXVabTlqZFhOZExtSnNkWElvS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZb2RHaHBjeTVtYjJOMWN5QStJQzB4SUNZbUlHVjJkQzVyWlhsRGIyUmxJRDA5UFNBeE15QW1KaUIwYUdsekxtbHVjSFYwTG0xMWJIUnBjR3hsS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIzQjBhVzl1Y3k1dGRXeDBhU2gwYUdsekxtOXdkR2x2Ym5NdVpXeHpXM1JvYVhNdVptOWpkWE5kS1NCY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHVmhaQzUxY0dSaGRHVW9kR2hwY3k1dmNIUnBiMjV6S1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZb2RHaHBjeTVtYjJOMWN5QStJQzB4SUNZbUlGc3lOeXdnT1YwdWFXNWtaWGhQWmlobGRuUXVhMlY1UTI5a1pTa2dQaUF0TVNBcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdVb1ptRnNjMlVwSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmNIUnBiMjV6TG1Wc2MxdDBhR2x6TG1adlkzVnpYUzVpYkhWeUtDbGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQjlLVnh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeTVsYkhNdVptOXlSV0ZqYUNnZ0tHVnNLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHVnNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk5zYVdOckp5d2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb0lDRjBhR2x6TG1sdWNIVjBMbTExYkhScGNHeGxJQ2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZjSFJwYjI1ekxuTnBibWRzWlNobGJDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaU2htWVd4elpTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiQzVpYkhWeUtDbGNiaUFnSUNBZ0lDQWdJQ0FnSUgxbGJITmxlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIzQjBhVzl1Y3k1dGRXeDBhU2hsYkNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWhsWVdRdWRYQmtZWFJsS0hSb2FYTXViM0IwYVc5dWN5bGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhSb2FYTXVhR1ZoWkM1MWNHUmhkR1VvZEdocGN5NXZjSFJwYjI1ektWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUM4dklHVnNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMnRsZVdSdmQyNG5MQ0JsZG5RZ1BUNGdlMXh1SUNBZ0lDQWdJQ0F2THlBZ0lDQWdJWFJvYVhNdWFXNXdkWFF1YlhWc2RHbHdiR1VnUHlCMGFHbHpMbTl3ZEdsdmJuTXVjMmx1WjJ4bEtHVnNLU0E2SUhSb2FYTXViM0IwYVc5dWN5NXRkV3gwYVNobGJDbGNiaUFnSUNBZ0lDQWdMeThnSUNBZ0lIUm9hWE11YUdWaFpDNTFjR1JoZEdVb2RHaHBjeTV2Y0hScGIyNXpLVnh1SUNBZ0lDQWdJQ0F2THlCOUtWeHVJQ0FnSUgwcFhHNWNibHh1ZlZ4dVhHNUpibkIxZEM1d2NtOTBiM1I1Y0dVdWRYQmtZWFJsSUQwZ1puVnVZM1JwYjI0b2IzQmxiaWw3WEc0Z0lDQWdkR2hwY3k1dmNHVnVJRDBnYjNCbGJpQS9JRzl3Wlc0Z09pQWhkR2hwY3k1dmNHVnVYRzRnSUNBZ2RHaHBjeTV6ZEdGMFpTZ3BYRzU5WEc1Y2JrbHVjSFYwTG5CeWIzUnZkSGx3WlM1amIyNXpkSEoxWTNRZ1BTQm1kVzVqZEdsdmJpaHdZWEpoYlhNcGUxeHVYRzRnSUNBZ2FXWWdLSEJoY21GdGN5a2dkR2hwY3k1cGJuQjFkQ0E5SUhObGRFRnljbUY1S0hSb2FYTXVhVzV3ZFhRc0lIQmhjbUZ0Y3lrN1hHNWNiaUFnSUNCcFppZ2djR0Z5WVcxekxtSnZaSGtnSVQwZ1ptRnNjMlVnSmlZZ2NHRnlZVzF6TG1KdlpIa3BJSFJvYVhNdVltOWtlU0E5SUhObGRFRnljbUY1S0hSb2FYTXVZbTlrZVN3Z2NHRnlZVzF6TG1KdlpIa3BYRzRnSUNBZ1pXeHpaU0JwWmlnZ2NHRnlZVzF6TG1KdlpIa2dQVDA5SUdaaGJITmxLU0IwYUdsekxtSnZaSGtnUFNCbVlXeHpaVnh1WEc0Z0lDQWdhV1lvSUhCaGNtRnRjeTVvWldGa0lDRTlJR1poYkhObElDWW1JSEJoY21GdGN5NW9aV0ZrS1NCMGFHbHpMbWhsWVdRZ1BTQnpaWFJCY25KaGVTaDBhR2x6TG1obFlXUXNJSEJoY21GdGN5NW9aV0ZrS1Z4dUlDQWdJR1ZzYzJVZ2FXWW9JSEJoY21GdGN5NW9aV0ZrSUQwOVBTQm1ZV3h6WlNrZ2RHaHBjeTVvWldGa0lEMGdabUZzYzJWY2JseHVJQ0FnSUdsbUtDQndZWEpoYlhNdWIzQjBhVzl1Y3lBaFBTQm1ZV3h6WlNBbUppQndZWEpoYlhNdWIzQjBhVzl1Y3lrZ2RHaHBjeTV2Y0hScGIyNXpJRDBnYzJWMFFYSnlZWGtvZEdocGN5NXZjSFJwYjI1ekxDQndZWEpoYlhNdWIzQjBhVzl1Y3lsY2JpQWdJQ0JsYkhObElHbG1LQ0J3WVhKaGJYTXViM0IwYVc5dWN5QTlQVDBnWm1Gc2MyVXBJSFJvYVhNdWIzQjBhVzl1Y3lBOUlHWmhiSE5sWEc1Y2JpQWdJQ0JjYmlBZ0lDQjBhR2x6TG1OeVpXRjBaU2dwSUNCY2JuMWNibHh1WEc1SmJuQjFkQzV3Y205MGIzUjVjR1V1WTNKbFlYUmxJRDBnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0IwYUdsekxtOXdkR2x2Ym5NdWIzQjBhVzl1Y3lBOUlIUm9hWE11Wld3dWIzQjBhVzl1YzF4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3k1elpXeGxZM1JsWkNBOUlIUm9hWE11Wld3dWMyVnNaV04wWldSUGNIUnBiMjV6WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNCMGFHbHpMbU52Ym5SaGFXNWxjaUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9kR2hwY3k1cGJuQjFkQzUwWVdjcE8xeHVJQ0FnSUhSb2FYTXVZMjl1ZEdGcGJtVnlMbU5zWVhOelRHbHpkQzVoWkdRb0oyRmlZeTF6Wld4bFkzUW5LVHRjYmx4dUlDQWdJSFJvYVhNdVpXd3VjR0Z5Wlc1MFRtOWtaUzVwYm5ObGNuUkNaV1p2Y21Vb2RHaHBjeTVqYjI1MFlXbHVaWElzSUhSb2FYTXVaV3dwWEc0Z0lDQmNiaUFnSUNCMGFHbHpMbU52Ym5SaGFXNWxjaTVoY0hCbGJtUkRhR2xzWkNoMGFHbHpMbVZzS1R0Y2JpQWdJQ0JjYmlBZ0lDQnBaaWdnZEdocGN5NW9aV0ZrSUNrZ2RHaHBjeTVvWldGa0xtTnZibk4wY25WamRDaDBhR2x6S1NCY2JpQWdJQ0JwWmlnZ2RHaHBjeTVpYjJSNUlDa2dkR2hwY3k1aWIyUjVMbU52Ym5OMGNuVmpkQ2gwYUdsektTQmNiaUFnSUZ4dUlDQWdJR2xtS0NGMGFHbHpMbWhsWVdRdVpHVm1ZWFZzZENrZ2RHaHBjeTVvWldGa0xuUmhjbWRsZEM1cGJtNWxja2hVVFV3Z1BTQWdkR2hwY3k1dmNIUnBiMjV6TG05d2RHbHZibk5iTUYwdWFXNXVaWEpJVkUxTVhHNGdJQ0FnZEdocGN5NXpkR0YwWlNncFhHNWNiaUFnSUZ4dVhHNGdJQ0FnZEdocGN5NWlhVzVrUlhabGJuUnpLQ2xjYm4xY2JseHVTVzV3ZFhRdWNISnZkRzkwZVhCbExuTjBZWFJsSUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNCMGFHbHpMbTl3Wlc0Z1B5QjBhR2x6TG1OdmJuUmhhVzVsY2k1amJHRnpjMHhwYzNRdVlXUmtLSFJvYVhNdWFXNXdkWFF1YjNCbGJrTnNZWE56S1NBNklIUm9hWE11WTI5dWRHRnBibVZ5TG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvZEdocGN5NXBibkIxZEM1dmNHVnVRMnhoYzNNcFhHNGdJQ0FnZEdocGN5NWliMlI1TG5OMFlYUmxLSFJvYVhNdWIzQmxiaWxjYmlBZ0lDQjBhR2x6TG1obFlXUXVkWEJrWVhSbEtIUm9hWE11YjNCMGFXOXVjeWxjYm4waVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGTVFUdEJRVkZCTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVWQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZFUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVWQk8wRkJPVU5CTzBGQlEwRTdRVUZFUVR0QlFXZEVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVWxCTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVc1RlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFUaERRVHRCUVhOQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlJVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGSlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9TZWxlY3QvQ29yZS9JbnB1dC5qc1xcblwiKX0sXCIuL3NyYy9TZWxlY3QvQ29yZS9PcHRpb25zLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvU2VsZWN0L0NvcmUvT3B0aW9ucy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe2V2YWwoXCJmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cXG5cXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXFxcIik7IH1cXG5cXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcXFwiW29iamVjdCBBcmd1bWVudHNdXFxcIikgeyByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfSB9XFxuXFxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfVxcblxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xcbiAgcmV0dXJuIG5ldyBPcHRpb25zKCk7XFxufTtcXG5cXG5mdW5jdGlvbiBPcHRpb25zKCkge1xcbiAgdGhpcy50YWcgPSAnbGknO1xcbiAgdGhpcy5jbGFzc05hbWUgPSAnYWJjLXNlbGVjdF9faXRlbSc7XFxuICB0aGlzLnRhcmdldHMgPSBmYWxzZTtcXG4gIHRoaXMudmFsdWVzID0gW107XFxuICB0aGlzLmVscyA9IFtdO1xcbiAgdGhpcy5kZWZhdWx0ID0gW107XFxufVxcblxcbk9wdGlvbnMucHJvdG90eXBlLmNvbnN0cnVjdCA9IGZ1bmN0aW9uIChib2R5KSB7XFxuICB2YXIgX3RoaXMgPSB0aGlzO1xcblxcbiAgdmFyIF9hID0gdGhpcy5vcHRpb25zO1xcblxcbiAgdmFyIF9mID0gZnVuY3Rpb24gX2Yob3B0aW9uKSB7XFxuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoX3RoaXMudGFnKTtcXG4gICAgdmFyIF9hMyA9IG9wdGlvbi5hdHRyaWJ1dGVzO1xcblxcbiAgICB2YXIgX2YzID0gZnVuY3Rpb24gX2YzKGF0dHIpIHtcXG4gICAgICBpZiAoYXR0ci5uYW1lID09PSBcXFwidmFsdWVcXFwiICYmIGF0dHIudmFsdWUpIHtcXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnYWJjLXZhbHVlJywgYXR0ci52YWx1ZSk7XFxuICAgICAgfSBlbHNlIGlmIChhdHRyLm5hbWUgPT09IFxcXCJpZFxcXCIgJiYgYXR0ci52YWx1ZSkge1xcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKFxcXCJhYmMtXFxcIi5jb25jYXQoYXR0ci5uYW1lKSwgYXR0ci52YWx1ZSk7XFxuICAgICAgfSBlbHNlIGlmIChhdHRyLm5hbWUgJiYgYXR0ci52YWx1ZSkge1xcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKGF0dHIubmFtZSwgYXR0ci52YWx1ZSk7XFxuICAgICAgfVxcbiAgICB9O1xcblxcbiAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCBfYTMubGVuZ3RoOyBfaTMrKykge1xcbiAgICAgIF9mMyhfYTNbX2kzXSwgX2kzLCBfYTMpO1xcbiAgICB9XFxuXFxuICAgIHVuZGVmaW5lZDtcXG4gICAgZWwuaW5uZXJIVE1MID0gb3B0aW9uLmlubmVySFRNTDtcXG4gICAgZWwuc2V0QXR0cmlidXRlKCdyb2xlJywgJ29wdGlvbicpO1xcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XFxuICAgIGVsLmNsYXNzTGlzdC5hZGQoX3RoaXMuY2xhc3NOYW1lKTtcXG4gICAgZWwucmVsYXRlZCA9IG9wdGlvbjtcXG4gICAgb3B0aW9uLnJlbGF0ZWQgPSBlbDtcXG4gICAgYm9keS5hcHBlbmRDaGlsZChlbCk7XFxuXFxuICAgIF90aGlzLmVscy5wdXNoKGVsKTtcXG4gIH07XFxuXFxuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XFxuICAgIF9mKF9hW19pXSwgX2ksIF9hKTtcXG4gIH1cXG5cXG4gIHVuZGVmaW5lZDtcXG5cXG4gIHZhciBfYTIgPSBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5zZWxlY3RlZCk7XFxuXFxuICB2YXIgX2YyID0gZnVuY3Rpb24gX2YyKHZhbCkge1xcbiAgICByZXR1cm4gdmFsLnZhbHVlO1xcbiAgfTtcXG5cXG4gIHZhciBfcjIgPSBbXTtcXG5cXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IF9hMi5sZW5ndGg7IF9pMisrKSB7XFxuICAgIF9yMi5wdXNoKF9mMihfYTJbX2kyXSwgX2kyLCBfYTIpKTtcXG4gIH1cXG5cXG4gIHRoaXMudmFsdWVzID0gX3IyO1xcbiAgdGhpcy5kZWZhdWx0ID0gdGhpcy5zZWxlY3RlZCA/IF90b0NvbnN1bWFibGVBcnJheSh0aGlzLnNlbGVjdGVkKS5tYXAoZnVuY3Rpb24gKHZhbCkge1xcbiAgICByZXR1cm4gdmFsLmlubmVySFRNTDtcXG4gIH0pIDogdGhpcy5vcHRpb25zWzBdLmlubmVySFRNTDtcXG4gIHJldHVybiB0aGlzLmVscztcXG59O1xcblxcbk9wdGlvbnMucHJvdG90eXBlLnNpbmdsZSA9IGZ1bmN0aW9uIChlbCkge1xcbiAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICB2YXIgX2E0ID0gdGhpcy5lbHM7XFxuXFxuICB2YXIgX2Y0ID0gZnVuY3Rpb24gX2Y0KG9wdCkge1xcbiAgICBpZiAob3B0ICE9IGVsKSB7XFxuICAgICAgb3B0LnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKTtcXG4gICAgICBvcHQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJyk7XFxuICAgICAgb3B0LnJlbGF0ZWQucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIG9wdC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XFxuICAgICAgb3B0LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHRydWUpO1xcbiAgICAgIG9wdC5yZWxhdGVkLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcXG4gICAgICBfdGhpczIuc2VsZWN0ZWQgPSBbb3B0XTtcXG4gICAgICBfdGhpczIuZGVmYXVsdCA9IFtvcHQuaW5uZXJIVE1MXTtcXG4gICAgICBfdGhpczIudmFsdWVzID0gW29wdC52YWx1ZV07XFxuICAgIH1cXG4gIH07XFxuXFxuICBmb3IgKHZhciBfaTQgPSAwOyBfaTQgPCBfYTQubGVuZ3RoOyBfaTQrKykge1xcbiAgICBfZjQoX2E0W19pNF0sIF9pNCwgX2E0KTtcXG4gIH1cXG5cXG4gIHVuZGVmaW5lZDtcXG59O1xcblxcbk9wdGlvbnMucHJvdG90eXBlLm11bHRpID0gZnVuY3Rpb24gKGVsKSB7XFxuICBpZiAoZWwuaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpKSB7XFxuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKTtcXG4gICAgZWwucmVsYXRlZC5yZW1vdmVBdHRyaWJ1dGUoJ3NlbGVjdGVkJyk7XFxuICAgIHZhciBpbmRleERlZiA9IHRoaXMuZGVmYXVsdC5pbmRleE9mKGVsLnJlbGF0ZWQuaW5uZXJIVE1MKTtcXG4gICAgdmFyIGluZGV4VmFsID0gdGhpcy52YWx1ZXMuaW5kZXhPZihlbC5yZWxhdGVkLnZhbHVlKTtcXG5cXG4gICAgaWYgKGluZGV4RGVmID4gLTEpIHtcXG4gICAgICB0aGlzLmRlZmF1bHQuc3BsaWNlKGluZGV4RGVmLCAxKTtcXG4gICAgfVxcblxcbiAgICBpZiAoaW5kZXhWYWwgPiAtMSkge1xcbiAgICAgIHRoaXMudmFsdWVzLnNwbGljZShpbmRleFZhbCwgMSk7XFxuICAgIH1cXG4gIH0gZWxzZSB7XFxuICAgIGVsLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcXG4gICAgZWwucmVsYXRlZC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XFxuICAgIGVsLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHRydWUpO1xcbiAgICB0aGlzLmRlZmF1bHQucHVzaChlbC5yZWxhdGVkLmlubmVySFRNTCk7XFxuICAgIHRoaXMudmFsdWVzLnB1c2goZWwucmVsYXRlZC52YWx1ZSk7XFxuICB9XFxufTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdlUyVnNaV04wTDBOdmNtVXZUM0IwYVc5dWN5NXFjeTVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMEZDUXk4dUwzTnlZeTlUWld4bFkzUXZRMjl5WlM5UGNIUnBiMjV6TG1welB6ZzBNRFlpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBb0tTQTlQaUI3SUhKbGRIVnliaUJ1WlhjZ1QzQjBhVzl1Y3lncElIMWNibHh1Wm5WdVkzUnBiMjRnVDNCMGFXOXVjeWdwZTF4dUlDQWdJSFJvYVhNdWRHRm5JRDBnSjJ4cEoxeHVJQ0FnSUhSb2FYTXVZMnhoYzNOT1lXMWxJRDBnSjJGaVl5MXpaV3hsWTNSZlgybDBaVzBuWEc0Z0lDQWdkR2hwY3k1MFlYSm5aWFJ6SUQwZ1ptRnNjMlZjYmlBZ0lDQjBhR2x6TG5aaGJIVmxjeUE5SUZ0ZFhHNGdJQ0FnZEdocGN5NWxiSE1nUFNCYlhWeHVJQ0FnSUhSb2FYTXVaR1ZtWVhWc2RDQTlJRnRkTzF4dWZWeHVYRzVQY0hScGIyNXpMbkJ5YjNSdmRIbHdaUzVqYjI1emRISjFZM1FnUFNCbWRXNWpkR2x2YmloaWIyUjVLWHRjYmlBZ0lDQjBhR2x6TG05d2RHbHZibk11Wm05eVJXRmphQ2h2Y0hScGIyNGdQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JsYkNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvZEdocGN5NTBZV2NwWEc0Z0lDQWdJQ0FnSUc5d2RHbHZiaTVoZEhSeWFXSjFkR1Z6TG1admNrVmhZMmdvSUdGMGRISWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvWVhSMGNpNXVZVzFsSUQwOVBTQmNJblpoYkhWbFhDSWdJQ1ltSUdGMGRISXVkbUZzZFdVcElHVnNMbk5sZEVGMGRISnBZblYwWlNnbllXSmpMWFpoYkhWbEp5d2dZWFIwY2k1MllXeDFaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZb1lYUjBjaTV1WVcxbElEMDlQU0JjSW1sa1hDSWdKaVlnWVhSMGNpNTJZV3gxWlNrZ1pXd3VjMlYwUVhSMGNtbGlkWFJsS0dCaFltTXRKSHRoZEhSeUxtNWhiV1Y5WUN3Z1lYUjBjaTUyWVd4MVpTbGNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lvWVhSMGNpNXVZVzFsSUNZbUlHRjBkSEl1ZG1Gc2RXVXBJR1ZzTG5ObGRFRjBkSEpwWW5WMFpTaGhkSFJ5TG01aGJXVXNJR0YwZEhJdWRtRnNkV1VwWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnWld3dWFXNXVaWEpJVkUxTUlEMGdiM0IwYVc5dUxtbHVibVZ5U0ZSTlRGeHVJQ0FnSUNBZ0lDQmxiQzV6WlhSQmRIUnlhV0oxZEdVb0ozSnZiR1VuTENBbmIzQjBhVzl1SnlsY2JpQWdJQ0FnSUNBZ1pXd3VjMlYwUVhSMGNtbGlkWFJsS0NkMFlXSnBibVJsZUNjc0lDY3RNU2NwWEc1Y2JpQWdJQ0FnSUNBZ1pXd3VZMnhoYzNOTWFYTjBMbUZrWkNoMGFHbHpMbU5zWVhOelRtRnRaU2xjYmlBZ0lDQWdJQ0FnWld3dWNtVnNZWFJsWkNBOUlHOXdkR2x2Ymx4dUlDQWdJQ0FnSUNCdmNIUnBiMjR1Y21Wc1lYUmxaQ0E5SUdWc1hHNGdJQ0FnSUNBZ0lHSnZaSGt1WVhCd1pXNWtRMmhwYkdRb1pXd3BYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXeHpMbkIxYzJnb1pXd3BYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQjBhR2x6TG5aaGJIVmxjeUE5SUZzdUxpNTBhR2x6TG5ObGJHVmpkR1ZrWFM1dFlYQW9JSFpoYkNBOVBpQjJZV3d1ZG1Gc2RXVWdLVnh1SUNBZ0lIUm9hWE11WkdWbVlYVnNkQ0E5SUhSb2FYTXVjMlZzWldOMFpXUWdQeUJiTGk0dWRHaHBjeTV6Wld4bFkzUmxaRjB1YldGd0tDQjJZV3dnUFQ0Z2RtRnNMbWx1Ym1WeVNGUk5UQ0FwSURvZ2RHaHBjeTV2Y0hScGIyNXpXekJkTG1sdWJtVnlTRlJOVEZ4dUlDQWdJRnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZzY3p0Y2JuMWNibHh1WEc1UGNIUnBiMjV6TG5CeWIzUnZkSGx3WlM1emFXNW5iR1VnUFNCbWRXNWpkR2x2YmlobGJDbDdYRzVjYmlBZ0lDQjBhR2x6TG1Wc2N5NW1iM0pGWVdOb0tDQW9iM0IwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtS0c5d2RDQWhQU0JsYkNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0hRdWNtVnRiM1psUVhSMGNtbGlkWFJsS0NkelpXeGxZM1JsWkNjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0hRdWNtVnRiM1psUVhSMGNtbGlkWFJsS0NkaGNtbGhMWE5sYkdWamRHVmtKeWxjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdiM0IwTG5KbGJHRjBaV1F1Y21WdGIzWmxRWFIwY21saWRYUmxLQ2R6Wld4bFkzUmxaQ2NwSUZ4dUlDQWdJQ0FnSUNCOVpXeHpaWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdkQzV6WlhSQmRIUnlhV0oxZEdVb0ozTmxiR1ZqZEdWa0p5d2dKM05sYkdWamRHVmtKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdkQzV6WlhSQmRIUnlhV0oxZEdVb0oyRnlhV0V0YzJWc1pXTjBaV1FuTENCMGNuVmxLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQjBMbkpsYkdGMFpXUXVjMlYwUVhSMGNtbGlkWFJsS0NkelpXeGxZM1JsWkNjc0lDZHpaV3hsWTNSbFpDY3BYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sYkdWamRHVmtJRDBnVzI5d2RGMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR1ZtWVhWc2RDQTlJRnR2Y0hRdWFXNXVaWEpJVkUxTVhWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTJZV3gxWlhNZ1BTQmJiM0IwTG5aaGJIVmxYVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJSDBwWEc1OVhHNVBjSFJwYjI1ekxuQnliM1J2ZEhsd1pTNXRkV3gwYVNBOUlHWjFibU4wYVc5dUtHVnNLWHRjYmlBZ0lDQnBaaWdnWld3dWFHRnpRWFIwY21saWRYUmxLQ2R6Wld4bFkzUmxaQ2NwSUNsN1hHNGdJQ0FnSUNBZ0lHVnNMbkpsYlc5MlpVRjBkSEpwWW5WMFpTZ25jMlZzWldOMFpXUW5LVnh1SUNBZ0lDQWdJQ0JsYkM1eVpXeGhkR1ZrTG5KbGJXOTJaVUYwZEhKcFluVjBaU2duYzJWc1pXTjBaV1FuS1Z4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdsdVpHVjRSR1ZtSUQwZ2RHaHBjeTVrWldaaGRXeDBMbWx1WkdWNFQyWW9aV3d1Y21Wc1lYUmxaQzVwYm01bGNraFVUVXdwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JwYm1SbGVGWmhiQ0E5SUhSb2FYTXVkbUZzZFdWekxtbHVaR1Y0VDJZb1pXd3VjbVZzWVhSbFpDNTJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lHbG1LR2x1WkdWNFJHVm1JRDRnTFRFcElIUm9hWE11WkdWbVlYVnNkQzV6Y0d4cFkyVW9hVzVrWlhoRVpXWXNJREVwTzF4dUlDQWdJQ0FnSUNCcFppaHBibVJsZUZaaGJDQStJQzB4S1NCMGFHbHpMblpoYkhWbGN5NXpjR3hwWTJVb2FXNWtaWGhXWVd3c0lERXBPMXh1SUNBZ0lIMWxiSE5sZTF4dUlDQWdJQ0FnSUNCbGJDNXpaWFJCZEhSeWFXSjFkR1VvSjNObGJHVmpkR1ZrSnl3Z0ozTmxiR1ZqZEdWa0p5bGNiaUFnSUNBZ0lDQWdaV3d1Y21Wc1lYUmxaQzV6WlhSQmRIUnlhV0oxZEdVb0ozTmxiR1ZqZEdWa0p5d2dKM05sYkdWamRHVmtKeWxjYmx4dUlDQWdJQ0FnSUNCbGJDNXpaWFJCZEhSeWFXSjFkR1VvSjJGeWFXRXRjMlZzWldOMFpXUW5MQ0IwY25WbEtWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdkR2hwY3k1a1pXWmhkV3gwTG5CMWMyZ29aV3d1Y21Wc1lYUmxaQzVwYm01bGNraFVUVXdwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbUZzZFdWekxuQjFjMmdvWld3dWNtVnNZWFJsWkM1MllXeDFaU2xjYmlBZ0lDQmNiaUFnSUNCOVhHNTlJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlJFRTdRVUZEUVR0QlFVUkJPMEZCUlVFN1FVRkVRVHRCUVVOQk8wRkJSRUU3UVVGSFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVWQk8wRkJRMEU3UVVGU1FUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCVFVFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVc1Q1FUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkdRVHRCUVVOQk8wRkJSRUU3UVVGdlFrRTdRVUZCUVR0QlFVTkJPMEZCY2tKQk8wRkJRMEU3UVVGRVFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFXMUNRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUVVFN1FVRkRRVHRCUVVSQk8wRkJRMEU3UVVGRVFUdEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRnNRa0U3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFXZENRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJSVUU3UVVGRFFUdEJRVVZCTzBGQlEwRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9zcmMvU2VsZWN0L0NvcmUvT3B0aW9ucy5qc1xcblwiKX0sXCIuL3NyYy9TZWxlY3QvaW5pdC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9TZWxlY3QvaW5pdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2V2YWwoJ3ZhciBJbnB1dCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQ29yZS9JbnB1dCAqLyBcIi4vc3JjL1NlbGVjdC9Db3JlL0lucHV0LmpzXCIpO1xcblxcbnZhciBTZWxlY3QgPSBtb2R1bGUuZXhwb3J0cyA9IHtcXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQocGFyYW1zKSB7XFxuICAgIGlmIChwYXJhbXMuYWxsKSB7XFxuICAgICAgdmFyIHRhcmdldHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy50YXJnZXQpO1xcblxcbiAgICAgIGlmICghdGFyZ2V0cykge1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgX2EgPSB0YXJnZXRzO1xcblxcbiAgICAgIHZhciBfZiA9IGZ1bmN0aW9uIF9mKHRhcmdldCkge1xcbiAgICAgICAgcmV0dXJuIG5ldyBJbnB1dCh0YXJnZXQpLmNvbnN0cnVjdChwYXJhbXMpO1xcbiAgICAgIH07XFxuXFxuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xcbiAgICAgICAgX2YoX2FbX2ldLCBfaSwgX2EpO1xcbiAgICAgIH1cXG5cXG4gICAgICB1bmRlZmluZWQ7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocGFyYW1zLnRhcmdldCk7XFxuXFxuICAgICAgaWYgKCF0YXJnZXQpIHtcXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9XFxuXFxuICAgICAgbmV3IElucHV0KHRhcmdldCkuY29uc3RydWN0KHBhcmFtcyk7XFxuICAgIH1cXG4gIH1cXG59Oy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXpjbU12VTJWc1pXTjBMMmx1YVhRdWFuTXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OUJRa012TGk5emNtTXZVMlZzWldOMEwybHVhWFF1YW5NL1lqRTNZaUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdTVzV3ZFhRZ1BTQnlaWEYxYVhKbEtDY3VMME52Y21VdlNXNXdkWFFuS1Z4dWRtRnlJRk5sYkdWamRDQTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNBZ0lHbHVhWFE2SUdaMWJtTjBhVzl1SUNod1lYSmhiWE1wSUh0Y2JpQWdJQ0JjYmlBZ0lDQWdJQ0FnYVdZb2NHRnlZVzF6TG1Gc2JDbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IwWVhKblpYUnpJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2h3WVhKaGJYTXVkR0Z5WjJWMEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb0lYUmhjbWRsZEhNcElISmxkSFZ5Ymp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBjeTVtYjNKRllXTm9LQ0IwWVhKblpYUWdQVDRnYm1WM0lFbHVjSFYwS0hSaGNtZGxkQ2t1WTI5dWMzUnlkV04wS0hCaGNtRnRjeWtnS1Z4dUlDQWdJQ0FnSUNCOVpXeHpaWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhSaGNtZGxkQ0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9jR0Z5WVcxekxuUmhjbWRsZENsY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0NGMFlYSm5aWFFwSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJKYm5CMWRDaDBZWEpuWlhRcExtTnZibk4wY25WamRDaHdZWEpoYlhNcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlYRzRpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZJUVR0QlFVTkJPMEZCUkVFN1FVRkpRVHRCUVVGQk8wRkJRMEU3UVVGTVFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVZEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRmlRU0lzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vc3JjL1NlbGVjdC9pbml0LmpzXFxuJyl9LFwiLi9zcmMvYWJjLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9hYmMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbCgndmFyIEFCQ0ZpbHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vRmlsdGVyL2luaXQuanMgKi8gXCIuL3NyYy9GaWx0ZXIvaW5pdC5qc1wiKTtcXG5cXG52YXIgQUJDU2VsZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZWxlY3QvaW5pdC5qcyAqLyBcIi4vc3JjL1NlbGVjdC9pbml0LmpzXCIpO1xcblxcbnZhciBBQkNSYW5nZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUmFuZ2UvaW5pdC5qcyAqLyBcIi4vc3JjL1JhbmdlL2luaXQuanNcIik7XFxuXFxudmFyIEFCQ0F1dG9Db21wbGV0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQXV0b0NvbXBsZXRlL2luaXQuanMgKi8gXCIuL3NyYy9BdXRvQ29tcGxldGUvaW5pdC5qc1wiKTtcXG5cXG52YXIgYWJjO1xcbnZhciBTZWxlY3QgPSB7XFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHBhcmFtcykge1xcbiAgICBuZXcgQUJDU2VsZWN0LmluaXQocGFyYW1zKTtcXG4gIH0sXFxuICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KCkge1xcbiAgICBjb25zb2xlLmxvZyhcXCdBQkMgU2VsZWN0IGlzIHJ1bm5pbmdcXCcpO1xcbiAgfVxcbn07XFxudmFyIFJhbmdlID0ge1xcbiAgaW5pdDogZnVuY3Rpb24gaW5pdChwYXJhbXMpIHtcXG4gICAgbmV3IEFCQ1JhbmdlLmluaXQocGFyYW1zKTtcXG4gIH1cXG59O1xcbnZhciBBdXRvQ29tcGxldGUgPSB7XFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHBhcmFtcykge1xcbiAgICBuZXcgQUJDQXV0b0NvbXBsZXRlLmluaXQocGFyYW1zKTtcXG4gIH1cXG59O1xcbnZhciBGaWx0ZXIgPSB7XFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHBhcmFtcykge1xcbiAgICBhYmMgPSBuZXcgQUJDRmlsdGVyLmluaXQocGFyYW1zKTtcXG4gICAgcmV0dXJuIGFiYztcXG4gIH0sXFxuICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KCkge1xcbiAgICBjb25zb2xlLmxvZyhcXCdBQkMgRmlsdGVyIGlzIHJ1bm5pbmdcXCcpO1xcbiAgfSAvLyB0ZW1wbGF0ZSA6IGZ1bmN0aW9uKCl7XFxuICAvLyAgICAgUHJvbWlzZS5hbGwoW0FCQy5maWx0ZXJdKS50aGVuKCAoYWJjKSA9PntcXG4gIC8vICAgICAgICAgY29uc29sZS5sb2coYWJjWzBdKTtcXG4gIC8vICAgICB9ICk7IFxcbiAgLy8gfVxcblxcbn07XFxubW9kdWxlLmV4cG9ydHMgPSB7XFxuICBGaWx0ZXI6IEZpbHRlcixcXG4gIFNlbGVjdDogU2VsZWN0LFxcbiAgUmFuZ2U6IFJhbmdlLFxcbiAgQXV0b0NvbXBsZXRlOiBBdXRvQ29tcGxldGVcXG59Oy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXpjbU12WVdKakxtcHpMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZRVUpETHk0dmMzSmpMMkZpWXk1cWN6ODJZVEEzSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklseHVkbUZ5SUVGQ1EwWnBiSFJsY2lBOUlISmxjWFZwY21Vb0p5NHZSbWxzZEdWeUwybHVhWFF1YW5NbktWeHVkbUZ5SUVGQ1ExTmxiR1ZqZENBOUlISmxjWFZwY21Vb0p5NHZVMlZzWldOMEwybHVhWFF1YW5NbktWeHVkbUZ5SUVGQ1ExSmhibWRsSUQwZ2NtVnhkV2x5WlNnbkxpOVNZVzVuWlM5cGJtbDBMbXB6SnlsY2JuWmhjaUJCUWtOQmRYUnZRMjl0Y0d4bGRHVWdQU0J5WlhGMWFYSmxLQ2N1TDBGMWRHOURiMjF3YkdWMFpTOXBibWwwTG1wekp5bGNibHh1WEc1c1pYUWdZV0pqTzF4dWRtRnlJRk5sYkdWamRDQTlJSHRjYmlBZ0lDQnBibWwwT2lCbWRXNWpkR2x2YmlBb2NHRnlZVzF6S1NCN0lHNWxkeUJCUWtOVFpXeGxZM1F1YVc1cGRDaHdZWEpoYlhNcElIMHNYRzRnSUNBZ2RHVnpkRG9nWm5WdVkzUnBiMjRvS1NCN0lHTnZibk52YkdVdWJHOW5LQ2RCUWtNZ1UyVnNaV04wSUdseklISjFibTVwYm1jbktTQjlYRzU5TzF4dVhHNTJZWElnVW1GdVoyVWdQU0I3WEc0Z0lDQWdhVzVwZERvZ1puVnVZM1JwYjI0Z0tIQmhjbUZ0Y3lrZ2V5QnVaWGNnUVVKRFVtRnVaMlV1YVc1cGRDaHdZWEpoYlhNcElIMHNYRzU5WEc1MllYSWdRWFYwYjBOdmJYQnNaWFJsSUQwZ2UxeHVJQ0FnSUdsdWFYUTZJR1oxYm1OMGFXOXVJQ2h3WVhKaGJYTXBleUJ1WlhjZ1FVSkRRWFYwYjBOdmJYQnNaWFJsTG1sdWFYUW9jR0Z5WVcxektTQjlYRzU5WEc1MllYSWdSbWxzZEdWeUlEMGdlMXh1SUNBZ0lHbHVhWFE2SUdaMWJtTjBhVzl1SUNod1lYSmhiWE1wSUhzZ1hHNGdJQ0FnSUNBZ0lHRmlZeUE5SUc1bGR5QkJRa05HYVd4MFpYSXVhVzVwZENod1lYSmhiWE1wWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoWW1OY2JpQWdJQ0FnZlN4Y2JpQWdJQ0IwWlhOME9pQm1kVzVqZEdsdmJpZ3BJSHNnWTI5dWMyOXNaUzVzYjJjb0owRkNReUJHYVd4MFpYSWdhWE1nY25WdWJtbHVaeWNwSUgxY2JpQWdJQ0F2THlCMFpXMXdiR0YwWlNBNklHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0x5OGdJQ0FnSUZCeWIyMXBjMlV1WVd4c0tGdEJRa011Wm1sc2RHVnlYU2t1ZEdobGJpZ2dLR0ZpWXlrZ1BUNTdYRzRnSUNBZ0x5OGdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWhoWW1OYk1GMHBPMXh1SUNBZ0lDOHZJQ0FnSUNCOUlDazdJRnh1SUNBZ0lDOHZJSDFjYm4xY2JseHVYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTBacGJIUmxjaXdnVTJWc1pXTjBMQ0JTWVc1blpTd2dRWFYwYjBOdmJYQnNaWFJsZlRzaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUmtFN1FVRkxRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVVJCTzBGQlIwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkVRVHRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQldFRTdRVUZsUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vc3JjL2FiYy5qc1xcbicpfSwwOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogbXVsdGkgLi9zcmMvYWJjLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL2Z1bmN0aW9uKG4sdCxlKXtuLmV4cG9ydHM9ZSgvKiEgL1VzZXJzL2F1ZHJleXJvYmljL3Byb2plY3RzL2FiYy9hYmMtZmlsdGVyL3NyYy9hYmMuanMgKi9cIi4vc3JjL2FiYy5qc1wiKX19KX0pOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTs7OztBQUdBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7Ozs7QUFHQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTs7OztBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7OztBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7OztBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7OztBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7OztBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7OztBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7OztBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7OztBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7OztBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQXBJQTtBQW9JQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../build/abc.js\n')},"./assets/js/app.js":
/*!**************************!*\
  !*** ./assets/js/app.js ***!
  \**************************/
/*! no exports provided */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scss_app_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/app.scss */ "./assets/scss/app.scss");\n/* harmony import */ var _scss_app_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_scss_app_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _build_abc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../../build/abc */ "../build/abc.js");\n/* harmony import */ var _build_abc__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_build_abc__WEBPACK_IMPORTED_MODULE_1__);\n // import {Filter, Select} from \'./../../../build/abc.js\'\n\n // import ABCFilter from \'./../../../build/abcfilter\'\n// console.log(ABCFilter);\n\nvar abc = _build_abc__WEBPACK_IMPORTED_MODULE_1__["Filter"].init({\n  url: "https://bruxellesdata.opendatasoft.com/api/records/1.0/search/?dataset=stations-villo-disponibilites-en-temps-reel&rows=100",\n  create_url: true,\n  // debug:true,\n  results: {\n    target: \'.abc-el\',\n    action: \'hide\',\n    id: \'fields.number\',\n    prefix: \'abc-\',\n    path: \'records\',\n    template: function template(_ref) {\n      var fields = _ref.fields;\n      return "<div class=\\"abc-el\\" id=\\"abc-".concat(fields.number, "\\">\\n                      <h3>").concat(fields.name, "</h3> \\n                      <p>Stands: ").concat(fields.bike_stands, "</p>\\n                      <p>Availaible: ").concat(fields.available_bike_stands, "</p>\\n          </div>");\n    },\n    container: \'.abc-results--els\' // onStart: () => { console.log(\'before\'); document.body.style.background = "red" },\n    // onComplete: () => { console.log(\'after\'); document.body.style.background = "transparent" },\n\n  },\n  nb_results: {\n    target: \'.abc-nbresults\',\n    no_results: function no_results() {\n      return "No place found";\n    },\n    singular: function singular(number) {\n      return "".concat(number, " place found");\n    },\n    plural: function plural(number) {\n      return "".concat(number, " places found");\n    }\n  },\n  form: {\n    container: \'.abc-filter\',\n    action: "change" // target: ".abc-redirect"\n\n  },\n  inputs: {\n    search: [{\n      name: \'abc_search\',\n      compare: [\'fields.name\', \'fields.address\'],\n      url_name: "keywords"\n    }],\n    checkbox: [{\n      name: \'abc_status\',\n      compare: \'fields.status\',\n      url_name: "status"\n    }],\n    radio: [{\n      name: \'abc_contract\',\n      compare: \'fields.contract_name\',\n      url_name: "contract_name"\n    }],\n    range: [{\n      // name: "m_range_min",\n      compare: "fields.available_bike_stands",\n      url_name: "available_bike_stands",\n      multiple: true,\n      min: {\n        name: "abc_range_min",\n        text_target: \'.abc_range_min__label\'\n      },\n      max: {\n        name: "abc_range_max",\n        text_target: \'.abc_range_max__label\'\n      }\n    }],\n    select: [{\n      name: "abc_select--simple",\n      compare: "fields.bike_stands",\n      id: false,\n      url_name: "bike_stands"\n    }, {\n      name: "abc_select--multi",\n      compare: "fields.available_bikes",\n      id: false,\n      url_name: "available_bikes"\n    }]\n  } // load_more : {\n  //   url : {\n  //     params: "rows",\n  //     add: 5\n  //   },\n  //   limit: 300,\n  //   action: \'click\',\n  //   target: \'.btn\',\n  //   thresold: window.innerHeight,\n  //   // onStart: () => { console.log(\'before\'); document.body.style.background = "red" },\n  //   // onComplete: () => { console.log(\'after\');document.body.style.background = "blue" }\n  // },\n  // facette: {\n  //   visible_class: \'abc-filter-show\',\n  //   hidden_class: \'abc-filter-hide\',\n  // }\n\n});\n_build_abc__WEBPACK_IMPORTED_MODULE_1__["Select"].init({\n  target: \'[name="abc_select--simple"]\',\n  multiple: false,\n  all: true // body : false\n\n});\n_build_abc__WEBPACK_IMPORTED_MODULE_1__["Select"].init({\n  target: \'[name="abc_select--multi"]\',\n  multiple: true,\n  head: {\n    max_char: 30\n  } // body : false\n\n});\n_build_abc__WEBPACK_IMPORTED_MODULE_1__["Range"].init({\n  multiple: true,\n  // diff\n  min: {\n    name: "abc_range_min",\n    label: {\n      target: \'.abc_range_min__label\',\n      zero: function zero(val) {\n        return "no stand";\n      },\n      singular: function singular(val) {\n        return "".concat(val, " stand");\n      },\n      plural: function plural(val) {\n        return "".concat(val, " stands");\n      }\n    }\n  },\n  max: {\n    name: "abc_range_max",\n    label: {\n      target: \'.abc_range_max__label\',\n      zero: function zero(val) {\n        return "no stand";\n      },\n      singular: function singular(val) {\n        return "".concat(val, " stand");\n      },\n      plural: function plural(val) {\n        return "".concat(val, " stands");\n      }\n    }\n  } // body : false\n\n});\n_build_abc__WEBPACK_IMPORTED_MODULE_1__["AutoComplete"].init({\n  url: "https://bruxellesdata.opendatasoft.com/api/records/1.0/search/?dataset=stations-villo-disponibilites-en-temps-reel&rows=100",\n  target: "[name=\'abc_search\']",\n  compare: [\'fields.name\', \'fields.address\'],\n  results: {\n    path: \'records\'\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvanMvYXBwLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2FwcC5qcz85ZTBlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAgXCIuLi9zY3NzL2FwcC5zY3NzXCJcblxuLy8gaW1wb3J0IHtGaWx0ZXIsIFNlbGVjdH0gZnJvbSAnLi8uLi8uLi8uLi9idWlsZC9hYmMuanMnXG5pbXBvcnQge0ZpbHRlciwgU2VsZWN0LCBSYW5nZSwgQXV0b0NvbXBsZXRlfSBmcm9tICcuLy4uLy4uLy4uL2J1aWxkL2FiYydcblxuLy8gaW1wb3J0IEFCQ0ZpbHRlciBmcm9tICcuLy4uLy4uLy4uL2J1aWxkL2FiY2ZpbHRlcidcbi8vIGNvbnNvbGUubG9nKEFCQ0ZpbHRlcik7XG5cblxuY29uc3QgYWJjID0gRmlsdGVyLmluaXQoe1xuICAgIHVybCAgICA6ICBgaHR0cHM6Ly9icnV4ZWxsZXNkYXRhLm9wZW5kYXRhc29mdC5jb20vYXBpL3JlY29yZHMvMS4wL3NlYXJjaC8/ZGF0YXNldD1zdGF0aW9ucy12aWxsby1kaXNwb25pYmlsaXRlcy1lbi10ZW1wcy1yZWVsJnJvd3M9MTAwYCxcbiAgICBjcmVhdGVfdXJsOiB0cnVlLFxuICAgIC8vIGRlYnVnOnRydWUsXG4gICAgcmVzdWx0cyA6XG4gICAge1xuICAgICAgdGFyZ2V0ICAgOiAnLmFiYy1lbCcsXG4gICAgICBhY3Rpb24gICA6ICdoaWRlJyxcbiAgICAgIGlkICAgICAgIDogJ2ZpZWxkcy5udW1iZXInLFxuICAgICAgcHJlZml4ICAgOiAnYWJjLScsXG4gICAgICBwYXRoICAgICA6ICdyZWNvcmRzJyxcbiAgICAgIHRlbXBsYXRlIDogKHsgZmllbGRzIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJhYmMtZWxcIiBpZD1cImFiYy0ke2ZpZWxkcy5udW1iZXJ9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGgzPiR7ZmllbGRzLm5hbWV9PC9oMz4gXG4gICAgICAgICAgICAgICAgICAgICAgPHA+U3RhbmRzOiAke2ZpZWxkcy5iaWtlX3N0YW5kc308L3A+XG4gICAgICAgICAgICAgICAgICAgICAgPHA+QXZhaWxhaWJsZTogJHtmaWVsZHMuYXZhaWxhYmxlX2Jpa2Vfc3RhbmRzfTwvcD5cbiAgICAgICAgICA8L2Rpdj5gXG4gICAgICAgIH0sXG4gICAgICBjb250YWluZXI6ICcuYWJjLXJlc3VsdHMtLWVscycsXG4gICAgICAvLyBvblN0YXJ0OiAoKSA9PiB7IGNvbnNvbGUubG9nKCdiZWZvcmUnKTsgZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kID0gXCJyZWRcIiB9LFxuICAgICAgLy8gb25Db21wbGV0ZTogKCkgPT4geyBjb25zb2xlLmxvZygnYWZ0ZXInKTsgZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kID0gXCJ0cmFuc3BhcmVudFwiIH0sXG4gICAgfSxcbiAgICBuYl9yZXN1bHRzIDoge1xuICAgICAgdGFyZ2V0OiAnLmFiYy1uYnJlc3VsdHMnLFxuICAgICAgbm9fcmVzdWx0czogKCApID0+IGBObyBwbGFjZSBmb3VuZGAsXG4gICAgICBzaW5ndWxhcjogKCBudW1iZXIgKSA9PiBgJHtudW1iZXJ9IHBsYWNlIGZvdW5kYCxcbiAgICAgIHBsdXJhbDogKCBudW1iZXIgKSA9PiBgJHtudW1iZXJ9IHBsYWNlcyBmb3VuZGAsXG4gICAgfSxcbiAgICBmb3JtICA6XG4gICAge1xuICAgICAgY29udGFpbmVyOiAnLmFiYy1maWx0ZXInLFxuICAgICAgYWN0aW9uOiBcImNoYW5nZVwiLFxuICAgICAgLy8gdGFyZ2V0OiBcIi5hYmMtcmVkaXJlY3RcIlxuICAgIH0sXG4gICAgaW5wdXRzOiB7XG4gICAgICBzZWFyY2g6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdhYmNfc2VhcmNoJyxcbiAgICAgICAgICBjb21wYXJlIDogWydmaWVsZHMubmFtZScsICdmaWVsZHMuYWRkcmVzcyddLFxuICAgICAgICAgIHVybF9uYW1lOiBcImtleXdvcmRzXCIsXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBjaGVja2JveDogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ2FiY19zdGF0dXMnLFxuICAgICAgICAgIGNvbXBhcmUgOiAnZmllbGRzLnN0YXR1cycsXG4gICAgICAgICAgdXJsX25hbWU6IFwic3RhdHVzXCIsXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICByYWRpbzogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ2FiY19jb250cmFjdCcsXG4gICAgICAgICAgY29tcGFyZSA6ICdmaWVsZHMuY29udHJhY3RfbmFtZScsXG4gICAgICAgICAgdXJsX25hbWU6IFwiY29udHJhY3RfbmFtZVwiLFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgcmFuZ2U6IFtcbiAgICAgICAge1xuICAgICAgICAgIC8vIG5hbWU6IFwibV9yYW5nZV9taW5cIixcbiAgICAgICAgICBjb21wYXJlOiBcImZpZWxkcy5hdmFpbGFibGVfYmlrZV9zdGFuZHNcIixcbiAgICAgICAgICB1cmxfbmFtZTogXCJhdmFpbGFibGVfYmlrZV9zdGFuZHNcIixcbiAgICAgICAgICBtdWx0aXBsZTogdHJ1ZSxcbiAgICAgICAgICBtaW46IHtcbiAgICAgICAgICAgIG5hbWU6IFwiYWJjX3JhbmdlX21pblwiLFxuICAgICAgICAgICAgdGV4dF90YXJnZXQ6ICcuYWJjX3JhbmdlX21pbl9fbGFiZWwnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtYXg6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiYWJjX3JhbmdlX21heFwiLFxuICAgICAgICAgICAgdGV4dF90YXJnZXQ6ICcuYWJjX3JhbmdlX21heF9fbGFiZWwnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgc2VsZWN0OiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiBcImFiY19zZWxlY3QtLXNpbXBsZVwiLFxuICAgICAgICAgIGNvbXBhcmU6IFwiZmllbGRzLmJpa2Vfc3RhbmRzXCIsXG4gICAgICAgICAgaWQ6ZmFsc2UsXG4gICAgICAgICAgdXJsX25hbWU6IFwiYmlrZV9zdGFuZHNcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6IFwiYWJjX3NlbGVjdC0tbXVsdGlcIixcbiAgICAgICAgICBjb21wYXJlOiBcImZpZWxkcy5hdmFpbGFibGVfYmlrZXNcIixcbiAgICAgICAgICBpZDpmYWxzZSxcbiAgICAgICAgICB1cmxfbmFtZTogXCJhdmFpbGFibGVfYmlrZXNcIixcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAgLy8gbG9hZF9tb3JlIDoge1xuICAgIC8vICAgdXJsIDoge1xuICAgIC8vICAgICBwYXJhbXM6IFwicm93c1wiLFxuICAgIC8vICAgICBhZGQ6IDVcbiAgICAvLyAgIH0sXG4gICAgLy8gICBsaW1pdDogMzAwLFxuICAgIC8vICAgYWN0aW9uOiAnY2xpY2snLFxuICAgIC8vICAgdGFyZ2V0OiAnLmJ0bicsXG4gICAgLy8gICB0aHJlc29sZDogd2luZG93LmlubmVySGVpZ2h0LFxuICAgIC8vICAgLy8gb25TdGFydDogKCkgPT4geyBjb25zb2xlLmxvZygnYmVmb3JlJyk7IGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZCA9IFwicmVkXCIgfSxcbiAgICAvLyAgIC8vIG9uQ29tcGxldGU6ICgpID0+IHsgY29uc29sZS5sb2coJ2FmdGVyJyk7ZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kID0gXCJibHVlXCIgfVxuICAgIC8vIH0sXG4gICAgLy8gZmFjZXR0ZToge1xuICAgIC8vICAgdmlzaWJsZV9jbGFzczogJ2FiYy1maWx0ZXItc2hvdycsXG4gICAgLy8gICBoaWRkZW5fY2xhc3M6ICdhYmMtZmlsdGVyLWhpZGUnLFxuICAgIC8vIH1cblxuICB9KVxuXG4gIFNlbGVjdC5pbml0KHtcbiAgICB0YXJnZXQgOiAnW25hbWU9XCJhYmNfc2VsZWN0LS1zaW1wbGVcIl0nLFxuICAgIG11bHRpcGxlOiBmYWxzZSxcbiAgICBhbGw6IHRydWVcbiAgICAvLyBib2R5IDogZmFsc2VcbiAgfSlcbiAgU2VsZWN0LmluaXQoe1xuICAgIHRhcmdldCA6ICdbbmFtZT1cImFiY19zZWxlY3QtLW11bHRpXCJdJyxcbiAgICBtdWx0aXBsZTogdHJ1ZSxcbiAgICBoZWFkIDoge1xuICAgICAgbWF4X2NoYXI6IDMwXG4gICAgfVxuICAgIC8vIGJvZHkgOiBmYWxzZVxuICB9KVxuXG4gIFJhbmdlLmluaXQoe1xuICAgIG11bHRpcGxlOiB0cnVlLFxuICAgIC8vIGRpZmZcbiAgICBtaW46IHtcbiAgICAgIG5hbWU6IFwiYWJjX3JhbmdlX21pblwiLFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgdGFyZ2V0OiAnLmFiY19yYW5nZV9taW5fX2xhYmVsJyxcbiAgICAgICAgemVybzoodmFsKSA9PiB7cmV0dXJuIGBubyBzdGFuZGB9LFxuICAgICAgICBzaW5ndWxhcjoodmFsKSA9PiB7cmV0dXJuIGAke3ZhbH0gc3RhbmRgfSxcbiAgICAgICAgcGx1cmFsOih2YWwpID0+IHtyZXR1cm4gYCR7dmFsfSBzdGFuZHNgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBtYXg6IHtcbiAgICAgIG5hbWU6IFwiYWJjX3JhbmdlX21heFwiLFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgdGFyZ2V0OiAnLmFiY19yYW5nZV9tYXhfX2xhYmVsJyxcbiAgICAgICAgemVybzoodmFsKSA9PiB7cmV0dXJuIGBubyBzdGFuZGB9LFxuICAgICAgICBzaW5ndWxhcjoodmFsKSA9PiB7cmV0dXJuIGAke3ZhbH0gc3RhbmRgfSxcbiAgICAgICAgcGx1cmFsOih2YWwpID0+IHtyZXR1cm4gYCR7dmFsfSBzdGFuZHNgfSxcblxuICAgICAgfSxcbiAgICB9XG4gICAgLy8gYm9keSA6IGZhbHNlXG4gIH0pXG5cbiAgQXV0b0NvbXBsZXRlLmluaXQoe1xuICAgIHVybCAgICA6ICBgaHR0cHM6Ly9icnV4ZWxsZXNkYXRhLm9wZW5kYXRhc29mdC5jb20vYXBpL3JlY29yZHMvMS4wL3NlYXJjaC8/ZGF0YXNldD1zdGF0aW9ucy12aWxsby1kaXNwb25pYmlsaXRlcy1lbi10ZW1wcy1yZWVsJnJvd3M9MTAwYCxcbiAgICB0YXJnZXQgOiBcIltuYW1lPSdhYmNfc2VhcmNoJ11cIixcbiAgICBjb21wYXJlIDogWydmaWVsZHMubmFtZScsICdmaWVsZHMuYWRkcmVzcyddLFxuICAgIHJlc3VsdHMgOiB7XG4gICAgICBwYXRoOiAncmVjb3JkcydcbiAgICB9XG4gIH0pIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFoQkE7QUFpQkE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUpBO0FBTUE7QUFFQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBRUE7QUFDQTtBQUNBO0FBSEE7QUFNQTtBQUVBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFUQTtBQWVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUE3Q0E7QUFzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF2R0E7QUEwR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFKQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBSkE7QUFGQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBSkE7QUFGQTtBQUNBO0FBYkE7QUF5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFKQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/app.js\n')},"./assets/scss/app.scss":
/*!******************************!*\
  !*** ./assets/scss/app.scss ***!
  \******************************/
/*! no static exports found */function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvc2Nzcy9hcHAuc2Nzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Fzc2V0cy9zY3NzL2FwcC5zY3NzPzI3MDQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/scss/app.scss\n")}});